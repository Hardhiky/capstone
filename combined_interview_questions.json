[
  {
    "technology": "Python",
    "question": "What is a list comprehension?",
    "answer": "A concise way to create lists.",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "How do list comprehensions work?",
    "answer": "They provide a shorter syntax for creating lists based on existing iterables.",
    "difficulty": "Easy"
  },
  {
    "technology": "Node.js",
    "question": "What is an event loop?",
    "answer": "A mechanism to handle asynchronous operations.",
    "difficulty": "Easy"
  },
  {
    "technology": "Node.js",
    "question": "How does the event loop work?",
    "answer": "It processes callbacks from a queue when the call stack is empty.",
    "difficulty": "Hard"
  },
  {
    "technology": "React",
    "question": "What is a component?",
    "answer": "A reusable building block in the UI.",
    "difficulty": "Easy"
  },
  {
    "technology": "React",
    "question": "What are components in React?",
    "answer": "They are independent, reusable pieces of UI.",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "1. What is __init__?",
    "answer": "__init__ is a contructor method in Python and is automatically called to allocate memory when a new object/instance is created. All classes have a __init__ method associated with them. It helps in distinguishing methods and attributes of a class from local variables.\n# class definition\nclass Student:\n   def __init__(self, fname, lname, age, section):\n       self.firstname = fname\n       self.lastname = lname\n       self.age = age\n       self.section = section\n# creating a new object\nstu1 = Student(\"Sara\", \"Ansh\", 22, \"A2\")",
    "difficulty": "Hard"
  },
  {
    "technology": "Python",
    "question": "2. What is the difference between Python Arrays and lists?",
    "answer": "Arrays in python can only contain elements of same data types i.e., data type of array should be homogeneous. It is a thin wrapper around C language arrays and consumes far less memory than lists.\nLists in python can contain elements of different data types i.e., data type of lists can be heterogeneous. It has the disadvantage of consuming large memory.\nimport array\na = array.array('i', [1, 2, 3])\nfor i in a:\n    print(i, end=' ')    #OUTPUT: 1 2 3\na = array.array('i', [1, 2, 'string'])    #OUTPUT: TypeError: an integer is required (got type str)\na = [1, 2, 'string']\nfor i in a:\n   print(i, end=' ')    #OUTPUT: 1 2 string",
    "difficulty": "Hard"
  },
  {
    "technology": "Python",
    "question": "3. Explain how can you make a Python Script executable on Unix?",
    "answer": "Script file must begin with #!/usr/bin/env python",
    "difficulty": "Easy"
  },
  {
    "technology": "Python",
    "question": "4. What is slicing in Python?",
    "answer": "As the name suggests, \u2018slicing\u2019 is taking parts of.\nSyntax for slicing is [start : stop : step]\nstart is the starting index from where to slice a list or tuple\nstop is the ending index or where to sop.\nstep is the number of steps to jump.\nDefault value for start is 0, stop is number of items, step is 1.\nSlicing can be done on strings, arrays, lists, and tuples.\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(numbers[1 : : 2])  #output : [2, 4, 6, 8, 10]",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "start",
    "answer": "stop",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "stop",
    "answer": "step",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "strings, arrays, lists",
    "answer": "tuples",
    "difficulty": "Easy"
  },
  {
    "technology": "Python",
    "question": "5. What is docstring in Python?",
    "answer": "Documentation string or docstring is a multiline string used to document a specific code segment.\nThe docstring should describe what the function or method does.",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "6. What are unit tests in Python?",
    "answer": "Unit test is a unit testing framework of Python.\nUnit testing means testing different components of software separately. Can you think about why unit testing is important? Imagine a scenario, you are building software that uses three components namely A, B, and C. Now, suppose your software breaks at a point time. How will you find which component was responsible for breaking the software? Maybe it was component A that failed, which in turn failed component B, and this actually failed the software. There can be many such combinations.\nThis is why it is necessary to test each and every component properly so that we know which component might be highly responsible for the failure of the software.",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "7. What is break, continue and pass in Python?",
    "answer": "Break The break statement terminates the loop immediately and the control flows to the statement after the body of the loop.\nContinue The continue statement terminates the current iteration of the statement, skips the rest of the code in the current iteration and the control flows to the next iteration of the loop.\nPass As explained above, the pass keyword in Python is generally used to fill up empty blocks and is similar to an empty statement represented by a semi-colon in languages such as Java, C++, Javascript, etc.\npat = [1, 3, 2, 1, 2, 3, 1, 0, 1, 3]\nfor p in pat:\n   pass\n   if (p == 0):\n       current = p\n       break\n   elif (p % 2 == 0):\n       continue\n   print(p)    # output => 1 3 1 3 1\nprint(current)    # output => 0",
    "difficulty": "Easy"
  },
  {
    "technology": "Python",
    "question": "8. What is the use of self in Python?",
    "answer": "Self is used to represent the instance of the class. With this keyword, you can access the attributes and methods of the class in python. It binds the attributes with the given arguments. self is used in different places and often thought to be a keyword. But unlike in C++, self is not a keyword in Python.",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "9. What are global, protected and private attributes in Python?",
    "answer": "Global variables are public variables that are defined in the global scope. To use the variable in the global scope inside a function, we use the global keyword.\nProtected attributes are attributes defined with an underscore prefixed to their identifier eg. _sara. They can still be accessed and modified from outside the class they are defined in but a responsible developer should refrain from doing so.\nPrivate attributes are attributes with double underscore prefixed to their identifier eg. __ansh. They cannot be accessed or modified from the outside directly and will result in an AttributeError if such an attempt is made.",
    "difficulty": "Easy"
  },
  {
    "technology": "Python",
    "question": "Global",
    "answer": "global",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "10. What are modules and packages in Python?",
    "answer": "Python packages and Python modules are two mechanisms that allow for modular programming in Python. Modularizing has several advantages -\nSimplicity: Working on a single module helps you focus on a relatively small portion of the problem at hand. This makes development easier and less error-prone.\nMaintainability: Modules are designed to enforce logical boundaries between different problem domains. If they are written in a manner that reduces interdependency, it is less likely that modifications in a module might impact other parts of the program.\nReusability: Functions defined in a module can be easily reused by other parts of the application.\nScoping: Modules typically define a separate namespace, which helps avoid confusion between identifiers from other parts of the program.\nModules, in general, are simply Python files with a .py extension and can have a set of functions, classes, or variables defined and implemented. They can be imported and initialized once using the import statement. If partial functionality is needed, import the requisite classes or functions using from foo import bar.\nPackages allow for hierarchial structuring of the module namespace using dot notation. As, modules help avoid clashes between global variable names, in a similar manner, packages help avoid clashes between module names.\nCreating a package is easy since it makes use of the system's inherent file structure. So just stuff the modules into a folder and there you have it, the folder name as the package name. Importing a module or its contents from this package requires the package name as prefix to the module name joined by a dot.\nNote: You can technically import the package as well, but alas, it doesn't import the modules within the package to the local namespace, thus, it is practically useless.",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "Modules",
    "answer": "import",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "Packages",
    "answer": "dot notation",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "dot notation",
    "answer": "modules",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "modules",
    "answer": "packages",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "11. What is pass in Python?",
    "answer": "The pass keyword represents a null operation in Python. It is generally used for the purpose of filling up empty blocks of code which may execute during runtime but has yet to be written. Without the pass statement in the following code, we may run into some errors during code execution.\ndef myEmptyFunc():\n   # do nothing\n   pass\nmyEmptyFunc()    # nothing happens\n## Without the pass keyword\n# File \"<stdin>\", line 3\n# IndentationError: expected an indented block",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "12. What are the common built-in data types in Python?",
    "answer": "There are several built-in data types in Python. Although, Python doesn't require data types to be defined explicitly during variable declarations type errors are likely to occur if the knowledge of data types and their compatibility with each other are neglected. Python provides type() and isinstance() functions to check the type of these variables. These data types can be grouped into the following categories-\nNone Type:\nNone keyword represents the null values in Python. Boolean equality operation can be performed using these NoneType objects.\nClass Name Description\nNoneType Represents the NULL values in Python.\nNumeric Types:\nThere are three distinct numeric types - integers, floating-point numbers, and complex numbers. Additionally, booleans are a sub-type of integers.\nClass Name Description\nint Stores integer literals including hex, octal and binary numbers as integers\nfloat Stores literals containing decimal values and/or exponent signs as floating-point numbers\ncomplex Stores complex numbers in the form (A + Bj) and has attributes: real and imag\nbool Stores boolean value (True or False).\nNote: The standard library also includes fractions to store rational numbers and decimal to store floating-point numbers with user-defined precision.\nSequence Types:\nAccording to Python Docs, there are three basic Sequence Types - lists, tuples, and range objects. Sequence types have the in and not in operators defined for their traversing their elements. These operators share the same priority as the comparison operations.\nClass Name Description\nlist Mutable sequence used to store collection of items.\ntuple Immutable sequence used to store collection of items.\nrange Represents an immutable sequence of numbers generated during execution.\nstr Immutable sequence of Unicode code points to store textual data.\nNote: The standard library also includes additional types for processing:\n1. Binary data such as bytearray bytes memoryview , and\n2. Text strings such as str.\nMapping Types:\nA mapping object can map hashable values to random objects in Python. Mappings objects are mutable and there is currently only one standard mapping type, the dictionary.\nClass Name  Description\ndict Stores comma-separated list of key: value pairs\nSet Types:\nCurrently, Python has two built-in set types - set and frozenset. set type is mutable and supports methods like add() and remove(). frozenset type is immutable and can't be modified after creation.\nClass Name Description\nset Mutable unordered collection of distinct hashable objects.\nfrozenset Immutable collection of distinct hashable objects.\nNote: set is mutable and thus cannot be used as key for a dictionary. On the other hand, frozenset is immutable and thus, hashable, and can be used as a dictionary key or as an element of another set.\nModules:\nModule is an additional built-in type supported by the Python Interpreter. It supports one special operation, i.e., attribute access: mymod.myobj, where mymod is a module and myobj references a name defined in m's symbol table. The module's symbol table resides in a very special attribute of the module __dict__, but direct assignment to this module is neither possible nor recommended.\nCallable Types:\nCallable types are the types to which function call can be applied. They can be user-defined functions, instance methods, generator functions, and some other built-in functions, methods and classes.\nRefer to the documentation at docs.python.org for a detailed view of the callable types.",
    "difficulty": "Hard"
  },
  {
    "technology": "Python",
    "question": "integers, floating-point numbers",
    "answer": "complex numbers",
    "difficulty": "Hard"
  },
  {
    "technology": "Python",
    "question": "complex numbers",
    "answer": "booleans",
    "difficulty": "Hard"
  },
  {
    "technology": "Python",
    "question": "Note:",
    "answer": "fractions",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "fractions",
    "answer": "decimal",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "lists, tuples,",
    "answer": "range",
    "difficulty": "Easy"
  },
  {
    "technology": "Python",
    "question": "range",
    "answer": "in",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "Binary data",
    "answer": "bytearray bytes",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "Text strings",
    "answer": "str",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "set",
    "answer": "frozenset",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "frozenset",
    "answer": "set",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "set",
    "answer": "add()",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "attribute access",
    "answer": "mymod.myobj",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "myobj",
    "answer": "__dict__",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "user-defined functions, instance methods, generator functions",
    "answer": "built-in functions, methods",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "built-in functions, methods",
    "answer": "classes",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "13. What are lists and tuples? What is the key difference between the two?",
    "answer": "Lists and Tuples are both sequence data types that can store a collection of objects in Python. The objects stored in both sequences can have different data types. Lists are represented with square brackets ['sara', 6, 0.19], while tuples are represented with parantheses ('ansh', 5, 0.97).\nBut what is the real difference between the two? The key difference between the two is that while lists are mutable, tuples on the other hand are immutable objects. This means that lists can be modified, appended or sliced on the go but tuples remain constant and cannot be modified in any manner. You can run the following example on Python IDLE to confirm the difference:\nmy_tuple = ('sara', 6, 5, 0.97)\nmy_list = ['sara', 6, 5, 0.97]\nprint(my_tuple[0])     # output => 'sara'\nprint(my_list[0])     # output => 'sara'\nmy_tuple[0] = 'ansh'    # modifying tuple => throws an error\nmy_list[0] = 'ansh'    # modifying list => list modified\nprint(my_tuple[0])     # output => 'sara'\nprint(my_list[0])     # output => 'ansh'",
    "difficulty": "Easy"
  },
  {
    "technology": "Python",
    "question": "Lists",
    "answer": "Tuples",
    "difficulty": "Easy"
  },
  {
    "technology": "Python",
    "question": "Tuples",
    "answer": "equence data types",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "equence data types",
    "answer": "different data types",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "different data types",
    "answer": "square brackets",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "square brackets",
    "answer": "['sara', 6, 0.19]",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "parantheses",
    "answer": "('ansh', 5, 0.97)",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "lists are mutable",
    "answer": "tuples",
    "difficulty": "Easy"
  },
  {
    "technology": "Python",
    "question": "tuples",
    "answer": "immutable",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "14. What is Scope in Python?",
    "answer": "Every object in Python functions within a scope. A scope is a block of code where an object in Python remains relevant. Namespaces uniquely identify all the objects inside a program. However, these namespaces also have a scope defined for them where you could use their objects without any prefix. A few examples of scope created during code execution in Python are as follows:\nA local scope refers to the local objects available in the current function.\nA global scope refers to the objects available throughout the code execution since their inception.\nA module-level scope refers to the global objects of the current module accessible in the program.\nAn outermost scope refers to all the built-in names callable in the program. The objects in this scope are searched last to find the name referenced.\nNote: Local scope objects can be synced with global scope objects using keywords such as global.",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "Note:",
    "answer": "global",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "15. What is PEP 8 and why is it important?",
    "answer": "PEP stands for Python Enhancement Proposal. A PEP is an official design document providing information to the Python community, or describing a new feature for Python or its processes. PEP 8 is especially important since it documents the style guidelines for Python Code. Apparently contributing to the Python open-source community requires you to follow these style guidelines sincerely and strictly.",
    "difficulty": "Hard"
  },
  {
    "technology": "Python",
    "question": "Python Enhancement Proposal",
    "answer": "PEP 8",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "16. What is an Interpreted language?",
    "answer": "An Interpreted language executes its statements line by line. Languages such as Python, Javascript, R, PHP, and Ruby are prime examples of Interpreted languages. Programs written in an interpreted language runs directly from the source code, with no intermediary compilation step.",
    "difficulty": "Easy"
  },
  {
    "technology": "Python",
    "question": "17. What is a dynamically typed language?",
    "answer": "Before we understand a dynamically typed language, we should learn about what typing is. Typing refers to type-checking in programming languages. In a strongly-typed language, such as Python, \"1\" + 2 will result in a type error since these languages don't allow for \"type-coercion\" (implicit conversion of data types). On the other hand, a weakly-typed language, such as Javascript, will simply output \"12\" as result.\nType-checking can be done at two stages -\nStatic - Data Types are checked before execution.\nDynamic - Data Types are checked during execution.\nPython is an interpreted language, executes each statement line by line and thus type-checking is done on the fly, during execution. Hence, Python is a Dynamically Typed Language.",
    "difficulty": "Easy"
  },
  {
    "technology": "Python",
    "question": "Typing",
    "answer": "strongly-typed",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "strongly-typed",
    "answer": "\"1\" + 2",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "\"1\" + 2",
    "answer": "weakly-typed",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "weakly-typed",
    "answer": "\"12\"",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "18. What is Python? What are the benefits of using Python",
    "answer": "Python is a high-level, interpreted, general-purpose programming language. Being a general-purpose language, it can be used to build almost any type of application with the right tools/libraries. Additionally, python supports objects, modules, threads, exception-handling, and automatic memory management which help in modelling real-world problems and building applications to solve these problems.\nBenefits of using Python:\nPython is a general-purpose programming language that has a simple, easy-to-learn syntax that emphasizes readability and therefore reduces the cost of program maintenance. Moreover, the language is capable of scripting, is completely open-source, and supports third-party packages encouraging modularity and code reuse.\nIts high-level data structures, combined with dynamic typing and dynamic binding, attract a huge community of developers for Rapid Application Development and deployment.",
    "difficulty": "Hard"
  },
  {
    "technology": "Python",
    "question": "1. What are Dict and List comprehensions?",
    "answer": "Python comprehensions, like decorators, are syntactic sugar constructs that help build altered and filtered lists, dictionaries, or sets from a given list, dictionary, or set. Using comprehensions saves a lot of time and code that might be considerably more verbose (containing more lines of code). Let's check out some examples, where comprehensions can be truly beneficial:\nPerforming mathematical operations on the entire list\nmy_list = [2, 3, 5, 7, 11]\nsquared_list = [x**2 for x in my_list]    # list comprehension\n# output => [4 , 9 , 25 , 49 , 121]\nsquared_dict = {x:x**2 for x in my_list}    # dict comprehension\n# output => {11: 121, 2: 4 , 3: 9 , 5: 25 , 7: 49}\nPerforming conditional filtering operations on the entire list\nmy_list = [2, 3, 5, 7, 11]\nsquared_list = [x**2 for x in my_list if x%2 != 0]    # list comprehension\n# output => [9 , 25 , 49 , 121]\nsquared_dict = {x:x**2 for x in my_list if x%2 != 0}    # dict comprehension\n# output => {11: 121, 3: 9 , 5: 25 , 7: 49}\nCombining multiple lists into one\nComprehensions allow for multiple iterators and hence, can be used to combine multiple lists into one. \na = [1, 2, 3]\nb = [7, 8, 9]\n[(x + y) for (x,y) in zip(a,b)]  # parallel iterators\n# output => [8, 10, 12]\n[(x,y) for x in a for y in b]    # nested iterators\n# output => [(1, 7), (1, 8), (1, 9), (2, 7), (2, 8), (2, 9), (3, 7), (3, 8), (3, 9)] \nFlattening a multi-dimensional list\nA similar approach of nested iterators (as above) can be applied to flatten a multi-dimensional list or work upon its inner elements. \nmy_list = [[10,20,30],[40,50,60],[70,80,90]]\nflattened = [x for temp in my_list for x in temp]\n# output => [10, 20, 30, 40, 50, 60, 70, 80, 90]\nNote: List comprehensions have the same effect as the map method in other languages. They follow the mathematical set builder notation rather than map and filter functions in Python.",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "syntactic sugar",
    "answer": "build altered",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "build altered",
    "answer": "filtered lists",
    "difficulty": "Easy"
  },
  {
    "technology": "Python",
    "question": "2. What are decorators in Python?",
    "answer": "Decorators in Python are essentially functions that add functionality to an existing function in Python without changing the structure of the function itself. They are represented the @decorator_name in Python and are called in a bottom-up fashion. For example:\n# decorator function to convert to lowercase\ndef lowercase_decorator(function):\n   def wrapper():\n       func = function()\n       string_lowercase = func.lower()\n       return string_lowercase\n   return wrapper\n# decorator function to split words\ndef splitter_decorator(function):\n   def wrapper():\n       func = function()\n       string_split = func.split()\n       return string_split\n   return wrapper\n@splitter_decorator # this is executed next\n@lowercase_decorator # this is executed first\ndef hello():\n   return 'Hello World'\nhello()   # output => [ 'hello' , 'world' ]\nThe beauty of the decorators lies in the fact that besides adding functionality to the output of the method, they can even accept arguments for functions and can further modify those arguments before passing it to the function itself. The inner nested function, i.e. 'wrapper' function, plays a significant role here. It is implemented to enforce encapsulation and thus, keep itself hidden from the global scope.\n# decorator function to capitalize names\ndef names_decorator(function):\n   def wrapper(arg1, arg2):\n       arg1 = arg1.capitalize()\n       arg2 = arg2.capitalize()\n       string_hello = function(arg1, arg2)\n       return string_hello\n   return wrapper\n@names_decorator\ndef say_hello(name1, name2):\n   return 'Hello ' + name1 + '! Hello ' + name2 + '!'\nsay_hello('sara', 'ansh')   # output => 'Hello Sara! Hello Ansh!'",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "Decorators",
    "answer": "@decorator_name",
    "difficulty": "Easy"
  },
  {
    "technology": "Python",
    "question": "accept arguments",
    "answer": "inner nested function",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "inner nested function",
    "answer": "encapsulation",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "3. What is Scope Resolution in Python?",
    "answer": "Sometimes objects within the same scope have the same name but function differently. In such cases, scope resolution comes into play in Python automatically. A few examples of such behavior are:\nPython modules namely 'math' and 'cmath' have a lot of functions that are common to both of them - log10(), acos(), exp() etc. To resolve this ambiguity, it is necessary to prefix them with their respective module, like math.exp() and cmath.exp().\nConsider the code below, an object temp has been initialized to 10 globally and then to 20 on function call. However, the function call didn't change the value of the temp globally. Here, we can observe that Python draws a clear line between global and local variables, treating their namespaces as separate identities.\ntemp = 10   # global-scope variable\ndef func():\n     temp = 20   # local-scope variable\n     print(temp)\nprint(temp)   # output => 10\nfunc()    # output => 20\nprint(temp)   # output => 10\nThis behavior can be overridden using the global keyword inside the function, as shown in the following example:\ntemp = 10   # global-scope variable\ndef func():\n     global temp\n     temp = 20   # local-scope variable\n     print(temp)\nprint(temp)   # output => 10\nfunc()    # output => 20\nprint(temp)   # output => 20",
    "difficulty": "Easy"
  },
  {
    "technology": "Python",
    "question": "4. What are Python namespaces? Why are they used?",
    "answer": "A namespace in Python ensures that object names in a program are unique and can be used without any conflict. Python implements these namespaces as dictionaries with 'name as key' mapped to a corresponding 'object as value'. This allows for multiple namespaces to use the same name and map it to a separate object. A few examples of namespaces are as follows:\nLocal Namespace includes local names inside a function. the namespace is temporarily created for a function call and gets cleared when the function returns.\nGlobal Namespace includes names from various imported packages/ modules that are being used in the current project. This namespace is created when the package is imported in the script and lasts until the execution of the script.\nBuilt-in Namespace includes built-in functions of core Python and built-in names for various types of exceptions.\nThe lifecycle of a namespace depends upon the scope of objects they are mapped to. If the scope of an object ends, the lifecycle of that namespace comes to an end. Hence, it isn't possible to access inner namespace objects from an outer namespace.",
    "difficulty": "Hard"
  },
  {
    "technology": "Python",
    "question": "5. How is memory managed in Python?",
    "answer": "Memory management in Python is handled by the Python Memory Manager. The memory allocated by the manager is in form of a private heap space dedicated to Python. All Python objects are stored in this heap and being private, it is inaccessible to the programmer. Though, python does provide some core API functions to work upon the private heap space.\nAdditionally, Python has an in-built garbage collection to recycle the unused memory for the private heap space.",
    "difficulty": "Hard"
  },
  {
    "technology": "Python",
    "question": "Python Memory Manager",
    "answer": "private heap space",
    "difficulty": "Hard"
  },
  {
    "technology": "Python",
    "question": "6. What is lambda in Python? Why is it used?",
    "answer": "Lambda is an anonymous function in Python, that can accept any number of arguments, but can only have a single expression. It is generally used in situations requiring an anonymous function for a short time period. Lambda functions can be used in either of the two ways:\nAssigning lambda functions to a variable:\nmul = lambda a, b : a * b\nprint(mul(2, 5))    # output => 10\nWrapping lambda functions inside another function:\ndef myWrapper(n):\n return lambda a : a * n\nmulFive = myWrapper(5)\nprint(mulFive(2))    # output => 10",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "7. Explain how to delete a file in Python?",
    "answer": "Use command os.remove(file_name)\nimport os\nos.remove(\"ChangedFile.csv\")\nprint(\"File Removed!\")",
    "difficulty": "Easy"
  },
  {
    "technology": "Python",
    "question": "8. What are negative indexes and why are they used?",
    "answer": "Negative indexes are the indexes from the end of the list or tuple or string.\nArr[-1] means the last element of array Arr[]\narr = [1, 2, 3, 4, 5, 6]\n#get the last element\nprint(arr[-1]) #output 6\n#get the second last element\nprint(arr[-2]) #output 5",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "Arr[-1]",
    "answer": "Arr[]",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "9. What does *args and **kwargs mean?",
    "answer": "*args\n*args is a special syntax used in the function definition to pass variable-length arguments.\n\u201c*\u201d means variable length and \u201cargs\u201d is the name used by convention. You can use any other.\ndef multiply(a, b, *argv):\n   mul = a * b\n   for num in argv:\n       mul *= num\n   return mul\nprint(multiply(1, 2, 3, 4, 5)) #output: 120\n**kwargs\n**kwargs is a special syntax used in the function definition to pass variable-length keyworded arguments.\nHere, also, \u201ckwargs\u201d is used just by convention. You can use any other name.\nKeyworded argument means a variable that has a name when passed to a function.\nIt is actually a dictionary of the variable names and its value.\ndef tellArguments(**kwargs):\n   for key, value in kwargs.items():\n       print(key + \": \" + value)\ntellArguments(arg1 = \"argument 1\", arg2 = \"argument 2\", arg3 = \"argument 3\")\n#output:\n# arg1: argument 1\n# arg2: argument 2\n# arg3: argument 3",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "10. Explain split() and join() functions in Python?",
    "answer": "You can use split() function to split a string based on a delimiter to a list of strings.\nYou can use join() function to join a list of strings based on a delimiter to give a single string.\nstring = \"This is a string.\"\nstring_list = string.split(' ') #delimiter is \u2018space\u2019 character or \u2018 \u2018\nprint(string_list) #output: ['This', 'is', 'a', 'string.']\nprint(' '.join(string_list)) #output: This is a string.",
    "difficulty": "Easy"
  },
  {
    "technology": "Python",
    "question": "11. What are iterators in Python?",
    "answer": "An iterator is an object.\nIt remembers its state i.e., where it is during iteration (see code below to see how)\n__iter__() method initializes an iterator.\nIt has a __next__() method which returns the next item in iteration and points to the next element. Upon reaching the end of iterable object __next__() must return StopIteration exception.\nIt is also self-iterable.\nIterators are objects with which we can iterate over iterable objects like lists, strings, etc.\nclass ArrayList:\n   def __init__(self, number_list):\n       self.numbers = number_list\n   def __iter__(self):\n       self.pos = 0\n       return self\n   def __next__(self):\n       if(self.pos < len(self.numbers)):\n           self.pos += 1\n           return self.numbers[self.pos - 1]\n       else:\n           raise StopIteration\narray_obj = ArrayList([1, 2, 3])\nit = iter(array_obj)\nprint(next(it)) #output: 2\nprint(next(it)) #output: 3\nprint(next(it))\n#Throws Exception\n#Traceback (most recent call last):\n#...\n#StopIteration",
    "difficulty": "Hard"
  },
  {
    "technology": "Python",
    "question": "12. How are arguments passed by value or by reference in python?",
    "answer": "Pass by value: Copy of the actual object is passed. Changing the value of the copy of the object will not change the value of the original object.\nPass by reference: Reference to the actual object is passed. Changing the value of the new object will change the value of the original object.\nIn Python, arguments are passed by reference, i.e., reference to the actual object is passed.\ndef appendNumber(arr):\n   arr.append(4)\narr = [1, 2, 3]\nprint(arr)  #Output: => [1, 2, 3]\nappendNumber(arr)\nprint(arr)  #Output: => [1, 2, 3, 4]",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "13. How Python is interpreted?",
    "answer": "Python as a language is not interpreted or compiled. Interpreted or compiled is the property of the implementation. Python is a bytecode(set of interpreter readable instructions) interpreted generally.\nSource code is a file with .py extension.\nPython compiles the source code to a set of instructions for a virtual machine. The Python interpreter is an implementation of that virtual machine. This intermediate format is called \u201cbytecode\u201d.\n.py source code is first compiled to give .pyc which is bytecode. This bytecode can be then interpreted by the official CPython or JIT(Just in Time compiler) compiled by PyPy.",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "14. What is the difference between .py and .pyc files?",
    "answer": ".py files contain the source code of a program. Whereas, .pyc file contains the bytecode of your program. We get bytecode after compilation of .py file (source code). .pyc files are not created for all the files that you run. It is only created for the files that you import.\nBefore executing a python program python interpreter checks for the compiled files. If the file is present, the virtual machine executes it. If not found, it checks for .py file. If found, compiles it to .pyc file and then python virtual machine executes it.\nHaving .pyc file saves you the compilation time.",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "15. What is the use of help() and dir() functions?",
    "answer": "help() function in Python is used to display the documentation of modules, classes, functions, keywords, etc. If no parameter is passed to the help() function, then an interactive help utility is launched on the console.\ndir() function tries to return a valid list of attributes and methods of the object it is called upon. It behaves differently with different objects, as it aims to produce the most relevant data, rather than the complete information.\nFor Modules/Library objects, it returns a list of all attributes, contained in that module.\nFor Class Objects, it returns a list of all valid attributes and base attributes.\nWith no arguments passed, it returns a list of attributes in the current scope.",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "help()",
    "answer": "help()",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "16. What is PYTHONPATH in Python?",
    "answer": "PYTHONPATH is an environment variable which you can set to add additional directories where Python will look for modules and packages. This is especially useful in maintaining Python libraries that you do not wish to install in the global default location.",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "17. What are generators in Python?",
    "answer": "Generators are functions that return an iterable collection of items, one at a time, in a set manner. Generators, in general, are used to create iterators with a different approach. They employ the use of yield keyword rather than return to return a generator object.\nLet's try and build a generator for fibonacci numbers -\n## generate fibonacci numbers upto n\ndef fib(n):\n   p, q = 0, 1\n   while(p < n):\n       yield p\n       p, q = q, p + q\nx = fib(10)    # create generator object \n \n## iterating using __next__(), for Python2, use next()\nx.__next__()    # output => 0\nx.__next__()    # output => 1\nx.__next__()    # output => 1\nx.__next__()    # output => 2\nx.__next__()    # output => 3\nx.__next__()    # output => 5\nx.__next__()    # output => 8\nx.__next__()    # error\n \n## iterating using loop\nfor i in fib(10):\n   print(i)    # output => 0 1 1 2 3 5 8",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "18. What is pickling and unpickling?",
    "answer": "Python library offers a feature - serialization out of the box. Serializing an object refers to transforming it into a format that can be stored, so as to be able to deserialize it, later on, to obtain the original object. Here, the pickle module comes into play.\nPickling:\nPickling is the name of the serialization process in Python. Any object in Python can be serialized into a byte stream and dumped as a file in the memory. The process of pickling is compact but pickle objects can be compressed further. Moreover, pickle keeps track of the objects it has serialized and the serialization is portable across versions.\nThe function used for the above process is pickle.dump().\nUnpickling:\nUnpickling is the complete inverse of pickling. It deserializes the byte stream to recreate the objects stored in the file and loads the object to memory.\nThe function used for the above process is pickle.load().\nNote: Python has another, more primitive, serialization module called marshall, which exists primarily to support .pyc files in Python and differs significantly from the pickle.",
    "difficulty": "Hard"
  },
  {
    "technology": "Python",
    "question": "serialization",
    "answer": "pickle",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "Note:",
    "answer": "Python has another, more primitive, serialization module called marshall, which exists primarily to support .pyc files in Python and differs significantly from the pickle.",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "marshall",
    "answer": "support .pyc files",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "support .pyc files",
    "answer": "differs significantly from the pickle",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "19. What is the difference between xrange and range in Python?",
    "answer": "xrange() and range() are quite similar in terms of functionality. They both generate a sequence of integers, with the only difference that range() returns a Python list, whereas, xrange() returns an xrange object.\nSo how does that make a difference? It sure does, because unlike range(), xrange() doesn't generate a static list, it creates the value on the go. This technique is commonly used with an object-type generator and has been termed as \"yielding\".\nYielding is crucial in applications where memory is a constraint. Creating a static list as in range() can lead to a Memory Error in such conditions, while, xrange() can handle it optimally by using just enough memory for the generator (significantly less in comparison).\nfor i in xrange(10):    # numbers from o to 9\n   print i       # output => 0 1 2 3 4 5 6 7 8 9\nfor i in xrange(1,10):    # numbers from 1 to 9\n   print i       # output => 1 2 3 4 5 6 7 8 9\nfor i in xrange(1, 10, 2):    # skip by two for next\n   print i       # output => 1 3 5 7 9\nNote: xrange has been deprecated as of Python 3.x. Now range does exactly the same as what xrange used to do in Python 2.x, since it was way better to use xrange() than the original range() function in Python 2.x.",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "xrange()",
    "answer": "range()",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "range()",
    "answer": "range()",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "Python list",
    "answer": "xrange()",
    "difficulty": "Easy"
  },
  {
    "technology": "Python",
    "question": "So how does that make a difference?",
    "answer": "generator",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "generator",
    "answer": "yielding",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "Yielding",
    "answer": "Memory Error",
    "difficulty": "Hard"
  },
  {
    "technology": "Python",
    "question": "Note",
    "answer": "xrange",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "xrange",
    "answer": "deprecated",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "deprecated",
    "answer": "Python 3.x",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "Python 3.x",
    "answer": "range",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "20. How do you copy an object in Python?",
    "answer": "In Python, the assignment statement (= operator) does not copy objects. Instead, it creates a binding between the existing object and the target variable name. To create copies of an object in Python, we need to use the copy module. Moreover, there are two ways of creating copies for the given object using the copy module -\nShallow Copy is a bit-wise copy of an object. The copied object created has an exact copy of the values in the original object. If either of the values is a reference to other objects, just the reference addresses for the same are copied.\nDeep Copy copies all values recursively from source to target object, i.e. it even duplicates the objects referenced by the source object.\nfrom copy import copy, deepcopy\nlist_1 = [1, 2, [3, 5], 4]\n## shallow copy\nlist_2 = copy(list_1) \nlist_2[3] = 7\nlist_2[2].append(6)\nlist_2    # output => [1, 2, [3, 5, 6], 7]\nlist_1    # output => [1, 2, [3, 5, 6], 4]\n## deep copy\nlist_3 = deepcopy(list_1)\nlist_3[3] = 8\nlist_3[2].append(7)\nlist_3    # output => [1, 2, [3, 5, 6, 7], 8]\nlist_1    # output => [1, 2, [3, 5, 6], 4]",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "copy",
    "answer": "copy",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "1. How will you check if a class is a child of another class?",
    "answer": "This is done by using a method called issubclass() provided by python. The method tells us if any class is a child of another class by returning true or false accordingly.\nFor example:\nclass Parent(object):\n   pass   \n \nclass Child(Parent):\n   pass   \n \n# Driver Code\nprint(issubclass(Child, Parent))    #True\nprint(issubclass(Parent, Child))    #False\nWe can check if an object is an instance of a class by making use of isinstance() method:\nobj1 = Child()\nobj2 = Parent()\nprint(isinstance(obj2, Child))    #False \nprint(isinstance(obj2, Parent))   #True",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "2. What is init method in python?",
    "answer": "The init method works similarly to the constructors in Java. The method is run as soon as an object is instantiated. It is useful for initializing any attributes or default behaviour of the object at the time of instantiation.\nFor example:\nclass InterviewbitEmployee:\n\n   # init method / constructor\n   def __init__(self, emp_name):\n       self.emp_name = emp_name\n\n   # introduce method\n   def introduce(self):\n       print('Hello, I am ', self.emp_name)\n\nemp = InterviewbitEmployee('Mr Employee')    # __init__ method is called here and initializes the object name with \"Mr Employee\"\nemp.introduce()",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "3. Why is finalize used?",
    "answer": "Finalize method is used for freeing up the unmanaged resources and clean up before the garbage collection method is invoked. This helps in performing memory management tasks.",
    "difficulty": "Hard"
  },
  {
    "technology": "Python",
    "question": "4. Differentiate between new and override modifiers.",
    "answer": "The new modifier is used to instruct the compiler to use the new implementation and not the base class function. The Override modifier is useful for overriding a base class function inside the child class.",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "5. How is an empty class created in python?",
    "answer": "An empty class does not have any members defined in it. It is created by using the pass keyword (the pass command does nothing in python). We can create objects for this class outside the class.\nFor example-\nclass EmptyClassDemo:\n   pass\nobj=EmptyClassDemo()\nobj.name=\"Interviewbit\"\nprint(\"Name created= \",obj.name)\nOutput:\nName created = Interviewbit",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "6. Is it possible to call parent class without its instance creation?",
    "answer": "Yes, it is possible if the base class is instantiated by other child classes or if the base class is a static method.",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "7. Are access specifiers used in python?",
    "answer": "Python does not make use of access specifiers specifically like private, public, protected, etc. However, it does not derive this from any variables. It has the concept of imitating the behaviour of variables by making use of a single (protected) or double underscore (private) as prefixed to the variable names. By default, the variables without prefixed underscores are public.\nExample:\n# to demonstrate access specifiers\nclass InterviewbitEmployee:\n   \n    # protected members\n    _emp_name = None\n    _age = None\n    \n    # private members\n    __branch = None\n    \n    # constructor\n    def __init__(self, emp_name, age, branch): \n         self._emp_name = emp_name\n         self._age = age\n         self.__branch = branch\n    \n    #public member\n    def display():\n        print(self._emp_name +\" \"+self._age+\" \"+self.__branch)",
    "difficulty": "Easy"
  },
  {
    "technology": "Python",
    "question": "8. How do you access parent members in the child class?",
    "answer": "Following are the ways using which you can access parent class members within a child class:\nBy using Parent class name: You can use the name of the parent class to access the attributes as shown in the example below:\nclass Parent(object):  \n   # Constructor\n   def __init__(self, name):\n       self.name = name    \n \nclass Child(Parent): \n   # Constructor\n   def __init__(self, name, age):\n       Parent.name = name\n       self.age = age\n \n   def display(self):\n       print(Parent.name, self.age)\n \n# Driver Code\nobj = Child(\"Interviewbit\", 6)\nobj.display()\nBy using super(): The parent class members can be accessed in child class using the super keyword.\nclass Parent(object):\n   # Constructor\n   def __init__(self, name):\n       self.name = name    \n \nclass Child(Parent):\n   # Constructor\n   def __init__(self, name, age):         \n       ''' \n       In Python 3.x, we can also use super().__init__(name)\n       ''' \n       super(Child, self).__init__(name)\n       self.age = age\n \n   def display(self):\n      # Note that Parent.name cant be used \n      # here since super() is used in the constructor\n      print(self.name, self.age)\n  \n# Driver Code\nobj = Child(\"Interviewbit\", 6)\nobj.display()",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "9. How does inheritance work in python? Explain it with an example.",
    "answer": "Inheritance gives the power to a class to access all attributes and methods of another class. It aids in code reusability and helps the developer to maintain applications without redundant code. The class inheriting from another class is a child class or also called a derived class. The class from which a child class derives the members are called parent class or superclass.\nPython supports different kinds of inheritance, they are:\nSingle Inheritance: Child class derives members of one parent class.\n# Parent class\nclass ParentClass:\n    def par_func(self):\n         print(\"I am parent class function\")\n\n# Child class\nclass ChildClass(ParentClass):\n    def child_func(self):\n         print(\"I am child class function\")\n\n# Driver code\nobj1 = ChildClass()\nobj1.par_func()\nobj1.child_func()\nMulti-level Inheritance: The members of the parent class, A, are inherited by child class which is then inherited by another child class, B. The features of the base class and the derived class are further inherited into the new derived class, C. Here, A is the grandfather class of class C.\n# Parent class\nclass A:\n   def __init__(self, a_name):\n       self.a_name = a_name\n   \n# Intermediate class\nclass B(A):\n   def __init__(self, b_name, a_name):\n       self.b_name = b_name\n       # invoke constructor of class A\n       A.__init__(self, a_name)\n\n# Child class\nclass C(B):\n   def __init__(self,c_name, b_name, a_name):\n       self.c_name = c_name\n       # invoke constructor of class B\n       B.__init__(self, b_name, a_name)\n       \n   def display_names(self):\n       print(\"A name : \", self.a_name)\n       print(\"B name : \", self.b_name)\n       print(\"C name : \", self.c_name)\n\n#  Driver code\nobj1 = C('child', 'intermediate', 'parent')\nprint(obj1.a_name)\nobj1.display_names()\n \nMultiple Inheritance: This is achieved when one child class derives members from more than one parent class. All features of parent classes are inherited in the child class.\n# Parent class1\nclass Parent1:\n   def parent1_func(self):\n       print(\"Hi I am first Parent\")\n\n# Parent class2\nclass Parent2:\n   def parent2_func(self):\n       print(\"Hi I am second Parent\")\n\n# Child class\nclass Child(Parent1, Parent2):\n   def child_func(self):\n       self.parent1_func()\n       self.parent2_func()\n\n# Driver's code\nobj1 = Child()\nobj1.child_func()\nHierarchical Inheritance: When a parent class is derived by more than one child class, it is called hierarchical inheritance.\n# Base class\nclass A:\n     def a_func(self):\n         print(\"I am from the parent class.\")\n\n# 1st Derived class\nclass B(A):\n     def b_func(self):\n         print(\"I am from the first child.\")\n\n# 2nd Derived class\nclass C(A):\n     def c_func(self):\n         print(\"I am from the second child.\")\n \n# Driver's code\nobj1 = B()\nobj2 = C()\nobj1.a_func()\nobj1.b_func()    #child 1 method\nobj2.a_func()\nobj2.c_func()    #child 2 method",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "10. How do you create a class in Python?",
    "answer": "To create a class in python, we use the keyword \u201cclass\u201d as shown in the example below:\nclass InterviewbitEmployee:\n   def __init__(self, emp_name):\n       self.emp_name = emp_name\nTo instantiate or create an object from the class created above, we do the following:\nemp_1=InterviewbitEmployee(\"Mr. Employee\")\nTo access the name attribute, we just call the attribute using the dot operator as shown below:\nprint(emp_1.emp_name)\n# Prints Mr. Employee\nTo create methods inside the class, we include the methods under the scope of the class as shown below:\nclass InterviewbitEmployee:\n   def __init__(self, emp_name):\n       self.emp_name = emp_name\n       \n   def introduce(self):\n       print(\"Hello I am \" + self.emp_name)\nThe self parameter in the init and introduce functions represent the reference to the current class instance which is used for accessing attributes and methods of that class. The self parameter has to be the first parameter of any method defined inside the class. The method of the class InterviewbitEmployee can be accessed as shown below:\nemp_1.introduce()\nThe overall program would look like this:\nclass InterviewbitEmployee:\n   def __init__(self, emp_name):\n       self.emp_name = emp_name\n       \n   def introduce(self):\n       print(\"Hello I am \" + self.emp_name)\n       \n# create an object of InterviewbitEmployee class\nemp_1 = InterviewbitEmployee(\"Mr Employee\")\nprint(emp_1.emp_name)    #print employee name\nemp_1.introduce()        #introduce the employee",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What do you mean by Asynchronous API?",
    "answer": "All APIs of Node.js library are aynchronous that is non-blocking. It essentially means a Node.js based server never waits for a API to return data. Server moves to next API after calling it and a notification mechanism of Events of Node.js helps server to get response from the previous API call.\n\n**Source:** _tutorialspoint.com_",
    "difficulty": "Hard"
  },
  {
    "technology": "Node.js",
    "question": "What are the benefits of using Node.js?",
    "answer": "Following are main benefits of using Node.js\n\n*   **Aynchronous and Event Driven** - All APIs of Node.js library are aynchronous that is non-blocking. It essentially means a Node.js based server never waits for a API to return data. Server moves to next API after calling it and a notification mechanism of Events of Node.js helps server to get response from the previous API call.\n*   **Very Fast** - Being built on Google Chrome's V8 JavaScript Engine, Node.js library is very fast in code execution.\n*   **Single Threaded but highly Scalable** - Node.js uses a single threaded model with event looping. Event mechanism helps server to respond in a non-bloking ways and makes server highly scalable as opposed to traditional servers which create limited threads to handle requests. Node.js uses a single threaded program and same program can services much larger number of requests than traditional server like Apache HTTP Server.\n*   **No Buffering** \\- Node.js applications never buffer any data. These applications simply output the data in chunks.\n\n**Source:** _tutorialspoint.com_",
    "difficulty": "Hard"
  },
  {
    "technology": "Node.js",
    "question": "Is Node a single threaded application?",
    "answer": "Yes! Node uses a single threaded model with event looping.\n\n**Source:** _tutorialspoint.com_",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "What is global installation of dependencies?",
    "answer": "Globally installed packages/dependencies are stored in **<user-directory>**/npm directory. Such dependencies can be used in CLI (Command Line Interface) function of any node.js but can not be imported using require() in Node application directly. To install a Node project globally use -g flag.\n\n**Source:** _tutorialspoint.com_",
    "difficulty": "Easy"
  },
  {
    "technology": "General Programming",
    "question": "What is an error-first callback?",
    "answer": "*Error-first callbacks* are used to pass errors and data. The first argument is always an error object that the programmer has to check if something went wrong. Additional arguments are used to pass data.\n\n```js\nfs.readFile(filePath, function(err, data) {\n  if (err) {\n    //handle the error\n  }\n  // use the data object\n});\n```\n\n**Source:** _tutorialspoint.com_",
    "difficulty": "Easy"
  },
  {
    "technology": "General Programming",
    "question": "What's the difference between operational and programmer errors?",
    "answer": "Operation errors are not bugs, but problems with the system, like _request timeout_ or _hardware failure_. On the other hand programmer errors are actual bugs.\n\n**Source:** _blog.risingstack.com_",
    "difficulty": "Easy"
  },
  {
    "technology": "Node.js",
    "question": "What is the difference between Nodejs, AJAX, and jQuery?",
    "answer": "The one common trait between Node.js, AJAX, and jQuery is that all of them are the advanced implementation of JavaScript. However, they serve completely different purposes.\n\n* Node.js \u2013It is a server-side platform for developing client-server applications. For example, if we\u2019ve to build an online employee management system, then we won\u2019t do it using client-side JS. But the Node.js can certainly do it as it runs on a server similar to Apache, Django not in a browser.\n\n* AJAX (aka Asynchronous Javascript and XML) \u2013It is a client-side scripting technique, primarily designed for rendering the contents of a page without refreshing it. There are a no. of large companies utilizing AJAX such as Facebook and Stack Overflow to display dynamic content.\n\n* jQuery \u2013It is a famous JavaScript module which complements AJAX, DOM traversal, looping and so on. This library provides many useful functions to help in JavaScript development. However, it\u2019s not mandatory to use it but as it also manages cross-browser compatibility, so can help you produce highly maintainable web applications.\n\n**Source:** _techbeamers.com_",
    "difficulty": "Hard"
  },
  {
    "technology": "Node.js",
    "question": "How to make Post request in Node.js?",
    "answer": "Following code snippet can be used to make a Post Request in Node.js.\n\n```js\nvar request = require('request');\nrequest.post('http://www.example.com/action', {\n  form: {\n    key: 'value'\n  }\n}, function(error, response, body) {\n  if (!error && response.statusCode == 200) {\n    console.log(body)\n  }\n});\n```\n\n**Source:** _techbeamers.com_",
    "difficulty": "Easy"
  },
  {
    "technology": "Node.js",
    "question": "What are the key features of Node.js?",
    "answer": "Let\u2019s look at some of the key features of Node.js.\n\n*   **Asynchronous event driven IO helps concurrent request handling \u2013** All APIs of Node.js are asynchronous. This feature means that if a Node receives a request for some Input/Output operation, it will execute that operation in the background and continue with the\u00a0processing of other requests. Thus it will not wait for the response from the previous requests.\n*   **Fast in Code execution \u2013** Node.js uses the V8 JavaScript Runtime engine, the one which is used by Google Chrome. Node has a wrapper over the JavaScript engine which makes the runtime engine much faster and hence processing of requests within Node.js also become faster.\n*   **Single Threaded but Highly Scalable \u2013** Node.js uses a single thread model for event looping. The response from these events may or may not reach the server immediately. However, this does not block other operations. Thus making Node.js highly scalable. Traditional servers create limited threads to handle requests while Node.js creates a single thread that provides service to much larger numbers of such requests.\n*   **Node.js library uses JavaScript \u2013** This is another important aspect of Node.js from the developer\u2019s point of view. The majority of developers are already well-versed in JavaScript. Hence, development in Node.js becomes easier for a developer who knows JavaScript.\n*   **There is an Active and vibrant community for the Node.js framework \u2013** The active community always keeps the framework updated with the latest trends in the web development.\n*   **No Buffering \u2013** Node.js applications never buffer any data. They simply output the data in chunks.\n\n**Source:** _techbeamers.com_",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "What is control flow function?",
    "answer": "It is a generic piece of code which runs in between several asynchronous function calls is known as control flow function.\n\n**Source:** _lazyquestion.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What are Event Listeners?",
    "answer": "**Event Listeners** are similar to call back functions but are associated with some event. For example when a server listens to http request on a given port a event will be generated and to specify http server has received and will invoke corresponding event listener. Basically, Event listener's are also call backs for a corresponding event.\n\nNode.js has built in event's and built in event listeners. Node.js also provides functionality to create Custom events and Custom Event listeners.\n\n**Source:** _lazyquestion.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "Node.js",
    "question": "If Node.js is single threaded then how it handles concurrency?",
    "answer": "Node provides a single thread to programmers so that code can be written easily and without bottleneck. Node internally uses multiple POSIX threads for various I/O operations such as File, DNS, Network calls etc.\n\nWhen Node gets I/O request it creates or uses a thread to perform that I/O operation and once the operation is done, it pushes the result to the event queue. On each such event, event loop runs and checks the queue and if the execution stack of Node is empty then it adds the queue result to execution stack.\n\nThis is how Node manages concurrency.\n\n**Source:** _codeforgeek.com_",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "What is Callback Hell?",
    "answer": "The asynchronous function requires callbacks as a return parameter. When multiple asynchronous functions are chained together then callback hell situation comes up. \n\n**Source:** _codeforgeek.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "Node.js",
    "question": "Could we run an external process with Node.js?",
    "answer": "Yes. *Child process module* enables us to access operating system functionaries or other apps. Scalability is baked into Node and child processes are the key factors to scale our application. You can use child process to run system commands, read large files without blocking event loop,  decompose the application into various \u201cnodes\u201d (That\u2019s why it\u2019s called Node).\n\nChild process module has following three major ways to create child processes \u2013\n\n* spawn  - child_process.spawn launches a new process with a given command.\n* exec  - child_process.exec method runs a command in a shell/console and buffers the output.\n* fork - The child_process.fork method is a special case of the spawn() to create child processes.\n\n**Source:** _codeforgeek.com_",
    "difficulty": "Hard"
  },
  {
    "technology": "Node.js",
    "question": "List out the differences between AngularJS and NodeJS?",
    "answer": "AngularJS is a web application development framework. It\u2019s a JavaScript and it is different from other web app frameworks written in JavaScript like jQuery. NodeJS is a runtime environment used for building server-side applications while AngularJS is a JavaScript framework mainly useful in building/developing client-side part of applications which run inside a web browser.\n\n**Source:** _a4academics.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "Node.js",
    "question": "How you can monitor a file for modifications in Node.js ?",
    "answer": "We can take advantage of File System `watch()` function which watches the changes of the file.\n\n**Source:** _codingdefined.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "Node.js",
    "question": "What are the core modules of Node,js?",
    "answer": "* EventEmitter\n* Stream\n* FS\n* Net\n* Global Objects\n\n**Source:** _github.com/jimuyouyou_",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is V8?",
    "answer": "The V8 library provides Node.js with a JavaScript engine (a program that converts Javascript code into lower level or machine code that microprocessors can understand), which Node.js controls via the V8 C++ API. V8 is maintained by Google, for use in Chrome.\n\nThe Chrome V8 engine :\n\n* The V8 engine is written in C++ and used in Chrome and Nodejs.\n* It implements ECMAScript as specified in ECMA-262.\n* The V8 engine can run standalone we can embed it with our own C++ program.\n\n\n\n**Source:** _nodejs.org_",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "What is libuv?",
    "answer": "**libuv** is a C library that is used to abstract non-blocking I/O operations to a consistent interface across all supported platforms. It provides mechanisms to handle file system, DNS, network, child processes, pipes, signal handling, polling and streaming. It also includes a thread pool for offloading work for some things that can't be done asynchronously at the operating system level.\n\n**Source:** _nodejs.org_",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is the difference between returning a callback and just calling a callback?",
    "answer": "```js\nreturn callback();\n//some more lines of code; -  won't be executed\n\ncallback();\n//some more lines of code; - will be executed\n```\n\nOf course returning will help the context calling async function get the value returned by callback.\n```js\nfunction do2(callback) {\n    log.trace('Execute function: do2');\n    return callback('do2 callback param');\n}\n\nvar do2Result = do2((param) => {\n    log.trace(`print ${param}`);\n    return `return from callback(${param})`; // we could use that return\n});\n\nlog.trace(`print ${do2Result}`);\n```\nOutput:\n```sh\nC:\\Work\\Node>node --use-strict main.js\n[0] Execute function: do2\n[0] print do2 callback param\n[0] print return from callback(do2 callback param)\n```\n\n**Source:** _stackoverflow.com_",
    "difficulty": "Hard"
  },
  {
    "technology": "Node.js",
    "question": "What is REPL in context of Node?",
    "answer": "**REPL** stands for Read Eval Print Loop and it represents a computer environment like a window console or unix/linux shell where a command is entered and system responds with an output. Node.js or Node comes bundled with a REPL environment. It performs the following desired tasks.\n\n*   **Read** \\- Reads user's input, parse the input into JavaScript data-structure and stores in memory.\n*   **Eval** \\- Takes and evaluates the data structure\n*   **Print** \\- Prints the result\n*   **Loop** \\- Loops the above command until user press ctrl-c twice.\n\n**Source:** _tutorialspoint.com_",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "What is Callback?",
    "answer": "**Callback** is an asynchronous equivalent for a function. A callback function is called at the completion of a given task. Node makes heavy use of callbacks. All APIs of Node are written is such a way that they supports callbacks. \n\nFor example, a function to read a file may start reading file and return the control to execution environment immediately so that next instruction can be executed. Once file I/O is complete, it will call the callback function while passing the callback function, the content of the file as parameter. So there is no blocking or wait for File I/O. \n\nThis makes Node.js highly scalable, as it can process high number of request without waiting for any function to return result.\n\n**Source:** _tutorialspoint.com_",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "What is a blocking code?",
    "answer": "If application has to wait for some I/O operation in order to complete its execution any further then the code responsible for waiting is known as blocking code.\n\n**Source:** _tutorialspoint.com_",
    "difficulty": "Easy"
  },
  {
    "technology": "Node.js",
    "question": "How Node prevents blocking code?",
    "answer": "By providing callback function. Callback function gets called whenever corresponding event triggered.\n\n\n**Source:** _tutorialspoint.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is Event Loop?",
    "answer": "Node.js is a single threaded application but it support concurrency via concept of event and callbacks. As every API of Node js are asynchronous and being a single thread, it uses async function calls to maintain the concurrency. Node uses observer pattern. Node thread keeps an event loop and whenever any task get completed, it fires the corresponding event which signals the event listener function to get executed.\n\n**Source:** _tutorialspoint.com_",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "What is Event Emmitter?",
    "answer": "All objects that emit events are members of EventEmitter class. These objects expose an `eventEmitter.on()` function that allows one or more functions to be attached to named events emitted by the object.\n\nWhen the EventEmitter object emits an event, all of the functions attached to that specific event are called synchronously. \n\n```js\nconst EventEmitter = require('events');\n\nclass MyEmitter extends EventEmitter {}\n\nconst myEmitter = new MyEmitter();\nmyEmitter.on('event', () => {\n  console.log('an event occurred!');\n});\nmyEmitter.emit('event');\n```\n\n**Source:** _tutorialspoint.com_",
    "difficulty": "Hard"
  },
  {
    "technology": "Node.js",
    "question": "What is purpose of Buffer class in Node?",
    "answer": "**Buffer** class is a global class and can be accessed in application without importing buffer module. A Buffer is a kind of an array of integers and corresponds to a raw memory allocation outside the V8 heap. A Buffer cannot be resized.\n\n**Source:** _tutorialspoint.com_",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "What is difference between synchronous and asynchronous method of fs module?",
    "answer": "Every method in `fs` module has synchronous as well as asynchronous form. Asynchronous methods takes a last parameter as completion function callback and first parameter of the callback function is error. It is preferred to use asynchronous method instead of synchronous method as former never block the program execution where the latter one does.\n\n**Source:** _tutorialspoint.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What are streams?",
    "answer": "Streams are objects that let you read data from a source or write data to a destination in continuous fashion. In Node.js, there are four types of streams.\n\n*   **Readable** \\- Stream which is used for read operation.\n*   **Writable** \\- Stream which is used for write operation.\n*   **Duplex** \\- Stream which can be used for both read and write operation.\n*   **Transform** \\- A type of duplex stream where the output is computed based on input.\n\n**Source:** _tutorialspoint.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "Node.js",
    "question": "What is Chaining in Node?",
    "answer": "**Chanining** is a mechanism to connect output of one stream to another stream and create a chain of multiple stream operations. It is normally used with piping operations.\n\n**Source:** _tutorialspoint.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is the purpose of setTimeout function?",
    "answer": "The `setTimeout(cb, ms)` global function is used to run callback `cb` after at least `ms` milliseconds. The actual delay depends on external factors like OS timer granularity and system load. A timer cannot span more than 24.8 days.\n\n**Source:** _tutorialspoint.com_",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "How can you avoid callback hells?",
    "answer": "To do so you have more options:\n\n*   **modularization**: break callbacks into independent functions\n*   use _Promises_\n*   use `yield` with _Generators_ and/or _Promises_\n\n**Source:** _tutorialspoint.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What's the event loop?",
    "answer": "**The event loop** is what allows Node.js to perform non-blocking I/O operations \u2014 despite the fact that JavaScript is single-threaded \u2014 by offloading operations to the system kernel whenever possible.\n\n<div class=\"text-center\">\n<img src=\"https://i.stack.imgur.com/Lbs9z.png\" class=\"img-fluid\">\n</div>\n\nEvery I/O requires a callback - once they are done they are pushed onto the event loop for execution. Since most modern kernels are multi-threaded, they can handle multiple operations executing in the background. When one of these operations completes, the kernel tells Node.js so that the appropriate callback may be added to the poll queue to eventually be executed.\n\n**Source:** _blog.risingstack.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "Node.js",
    "question": "How to avoid callback hell in Node.js?",
    "answer": "Node.js internally uses a single-threaded event loop to process queued events. But this approach may lead to blocking the entire process if there is a task running longer than expected.\n\nNode.js addresses this problem by incorporating callbacks also known as higher-order functions. So whenever a long-running process finishes its execution, it triggers the callback associated. \n\nsometimes, it could lead to complex and unreadable code. More the no. of callbacks, longer the chain of returning callbacks would be.\n\nThere are four solutions which can address the callback hell problem.\n\n**Make your program modular**\n\nIt proposes to split the logic into smaller modules. And then join them together from the main module to achieve the desired result.\n\n**Use async mechanism**\n\nIt is a widely used Node.js module which provides a sequential flow of execution.\n\nThe async module has <async.waterfall> API which passes data from one operation to other using the next callback.\n\nAnother async API <async.map> allows iterating over a list of items in parallel and calls back with another list of results.\n\nWith the async approach, the caller\u2019s callback gets called only once. The caller here is the main method using the async module.\n\n**Use promises mechanism**\n\nPromises give an alternate way to write async code. They either return the result of execution or the error/exception. Implementing promises requires the use of <.then()> function which waits for the promise object to return. It takes two optional arguments, both functions. Depending on the state of the promise only one of them will get called. The first function call proceeds if the promise gets fulfilled. However, if the promise gets rejected, then the second function will get called.\n\n**Use generators**\n\nGenerators are lightweight routines, they make a function wait and resume via the yield keyword. Generator functions uses a special syntax <function* ()>. They can also suspend and resume asynchronous operations using constructs such as promises or <thunks> and turn a synchronous code into asynchronous.\n\n**Source:** _techbeamers.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "Node.js",
    "question": "Explain how does Node.js work?",
    "answer": "A Node.js application creates a single thread on its invocation. Whenever Node.js receives a request, it first completes its processing before moving on to the next request.\n\nNode.js works asynchronously by using the event loop and callback functions, to handle multiple requests coming in parallel. An Event Loop is a functionality which handles and processes all your external events and just converts them to a callback function. It invokes all the event handlers at a proper time. Thus, lots of work is done on the back-end, while processing a single request, so that the new incoming request doesn\u2019t have to wait if the processing is not complete.\n\n<div class=\"text-center\"/>\n<img src=\"https://csharpcorner-mindcrackerinc.netdna-ssl.com/article/node-js-event-loop/Images/1.png\" class=\"img-fluid\" style=\"max-width: 800px\" />\n</div>\n\nWhile processing a request, Node.js attaches a callback function to it and moves it to the back-end. Now, whenever its response is ready, an event is called which triggers the associated callback function to send this response.\n\n**Source:** _techbeamers.com_",
    "difficulty": "Hard"
  },
  {
    "technology": "Node.js",
    "question": "When should we use Node.js?",
    "answer": "**Node.js** is well suited for applications that have a lot of concurrent connections and each _request only needs very few CPU cycles_, because the event loop (with all the other clients) is blocked during execution of a function. I believe Node.js is best suited for real-time applications: online games, collaboration tools, chat rooms, or anything where what one user (or robot? or sensor?) does with the application needs to be seen by other users immediately, without a page refresh.\n\n**Source:** _techbeamers.com_",
    "difficulty": "Hard"
  },
  {
    "technology": "Node.js",
    "question": "How does Node.js handle child threads?",
    "answer": "Node.js, in its essence, is a single thread process. It does not expose child threads and thread management methods to the developer. Technically, Node.js does spawn child threads for certain tasks such as asynchronous I/O, but these run behind the scenes and do not execute any application JavaScript code, nor block the main event loop.\n\nIf threading support is desired in a Node.js application, there are tools available to enable it, such as the ChildProcess module.\n\n**Source:** _lazyquestion.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "Node.js",
    "question": "What is the preferred method of resolving unhandled exceptions in Node.js?",
    "answer": "Unhandled exceptions in Node.js can be caught at the `Process` level by attaching a handler for `uncaughtException` event.\n\n```js\nprocess.on('uncaughtException', function(err) {\n  console.log('Caught exception: ' + err);\n});\n```\nHowever, `uncaughtException` is a very crude mechanism for exception handling and may be removed from Node.js in the future. An exception that has bubbled all the way up to the `Process` level means that your application, and Node.js may be in an undefined state, and the only sensible approach would be to restart everything.\n\nThe preferred way is to add another layer between your application and the Node.js process which is called the [domain](http://nodejs.org/api/domain.html).\n\nDomains provide a way to handle multiple different I/O operations as a single group. So, by having your application, or part of it, running in a separate domain, you can safely handle exceptions at the domain level, before they reach the `Process` level.\n\n**Source:** _lazyquestion.com_",
    "difficulty": "Hard"
  },
  {
    "technology": "Node.js",
    "question": "What is stream and what are types of streams available in Node.js?",
    "answer": "**Streams** are a collection of data that might not be available all at once and don\u2019t have to fit in memory. Streams provide chunks of data in a continuous manner. It is useful to read a large set of data and process it.\n\nThere is four fundamental type of streams:\n\n* Readable.\n* Writeable.\n* Duplex.\n* Transform.\n\nReadable streams as the name suggest used in reading a large chunk of data from a source. Writable streams are used in writing a large chunk of data to the destination.\n\nDuplex streams are both readable and writable ( Eg socket). Transform stream is the duplex stream which is used in modifying the data (eg zip creation).\n\n**Source:** _codeforgeek.com_",
    "difficulty": "Hard"
  },
  {
    "technology": "Node.js",
    "question": "What are the global objects of Node.js?",
    "answer": "These objects are available in all modules:\n* **process** - The process object is a global that provides information about, and control over, the current Node.js process. \n* **console** - Used to print to stdout and stderr. \n* **buffer** - Used to handle binary data. \n\n**Source:** _github.com/jimuyouyou_",
    "difficulty": "Medium"
  },
  {
    "technology": "Node.js",
    "question": "What is Piping in Node?",
    "answer": "**Piping** is a mechanism to connect output of one stream to another stream. It is normally used to get data from one stream and to pass output of that stream to another stream. There is no limit on piping operations.\n\n**Source:** _tutorialspoint.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "Name some of the events fired by streams.",
    "answer": "Each type of Stream is an **EventEmitter** instance and throws several events at different instance of times. For example, some of the commonly used events are:\n\n*   **data** \\- This event is fired when there is data is available to read.\n*   **end** \\- This event is fired when there is no more data to read.\n*   **error** \\- This event is fired when there is any error receiving or writing data.\n*   **finish** \\- This event is fired when all data has been flushed to underlying system\n\n**Source:** _tutorialspoint.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is the purpose of __filename variable?",
    "answer": "The `__filename` represents the filename of the code being executed. This is the resolved absolute path of this code file. For a main program this is not necessarily the same filename used in the command line. The value inside a module is the path to that module file.\n\n**Source:** _tutorialspoint.com_",
    "difficulty": "Easy"
  },
  {
    "technology": "Node.js",
    "question": "How can you listen on port 80 with Node?",
    "answer": "Run the application on any port above 1024, then put a reverse proxy like [nginx](http://nginx.org/) in front of it.\n\n**Source:** _blog.risingstack.com_",
    "difficulty": "Easy"
  },
  {
    "technology": "General Programming",
    "question": "What tools can be used to assure consistent code style?",
    "answer": "You have plenty of options to do so:\n\n*   [JSLint](http://jslint.com/) by Douglas Crockford\n*   [JSHint](http://jshint.com/)\n*   [ESLint](http://eslint.org/)\n*   [JSCS](http://jscs.info/)\n\nThese tools are really helpful when developing code in teams, to enforce a given style guide and to catch common errors using static analysis.\n\n**Source:** _blog.risingstack.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What's a stub? Name a use case.",
    "answer": "**Stubs** are functions/programs that simulate the behaviours of components/modules. Stubs provide canned answers to function calls made during test cases. Also, you can assert on with what these stubs were called.\n\nA use-case can be a file read, when you do not want to read an actual file:\n\n```js\nvar fs = require('fs');\n\nvar readFileStub = sinon.stub(fs, 'readFile', function(path, cb) {\n  return cb(null, 'filecontent');\n});\n\nexpect(readFileStub).to.be.called;\nreadFileStub.restore();\n```\n\n**Source:** _blog.risingstack.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "Node.js",
    "question": "Does Node.js support multi-core platforms? And is it capable of utilizing all the cores?",
    "answer": "Yes, Node.js would run on a multi-core system without any issue. But it is by default a single-threaded application, so it can\u2019t completely utilize the multi-core system.\n\nHowever, Node.js can facilitate deployment on multi-core systems where it does use the additional hardware. It packages with a Cluster module which is capable of starting multiple Node.js worker processes that will share the same port.\n\n**Source:** _techbeamers.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "Node.js",
    "question": "Is Node.js entirely based on a single-thread?",
    "answer": "Yes, it\u2019s true that Node.js processes all requests on a single thread. But it\u2019s just a part of the theory behind Node.js design. In fact, more than the single thread mechanism, it makes use of events and callbacks to handle a large no. of requests asynchronously.\n\nMoreover, Node.js has an optimized design which utilizes both JavaScript and C++ to guarantee maximum performance. JavaScript executes at the server-side by Google Chrome v8 engine. And the C++ lib UV library takes care of the non-sequential I/O via background workers.\n\nTo explain it practically, let\u2019s assume there are 100s of requests lined up in Node.js queue. As per design, the main thread of Node.js event loop will receive all of them and forwards to background workers for execution. Once the workers finish processing requests, the registered callbacks get notified on event loop thread to pass the result back to the user.\n\n**Source:** _techbeamers.com_",
    "difficulty": "Hard"
  },
  {
    "technology": "Node.js",
    "question": "Is Node.js entirely based on a single-thread?",
    "answer": "Yes, it\u2019s true that Node.js processes all requests on a single thread. But it\u2019s just a part of the theory behind Node.js design. In fact, more than the single thread mechanism, it makes use of events and callbacks to handle a large no. of requests asynchronously.\n\nMoreover, Node.js has an optimized design which utilizes both JavaScript and C++ to guarantee maximum performance. JavaScript executes at the server-side by Google Chrome v8 engine. And the C++ lib UV library takes care of the non-sequential I/O via background workers.\n\nTo explain it practically, let\u2019s assume there are 100s of requests lined up in Node.js queue. As per design, the main thread of Node.js event loop will receive all of them and forwards to background workers for execution. Once the workers finish processing requests, the registered callbacks get notified on event loop thread to pass the result back to the user.\n\n**Source:** _techbeamers.com_",
    "difficulty": "Hard"
  },
  {
    "technology": "Node.js",
    "question": "When to not use Node.js?",
    "answer": "We can use Node.js for a variety of applications. But it is a single threaded framework, so we should not use it for cases where the application requires long processing time. If the server is doing some calculation, it won\u2019t be able to process any other requests. Hence, Node.js is best when processing needs less dedicated CPU time.\n\n**Source:** _techbeamers.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "Why to use Buffers instead of binary strings to handle binary data ?",
    "answer": "Pure JavaScript does not able to handle straight binary data very well. Since Node.js servers have to deal with TCP streams for reading and writing of data, binary strings will become problematic to work with as it is very slow and has a tendency to break. That's why it is always advisable to use Buffers instead of binary strings to handle binary data.\n\n**Source:** _codingdefined.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "Node.js",
    "question": "How to use Buffer in Node.js?",
    "answer": "Buffer is used to process binary data, such as pictures, mp3, database files, etc. Buffer supports a variety of encoding and decoding, binary string conversion.\n\n**Source:** _github.com/jimuyouyou_",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "When should I use EventEmitter?",
    "answer": "Whenever it makes sense for code to *subscribe* to something rather than get a callback from something. The typical use case would be that there's multiple blocks of code in your application that may need to do something when an event happens.\n\n**Source:** _stackoverflow.com/_",
    "difficulty": "Medium"
  },
  {
    "technology": "Node.js",
    "question": "How do you debug Node.js applications?",
    "answer": "Node has its own built in GUI debugger as of version 6.3 (using Chrome's DevTools).\n\n```js\nnode --inspect server.js\n```\n\nSome other options for debugging are:\n- [Joyent's Guide](http://www.joyent.com/developers/node/debug)\n- [Debugger](https://nodejs.org/api/debugger.html)\n- [Node Inspector](https://github.com/node-inspector/node-inspector)\n- [Visual Studio Code](https://code.visualstudio.com/docs/runtimes/nodejs#_debugging-your-node-application)\n- [Cloud9](https://docs.c9.io/running_and_debugging_code.html)\n- [Brackets](https://github.com/adobe-research/theseus)\n\n**Source:** _stackoverflow.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "Node.js",
    "question": "Rewrite promise-based Node.js applications to Async/Await \u2606\u2606\u2606\n\n**Details:**\nRewrite this code to Async/Await:\n```js\nfunction asyncTask() {\n    return functionA()\n        .then((valueA) => functionB(valueA))\n        .then((valueB) => functionC(valueB))\n        .then((valueC) => functionD(valueC))\n        .catch((err) => logger.error(err))\n}\n```\n\n\n**Answer:**\n```js\nasync function asyncTask() {\n    try {\n        const valueA = await functionA()\n        const valueB = await functionB(valueA)\n        const valueC = await functionC(valueB)\n        return await functionD(valueC)\n    } catch (err) {\n        logger.error(err)\n    }\n}\n```\n\n**Source:** _stackoverflow.com_\n### Q16: What is the relationship between Node.js and V8?",
    "answer": "V8 is the Javascript engine inside of node.js that parses and runs your Javascript. The same V8 engine is used inside of Chrome to run javascript in the Chrome browser. Google open-sourced the V8 engine and the builders of node.js used it to run Javascript in node.js.\n\n**Source:** _stackoverflow.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "Node.js",
    "question": "What is N-API in Node.js?",
    "answer": "**N-API** (pronounced N as in the letter, followed by API) is an API for building native Addons. It is independent from the underlying JavaScript runtime (ex V8) and is maintained as part of Node.js itself. This API will be Application Binary Interface (ABI) stable across versions of Node.js. It is intended to insulate Addons from changes in the underlying JavaScript engine and allow modules compiled for one version to run on later versions of Node.js without recompilation.\n\n**Source:** _medium.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "Node.js",
    "question": "Explain the concept of Domain in Node.js",
    "answer": "Domains provide a way to handle multiple different IO operations as a single group. If any of the event emitters or callbacks registered to a domain emit an `error` event, or throw an error, then the domain object will be notified, rather than losing the context of the error in the `process.on('uncaughtException')` handler, or causing the program to exit immediately with an error code.\n\nDomain error handlers are not a substitute for closing down a process when an error occurs. The safest way to respond to a thrown error is to shut down the process. In a normal web server, the better approach is to send an error response to the request that triggered the error, while letting the others finish in their normal time, and stop listening for new requests in that worker.\n\n```js\nvar domain = require('domain');\nvar d = domain.create();\n// Domain emits 'error' when it's given an unhandled error\nd.on('error', function(err) {\n    console.log(err.stack);\n    // Our handler should deal with the error in an appropriate way\n});\n\n// Enter this domain\nd.run(function() {\n    // If an un-handled error originates from here, process.domain will handle it\n    console.log(process.domain === d); // true\n});\n\n// domain has now exited. Any errors in code past this point will not be caught.\n```\n\n**Source:** _nodejs.org_",
    "difficulty": "Hard"
  },
  {
    "technology": "Node.js",
    "question": "Are you familiar with differences between Node.js nodules and ES6 nodules?",
    "answer": "The modules used in Node.js follow a module specification known as the **CommonJS** specification. The recent updates to the JavaScript programming language, in the form of ES6, specify changes to the language, adding things like new class syntax and a module system. This module system is different from Node.js modules. To import ES6 module, we'd use the ES6 `import` functionality.\n\nNow ES6 modules are incompatible with Node.js modules. This has to do with the way modules are loaded differently between the two formats. If you use a compiler like Babel, you can mix and match module formats.\n\n**Source:** _stackoverflow.com_",
    "difficulty": "Easy"
  },
  {
    "technology": "Node.js",
    "question": "What are the use cases for the Node.js \"vm\" core module?",
    "answer": "It can be used to safely execute a piece of code contained in a string or file. The execution is performed in a separate environment that by default has no access to the environment of the program that created it. Moreover, you can specify execution timeout and context-specific error handling.\n\n**Source:** _quora.com_",
    "difficulty": "Hard"
  },
  {
    "technology": "Node.js",
    "question": "What is Piping in Node?",
    "answer": "**Piping** is a mechanism to connect output of one stream to another stream. It is normally used to get data from one stream and to pass output of that stream to another stream. There is no limit on piping operations.\n\n**Source:** _tutorialspoint.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "Name some of the events fired by streams.",
    "answer": "Each type of Stream is an **EventEmitter** instance and throws several events at different instance of times. For example, some of the commonly used events are:\n\n*   **data** \\- This event is fired when there is data is available to read.\n*   **end** \\- This event is fired when there is no more data to read.\n*   **error** \\- This event is fired when there is any error receiving or writing data.\n*   **finish** \\- This event is fired when all data has been flushed to underlying system\n\n**Source:** _tutorialspoint.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is the purpose of __filename variable?",
    "answer": "The `__filename` represents the filename of the code being executed. This is the resolved absolute path of this code file. For a main program this is not necessarily the same filename used in the command line. The value inside a module is the path to that module file.\n\n**Source:** _tutorialspoint.com_",
    "difficulty": "Easy"
  },
  {
    "technology": "Node.js",
    "question": "How can you listen on port 80 with Node?",
    "answer": "Run the application on any port above 1024, then put a reverse proxy like [nginx](http://nginx.org/) in front of it.\n\n**Source:** _blog.risingstack.com_",
    "difficulty": "Easy"
  },
  {
    "technology": "General Programming",
    "question": "What tools can be used to assure consistent code style?",
    "answer": "You have plenty of options to do so:\n\n*   [JSLint](http://jslint.com/) by Douglas Crockford\n*   [JSHint](http://jshint.com/)\n*   [ESLint](http://eslint.org/)\n*   [JSCS](http://jscs.info/)\n\nThese tools are really helpful when developing code in teams, to enforce a given style guide and to catch common errors using static analysis.\n\n**Source:** _blog.risingstack.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What's a stub? Name a use case.",
    "answer": "**Stubs** are functions/programs that simulate the behaviours of components/modules. Stubs provide canned answers to function calls made during test cases. Also, you can assert on with what these stubs were called.\n\nA use-case can be a file read, when you do not want to read an actual file:\n\n```js\nvar fs = require('fs');\n\nvar readFileStub = sinon.stub(fs, 'readFile', function(path, cb) {\n  return cb(null, 'filecontent');\n});\n\nexpect(readFileStub).to.be.called;\nreadFileStub.restore();\n```\n\n**Source:** _blog.risingstack.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "Node.js",
    "question": "Does Node.js support multi-core platforms? And is it capable of utilizing all the cores?",
    "answer": "Yes, Node.js would run on a multi-core system without any issue. But it is by default a single-threaded application, so it can\u2019t completely utilize the multi-core system.\n\nHowever, Node.js can facilitate deployment on multi-core systems where it does use the additional hardware. It packages with a Cluster module which is capable of starting multiple Node.js worker processes that will share the same port.\n\n**Source:** _techbeamers.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "Node.js",
    "question": "Is Node.js entirely based on a single-thread?",
    "answer": "Yes, it\u2019s true that Node.js processes all requests on a single thread. But it\u2019s just a part of the theory behind Node.js design. In fact, more than the single thread mechanism, it makes use of events and callbacks to handle a large no. of requests asynchronously.\n\nMoreover, Node.js has an optimized design which utilizes both JavaScript and C++ to guarantee maximum performance. JavaScript executes at the server-side by Google Chrome v8 engine. And the C++ lib UV library takes care of the non-sequential I/O via background workers.\n\nTo explain it practically, let\u2019s assume there are 100s of requests lined up in Node.js queue. As per design, the main thread of Node.js event loop will receive all of them and forwards to background workers for execution. Once the workers finish processing requests, the registered callbacks get notified on event loop thread to pass the result back to the user.\n\n**Source:** _techbeamers.com_",
    "difficulty": "Hard"
  },
  {
    "technology": "Node.js",
    "question": "Is Node.js entirely based on a single-thread?",
    "answer": "Yes, it\u2019s true that Node.js processes all requests on a single thread. But it\u2019s just a part of the theory behind Node.js design. In fact, more than the single thread mechanism, it makes use of events and callbacks to handle a large no. of requests asynchronously.\n\nMoreover, Node.js has an optimized design which utilizes both JavaScript and C++ to guarantee maximum performance. JavaScript executes at the server-side by Google Chrome v8 engine. And the C++ lib UV library takes care of the non-sequential I/O via background workers.\n\nTo explain it practically, let\u2019s assume there are 100s of requests lined up in Node.js queue. As per design, the main thread of Node.js event loop will receive all of them and forwards to background workers for execution. Once the workers finish processing requests, the registered callbacks get notified on event loop thread to pass the result back to the user.\n\n**Source:** _techbeamers.com_",
    "difficulty": "Hard"
  },
  {
    "technology": "Node.js",
    "question": "When to not use Node.js?",
    "answer": "We can use Node.js for a variety of applications. But it is a single threaded framework, so we should not use it for cases where the application requires long processing time. If the server is doing some calculation, it won\u2019t be able to process any other requests. Hence, Node.js is best when processing needs less dedicated CPU time.\n\n**Source:** _techbeamers.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "Why to use Buffers instead of binary strings to handle binary data ?",
    "answer": "Pure JavaScript does not able to handle straight binary data very well. Since Node.js servers have to deal with TCP streams for reading and writing of data, binary strings will become problematic to work with as it is very slow and has a tendency to break. That's why it is always advisable to use Buffers instead of binary strings to handle binary data.\n\n**Source:** _codingdefined.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "Node.js",
    "question": "How to gracefully Shutdown Node.js Server?",
    "answer": "We can gracefully shutdown Node.js server by using the generic signal called SIGTERM or SIGINT which is used for program termination. We need to call SIGTERM or SIGINT which will terminate the program and clean up the resources utilized by the program.\n\n**Source:** _codingdefined.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "Node.js",
    "question": "What are the timing features of Node.js?",
    "answer": "The Timers module in Node.js contains functions that execute code after a set period of time. \n\n* **setTimeout/clearTimeout** - can be used to schedule code execution after a designated amount of milliseconds\n* **setInterval/clearInterval** - can be used to execute a block of code multiple times \n* **setImmediate/clearImmediate** - will execute code at the end of the current event loop cycle\n* **process.nextTick** - used to schedule a callback function to be invoked in the next iteration of the Event Loop\n\n```js\nfunction cb(){\n  console.log('Processed in next iteration');\n}\nprocess.nextTick(cb);\nconsole.log('Processed in the first iteration');\n```\n\nOutput:\n\n```js\nProcessed in the first iteration\nProcessed in next iteration\n```\n\n**Source:** _github.com/jimuyouyou_",
    "difficulty": "Hard"
  },
  {
    "technology": "Node.js",
    "question": "Explain usage of NODE_ENV",
    "answer": "Node encourages the convention of using a variable called NODE_ENV to flag whether we\u2019re in production right now. This determination allows components to provide better diagnostics during development, for example by disabling caching or emitting verbose log statements. Setting NODE_ENV to production makes your application 3 times faster.\n\n```sh\n// Setting environment variables in bash before starting the node process\n$ NODE_ENV=development\n$ node\n\n// Reading the environment variable using code\nif (process.env.NODE_ENV === \u201cproduction\u201d)\n    useCaching = true;\n```\n\n**Source:** _github.com/i0natan/nodebestpractices_",
    "difficulty": "Medium"
  },
  {
    "technology": "Node.js",
    "question": "What is LTS releases of Node.js why should you care?",
    "answer": "An **LTS(Long Term Support)** version of Node.js receives all the critical bug fixes, security updates and performance improvements. \n\nLTS versions of Node.js are supported for at least 18 months and are indicated by even version numbers (e.g. 4, 6, 8). They're best for production since the LTS release line is focussed on stability and security, whereas the *Current* release line has a shorter lifespan and more frequent updates to the code. Changes to LTS versions are limited to bug fixes for stability, security updates, possible npm updates, documentation updates and certain performance improvements that can be demonstrated to not break existing applications.\n\n**Source:** _github.com/i0natan/nodebestpractices_",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "Provide some example of config file separation for dev and prod environments",
    "answer": "A perfect and flawless configuration setup should ensure:\n* keys can be read from file AND from environment variable\n* secrets are kept outside committed code\n* config is hierarchical for easier findability\n\nConsider the following config file:\n\n```js\nvar config = {\n  production: {\n    mongo : {\n      billing: '****'\n    }\n  },\n  default: {\n    mongo : {\n      billing: '****'\n    }\n  }\n}\n\nexports.get = function get(env) {\n  return config[env] || config.default;\n}\n```\nAnd it's usage:\n```js\nconst config = require('./config/config.js').get(process.env.NODE_ENV);\nconst dbconn = mongoose.createConnection(config.mongo.billing);\n```\n\n**Source:** _github.com/i0natan/nodebestpractices_",
    "difficulty": "Hard"
  },
  {
    "technology": "Node.js",
    "question": "How would you handle errors for async code in Node.js?",
    "answer": "Handling async errors in callback style (error-first approach) is probably the fastest way to hell (a.k.a the pyramid of doom). It's better to use a reputable promise library or async-await instead which enables a much more compact and familiar code syntax like try-catch.\n\nConsider promises to catch errors:\n```js\ndoWork()\n .then(doWork)\n .then(doOtherWork)\n .then((result) => doWork)\n .catch((error) => {throw error;})\n .then(verify);\n```\nor using async/await:\n```js\nasync function check(req, res) {\n    try {\n        const a = await someOtherFunction();\n        const b = await somethingElseFunction();\n        res.send(\"result\")\n    } catch (error) {\n        res.send(error.stack);\n    }\n}\n```\n\n**Source:** _github.com/i0natan/nodebestpractices_",
    "difficulty": "Hard"
  },
  {
    "technology": "Node.js",
    "question": "What's the difference between dependencies, devDependencies and peerDependencies in npm package.json file?",
    "answer": "* **dependencies** - Dependencies that your project needs to run, like a library that provides functions that you call from your code. They are installed transitively (if A depends on B depends on C, npm install on A will install B and C).\n\n* **devDependencies** - Dependencies you only need during development or releasing, like compilers that take your code and compile it into javascript, test frameworks or documentation generators. They are not installed transitively (if A depends on B dev-depends on C, npm install on A will install B only).\n* **peerDependencies** - Dependencies that your project hooks into, or modifies, in the parent project, usually a plugin for some other library or tool. It is just intended to be a check, making sure that the parent project (project that will depend on your project) has a dependency on the project you hook into. So if you make a plugin C that adds functionality to library B, then someone making a project A will need to have a dependency on B if they have a dependency on C. They are not installed (unless npm < 3), they are only checked for.\n\n**Source:** _stackoverflow.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "Node.js",
    "question": "How do you convert an existing callback API to promises? \u2606\u2606\u2606\u2606\n\n**Details:**\nHow to convert this callback code to Promise? Provide some examples.\n```js\nfunction divisionAPI (number, divider, successCallback, errorCallback) {\n    if (divider == 0) {\n        return errorCallback( new Error(\"Division by zero\") )\n    }\n    successCallback( number / divider )\n}\n```\n\n**Answer:**\n```js\nfunction divisionAPI(number, divider) {\n    return new Promise(function(fulfilled, rejected) {\n        if (divider == 0) {\n            return rejected(new Error(\"Division by zero\"))\n        }\n        fulfilled(number / divider)\n    })\n}\n\n// Promise can be used with together async\\await in ES7 to make the program flow wait for a fullfiled result\nasync function foo() {\n    var result = await divisionAPI(1, 2); // awaits for a fulfilled result!\n    console.log(result);\n}\n\n// Another usage with the same code by using .then() method\ndivisionAPI(1, 2).then(function(result) {\n    console.log(result)\n})\n```\nNode.js 8.0.0 includes a new `util.promisify()` API that allows standard Node.js callback style APIs to be wrapped in a function that returns a Promise. \n\n```js\nconst fs = require('fs');\nconst util = require('util');\n\nconst readfile = util.promisify(fs.readFile);\n\nreadfile('/some/file')\n    .then((data) => {\n        /** ... **/ \n     })\n    .catch((err) => {\n        /** ... **/ \n    });\n```\n\n\n**Source:** _stackoverflow.com_\n### Q20: What are async functions in Node? Provide some examples.",
    "answer": "With the release of Node.js 8, the long awaited async functions have landed in Node.js as well. ES 2017 introduced Asynchronous functions. Async functions are essentially a cleaner way to work with asynchronous code in JavaScript.\n\nAsync/Await is:\n* The newest way to write asynchronous code in JavaScript.\n* It is non blocking (just like promises and callbacks).\n* Async/Await was created to simplify the process of working with and writing chained promises.\n* Async functions return a Promise. If the function throws an error, the Promise will be rejected. If the function returns a value, the Promise will be resolved.\n\n**Async functions** can make use of the `await` expression. This will pause the async function and wait for the _Promise_ to resolve prior to moving on.",
    "difficulty": "Medium"
  },
  {
    "technology": "Node.js",
    "question": "Consider following code snippet \u2606\u2606\u2606\u2606\u2606\n\n**Details:**\nConsider following code snippet:\n\n```js\n{\n  console.time(\"loop\");\n  for (var i = 0; i < 1000000; i += 1) {\n    // Do nothing\n  }\n  console.timeEnd(\"loop\");\n}\n```\n\nThe time required to run this code in Google Chrome is considerably more than the time required to run it in Node.js Explain why this is so, even though both use the v8 JavaScript Engine.\n\n**Answer:**\nWithin a web browser such as Chrome, declaring the variable `i` outside of any function\u2019s scope makes it global and therefore binds it as a property of the `window` object. As a result, running this code in a web browser requires repeatedly resolving the property `i` within the heavily populated `window` namespace in each iteration of the `for` loop.\n\nIn Node.js, however, declaring any variable outside of any function\u2019s scope binds it only to the module\u2019s own scope (not the `window` object) which therefore makes it much easier and faster to resolve.\n\n**Source:** _toptal.com_\n### Q2: Can Node.js use other engines than V8?",
    "answer": "Yes. Microsoft Chakra is another JavaScript engine which can be used with Node.js. It\u2019s not officially declared yet.\n\n**Source:** _codeforgeek.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "Node.js",
    "question": "How would you scale Node application?",
    "answer": "We can scale Node application in following ways:\n\n* cloning using *Cluster* module.\n* decomposing the application into smaller services \u2013 i.e micro services.\n\n**Source:** _codeforgeek.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is the difference between process.nextTick() and setImmediate() ?",
    "answer": "The difference between `process.nextTick()` and `setImmediate()` is that `process.nextTick()` defers the execution of an action till the next pass around the event loop or it simply calls the callback function once the ongoing execution of the event loop is finished whereas `setImmediate()` executes a callback on the next cycle of the event loop and it gives back to the event loop for executing any I/O operations.\n\n**Source:** _codingdefined.com_",
    "difficulty": "Hard"
  },
  {
    "technology": "Node.js",
    "question": "How to solve \"Process out of Memory Exception\" in Node.js ?",
    "answer": "To solve the process out of memory exception in Node.js we need to increase the `max-old-space-size`. By default the max size of max-old-space-size is 512 mb which you can increase by the command:\n\n```sh\nnode --max-old-space-size=1024 file.js\n```\n\n**Source:** _codingdefined.com_",
    "difficulty": "Hard"
  },
  {
    "technology": "React",
    "question": "Explain what is Reactor Pattern in Node.js?",
    "answer": "**Reactor Pattern** is an idea of non-blocking I/O operations in Node.js. This pattern provides a handler(in case of Node.js, a *callback function*) that is associated with each I/O operation. When an I/O request is generated, it is submitted to a *demultiplexer*.\n\nThis *demultiplexer* is a notification interface that is used to handle concurrency in non-blocking I/O mode and collects every request in form of an event and queues each event in a queue. Thus, the demultiplexer provides the *Event Queue*. \n\nAt the same time, there is an Event Loop which iterates over the items in the Event Queue. Every event has a callback function associated with it, and that callback function is invoked when the Event Loop iterates.\n\n**Source:** _hackernoon.com_",
    "difficulty": "Hard"
  },
  {
    "technology": "Node.js",
    "question": "Explain some Error Handling approaches in Node.js you know about. Which one will you use?",
    "answer": "Error handling in an asynchronous language works in a unique way and presents many challenges, some unexpected. There are four main error handling patterns in node:\n\n* **Error return value** - doesn't work asynchronously\n\n```js\nvar validateObject = function (obj) {\n    if (typeof obj !== 'object') {\n        return new Error('Invalid object');\n    }\n};\n```\n* **Error throwing** - well-establish pattern, in which a function does its thing and if an error situation arises, it simply bails out throwing an error. Can leave you in an unstable state. It requires extra work to catch them. Also wrapping the async calls in try/catch won't help because the errors happen asynchronously. To fix this, we need *domains*. Domains provide an asynchronous try...catch.\n\n```js\nvar validateObject = function (obj) {\n    if (typeof obj !== 'object') {\n        throw new Error('Invalid object');\n    }\n};\n\ntry {\n    validateObject('123');\n}\ncatch (err) {\n    console.log('Thrown: ' + err.message);\n}\n```\n* **Error callback** - returning an error via a callback is the most common error handling pattern in Node.js. Handling error callbacks can become a mess (callback hell or the pyramid of doom).\n\n```js\nvar validateObject = function (obj, callback) {\n    if (typeof obj !== 'object') {\n        return callback(new Error('Invalid object'));\n    }\n    return callback();\n};\n\nvalidateObject('123', function (err) {\n    console.log('Callback: ' + err.message);\n});\n```\n* **Error emitting** - when emitting errors, the errors are broadcast to any interested subscribers and handled within the same process tick, in the order subscribed.\n\n```js\nvar Events = require('events');\nvar emitter = new Events.EventEmitter();\n\nvar validateObject = function (a) {\n    if (typeof a !== 'object') {\n        emitter.emit('error', new Error('Invalid object'));\n    }\n};\n\nemitter.on('error', function (err) {\n    console.log('Emitted: ' + err.message);\n});\n\nvalidateObject('123');\n```\n* **Promises** for async error handling\n\n```js\ndoWork()\n.then(doWork)\n.then(doError)\n.then(doWork)\n.catch(errorHandler)\n.then(verify);\n```\n* **Try...catch with async/await** - ES7 Async/await allows us as developers to write asynchronous JS code that look synchronous.\n\n```js\nasync function f() {\n\n  try {\n    let response = await fetch('http://no-such-url');\n  } catch(err) {\n    alert(err); // TypeError: failed to fetch\n  }\n}\n\nf();\n```\n\n* **Await-to-js lib** - async/await without try-catch blocks in Javascript\n\n```js\nimport to from 'await-to-js';\n\nasync function main(callback) {\n    const [err,quote] = await to(getQuote());\n\n    if(err || !quote) return callback(new Error('No Quote found');\n\n    callback(null,quote);\n\n}\n```\n\n**Source:** _gist.github.com_",
    "difficulty": "Hard"
  },
  {
    "technology": "Node.js",
    "question": "Why should you separate Express 'app' and 'server'?",
    "answer": "Keeping the API declaration separated from the network related configuration (port, protocol, etc) allows testing the API in-process, without performing network calls, with all the benefits that it brings to the table: fast testing execution and getting coverage metrics of the code. It also allows deploying the same API under flexible and different network conditions. Bonus: better separation of concerns and cleaner code.\n\nAPI declaration, should reside in app.js:\n\n```js\nvar app = express();\napp.use(bodyParser.json());\napp.use(\"/api/events\", events.API);\napp.use(\"/api/forms\", forms);\n```\nServer network declaration, should reside in /bin/www:\n\n```js\nvar app = require('../app');\nvar http = require('http');\n\n/**\n * Get port from environment and store in Express.\n */\n\nvar port = normalizePort(process.env.PORT || '3000');\napp.set('port', port);\n\n/**\n * Create HTTP server.\n */\n\nvar server = http.createServer(app);\n```\n\n**Source:** _github.com/i0natan/nodebestpractices_",
    "difficulty": "Hard"
  },
  {
    "technology": "Node.js",
    "question": "Rewrite the code sample without try/catch block \u2606\u2606\u2606\u2606\u2606\n\n**Details:**\nConsider the code:\n```js\nasync function check(req, res) {\n  try {\n    const a = await someOtherFunction();\n    const b = await somethingElseFunction();\n    res.send(\"result\")\n  } catch (error) {\n    res.send(error.stack);\n  }\n}\n```\nRewrite the code sample without try/catch block.\n\n**Answer:**\n```js\nasync function getData(){\n  const a = await someFunction().catch((error)=>console.log(error));\n  const b = await someOtherFunction().catch((error)=>console.log(error));\n  if (a && b) console.log(\"some result\")\n}\n```\nor if you wish to know which specific function caused error:\n```js\nasync function loginController() {\n  try {\n    const a = await loginService().\n    catch((error) => {\n      throw new CustomErrorHandler({\n        code: 101,\n        message: \"a failed\",\n        error: error\n      })\n    });\n    const b = await someUtil().\n    catch((error) => {\n      throw new CustomErrorHandler({\n        code: 102,\n        message: \"b failed\",\n        error: error\n      })\n    });\n    //someoeeoe\n    if (a && b) console.log(\"no one failed\")\n  } catch (error) {\n    if (!(error instanceof CustomErrorHandler)) {\n      console.log(\"gen error\", error)\n    }\n  }\n}\n```\n\n**Source:** _medium.com_\n### Q10: How many threads does Node actually create?",
    "answer": "**4 extra threads** are for use by V8. V8 uses these threads to perform various tasks, such as GC-related background tasks and optimizing compiler tasks.\n\n**Source:** _stackoverflow.com_",
    "difficulty": "Hard"
  },
  {
    "technology": "Node.js",
    "question": "Can Node.js work without V8?",
    "answer": "No. The current node.js binary cannot work without V8. It would have no Javascript engine and thus no ability to run code which would obviously render it non-functional. Node.js was not designed to run with any other Javascript engine and, in fact, all the native code bindings that come with node.js (such as the fs module or the net module) all rely on the specific V8 interface between C++ and Javascript.\n\nThere is an effort by Microsoft to allow the Chakra Javascript engine (that's the engine in Edge) to be used with node.js. Node.js can actually function to some extent without V8, through use of the node-chakracore project. There is ongoing work to reduce the tight coupling between V8 and Node, so that different JavaScript engines can be used in-place.\n\n**Source:** _stackoverflow.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "How the V8 engine works?",
    "answer": "**V8** is a JavaScript engine built at the google development center, in Germany. It is open source and written in C++. It is used for both client side (Google Chrome) and server side (node.js) JavaScript applications.\n\nV8 was first designed to increase the performance of the JavaScript execution inside web browsers. In order to obtain speed, V8 translates JavaScript code into more efficient machine code instead of using an interpreter. It compiles JavaScript code into machine code at execution by implementing a **JIT (Just-In-Time)** compiler like a lot of modern JavaScript engines such as SpiderMonkey or Rhino (Mozilla) are doing. The main difference with V8 is that it doesn\u2019t produce bytecode or any intermediate code.\n\n**Source:** _nodejs.org_",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is the purpose of using hidden classes in V8?",
    "answer": "JavaScript is a prototype-based language: there are no classes and objects are created by using a cloning process. JavaScript is also dynamically typed: types and type informations are not explicit and properties can be added to and deleted from objects on the fly. \n\nAccessing types and properties effectively makes a first big challenge for V8. Instead of using a dictionary-like data structure for storing object properties and doing a dynamic lookup to resolve the property location (like most JavaScript engines do), V8 creates** hidden classes**, at runtime, in order to have an internal representation of the type system and to improve the property access time.\n\n**Source:** _thibaultlaurens.github.io_",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "How V8 compiles JavaScript code?",
    "answer": "V8 has two compilers:\n\n* A **\u201cFull\u201d Compiler** that can generate good code for any JavaScript: good but not great JIT code. The goal of this compiler is to generate code quickly. To achieve its goal, it doesn\u2019t do any type analysis and doesn\u2019t know anything about types. Instead, it uses an Inline Caches or \u201cIC\u201d strategy to refine knowledge about types while the program runs. IC is very efficient and brings about 20 times speed improvment.\n\n* An **Optimizing Compiler** that produces great code for most of the JavaScript language. It comes later and re-compiles hot functions. The optimizing compiler takes types from the Inline Cache and make decisions about how to optimize the code better. However, some language features are not supported yet like try/catch blocks for instance. (The workaround for try/catch blocks is to write the \u201cnon stable\u201d code in a function and call the function in the try block)\n\nV8 also supports **de-optimization**: the optimizing compiler makes optimistic assumptions from the Inline Cache about the different types, de-optimization comes if these assumptions are invalid. For example, if a hidden class generated was not the one expected, V8 throws away the optimized code and comes back to the Full Compiler to get types again from the Inline Cache. This process is slow and should be avoided by trying to not change functions after they are optimized.\n\n**Source:** _thibaultlaurens.github.io_",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "How does libuv work under the hood?",
    "answer": "There is only one thread that executes JavaScript code and this is the thread where the event loop is running provided by **libuv**. The execution of callbacks (know that every userland code in a running Node.js application is a callback) is done by the event loop.\n\nLibuv by default creates a thread pool with four threads to offload asynchronous work to. Today\u2019s operating systems already provide asynchronous interfaces for many I/O tasks (e.g. AIO on Linux).\nWhenever possible, libuv will use those asynchronous interfaces, avoiding usage of the thread pool.\n\nThe event loop as a process is a set of phases with specific tasks that are processed in a round-robin manner. Each phase has a FIFO queue of callbacks to execute. While each phase is special in its own way, generally, when the event loop enters a given phase, it will perform any operations specific to that phase, then execute callbacks in that phase's queue until the queue has been exhausted or the maximum number of callbacks has executed. When the queue has been exhausted or the callback limit is reached, the event loop will move to the next phase, and so on.\n\n*   **timers**: this phase executes callbacks scheduled by `setTimeout()` and `setInterval()`.\n*   **pending callbacks**: executes I/O callbacks deferred to the next loop iteration.\n*   **idle, prepare**: only used internally.\n*   **poll**: retrieve new I/O events; execute I/O related callbacks (almost all with the exception of close callbacks, the ones scheduled by timers, and `setImmediate()`); node will block here when appropriate.\n*   **check**: `setImmediate()` callbacks are invoked here.\n*   **close callbacks**: some close callbacks, e.g. `socket.on('close', ...)`.\n\n<div class=\"text-center\"/>\n<img src=\"https://cdn-images-1.medium.com/max/800/1*ROxiavz7LeRpIfcgRDE7CA.png\" class=\"img-fluid\" style=\"max-width: 500px\" />\n</div>\n\n\n**Source:** _nodejs.org_",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "How does the cluster module work? What\u2019s the difference between it and a load balancer?",
    "answer": "The cluster module performs fork from your server (at that moment it is already an OS process), thus creating several slave processes. The cluster module supports two methods of distributing incoming connections.\n\n* The first one (and the default one on all platforms except Windows), is the round-robin approach, where the master process listens on a port, accepts new connections and distributes them across the workers in a round-robin fashion, with some built-in smarts to avoid overloading a worker process.\n\n* The second approach is where the master process creates the listen socket and sends it to interested workers. The workers then accept incoming connections directly.\n\nThe difference between a cluster module and a load balancer is that instead of distributing load between processes, the balancer distributes requests.\n\n**Source:** _imasters.com_",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "What is V8 Templates?",
    "answer": "A template is a blueprint for JavaScript functions and objects. You can use a template to wrap C++ functions and data structures within JavaScript objects. V8 has two types of templates: Function Templates and Object Templates.\n\n* **Function Template** is the blueprint for a single function. You create a JavaScript instance of template by calling the template\u2019s GetFunction method from within the context in which you wish to instantiate the JavaScript function. You can also associate a C++ callback with a function template which is called when the JavaScript function instance is invoked.\n\n* **Object Template** is used to configure objects created with function template as their constructor. You can associate two types of C++ callbacks with object templates: accessor callback and interceptor callback. Accessor callback is invoked when a specific object property is accessed by a script. Interceptor callback is invoked when any object property is accessed by a script. In a nutshell, you can wrap C++ objects\\structures within JavaScript objects.\n\n**Source:** _blog.ghaiklor.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "Node.js",
    "question": "Why do we need C++ Addons in Node.js?",
    "answer": "**Node.js Addons** are dynamically-linked shared objects, written in C++, that can be loaded into Node.js using the require() function, and used just as if they were an ordinary Node.js module. They are used primarily to provide an interface between JavaScript running in Node.js and C/C++ libraries.\n\nThere can be many reasons to write nodejs addons:\n1. You may want to access some native apis that is difficult using JS alone.\n2. You may want to integrate a third party library written in C/C++ and use it directly in Node.js.\n3. You may want to rewrite some of the modules in C++ for performance reasons.\n\nN-API (pronounced N as in the letter, followed by API) is an API for building native Addons.\n\n**Source:** _nodejs.org_",
    "difficulty": "Medium"
  },
  {
    "technology": "Node.js",
    "question": "Is it possible to use \"Class\" in Node.js?",
    "answer": "With ES6, you are able to make \"actual\" classes just like this:\n\n```js\nclass Animal {\n\n    constructor(name) {\n        this.name = name;\n    }\n\n    print() {\n        console.log('Name is :' + this.name);\n    }\n}\n```\nYou can export a class just like anything else:\n```js\nmodule.exports = class Animal {\n\n};\n```\nOnce imported into another module, then you can treat it as if it were defined in that file:\n```js\nvar Animal = require('./Animal');\n\nclass Cat extends Animal {\n    ...\n}\n```\n\n**Source:** _stackoverflow.com_",
    "difficulty": "Hard"
  },
  {
    "technology": "Node.js",
    "question": "Why Node.js devs tend to lean towards the Module Requiring vs Dependency Injection?",
    "answer": "Dependency injection is somewhat the opposite of normal _module design_. In normal module design, a module uses `require()` to load in all the other modules that it needs with the goal of making it simple for the caller to use your module. The caller can just require() in your module and your module will load all the other things it needs.\n\nWith dependency injection, rather than the module loading the things it needs, the caller is required to pass in things (usually objects) that the module needs. This can make certain types of testing easier and it can make mocking certain things for testing purposes easier.\n\nModules and dependency injection are orthogonal: if you need dependency injection for testability or extensibility then use it. If not, importing modules is fine. The great thing about JS is that you can modify just about anything to achieve what you want. This comes in handy when it comes to testing.\n\n**Source:** _reddit.com_",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What is React?",
    "answer": "React (aka React.js or ReactJS) is an open-source front-end JavaScript library that is used for building composable user interfaces, especially for single-page applications. It is used for handling view layer for web and mobile apps based on components in a declarative approach. React was created by Jordan Walke, a software engineer working for Facebook. React was first deployed on Facebook's News Feed in 2011 and on Instagram in 2012. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What is the history behind React evolution?",
    "answer": "The history of ReactJS started in 2010 with the creation of XHP. XHP is a PHP extension which improved the syntax of the language such that XML document fragments become valid PHP expressions and the primary purpose was used to create custom and reusable HTML elements. The main principle of this extension was to make front-end code easier to understand and to help avoid cross-site scripting attacks. The project was successful to prevent the malicious content submitted by the scrubbing user. But there was a different problem with XHP in which dynamic web applications require many roundtrips to the server, and XHP did not solve this problem. Also, the whole UI was re-rendered for small change in the application. Later, the initial prototype of React is created with the name FaxJ by Jordan inspired from XHP. Finally after sometime React has been introduced as a new library into JavaScript world. Note: JSX comes from the idea of XHP \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What are the major features of React?",
    "answer": "The major features of React are: - Uses JSX syntax, a syntax extension of JS that allows developers to write HTML in their JS code. - It uses Virtual DOM instead of Real DOM considering that Real DOM manipulations are expensive. - Supports server-side rendering which is useful for Search Engine Optimizations(SEO). - Follows Unidirectional or one-way data flow or data binding. - Uses reusable/composable UI components to develop the view. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is JSX?",
    "answer": "JSX stands for JavaScript XML and it is an XML-like syntax extension to ECMAScript. Basically it just provides the syntactic sugar for the React.createElement(type, props, ...children) function, giving us expressiveness of JavaScript along with HTML like template syntax. In the example below, the text inside <h1> tag is returned as JavaScript function to the render function. jsx harmony\nexport default function App() {\n  return <h1 className=\"greeting\">{\"Hello, this is a JSX Code!\"}</h1>;\n} If you don't use JSX syntax then the respective JavaScript code should be written as below, ```javascript\nimport { createElement } from \"react\"; export default function App() {\n  return createElement(\n    \"h1\",\n    { className: \"greeting\" },\n    \"Hello, this is a JSX Code!\"\n  );\n}\n``` See Class\n\njsx harmony\nclass App extends React.Component {\n  render() {\n    return <h1 className=\"greeting\">{\"Hello, this is a JSX Code!\"}</h1>;\n  }\n}  jsx harmony\nclass App extends React.Component {\n  render() {\n    return <h1 className=\"greeting\">{\"Hello, this is a JSX Code!\"}</h1>;\n  }\n}  Note: JSX is stricter than HTML \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What is the difference between Element and Component?",
    "answer": "An Element is a plain object describing what you want to appear on the screen in terms of the DOM nodes or other components. Elements can contain other Elements in their props. Creating a React element is cheap. Once an element is created, it cannot be mutated. The JavaScript representation(Without JSX) of React Element would be as follows: javascript\nconst element = React.createElement(\"div\", { id: \"login-btn\" }, \"Login\"); and this element can be simiplified using JSX html\n<div id=\"login-btn\">Login</div> The above React.createElement() function returns an object as below: javascript\n{\n  type: 'div',\n  props: {\n    children: 'Login',\n    id: 'login-btn'\n  }\n} Finally, this element renders to the DOM using ReactDOM.render(). Whereas a component can be declared in several different ways. It can be a class with a render() method or it can be defined as a function. In either case, it takes props as an input, and returns a JSX tree as the output: javascript\nconst Button = ({ handleLogin }) => (\n  <div id={\"login-btn\"} onClick={handleLogin}>\n    Login\n  </div>\n); Then JSX gets transpiled to a React.createElement() function tree: javascript\nconst Button = ({ handleLogin }) =>\n  React.createElement(\n    \"div\",\n    { id: \"login-btn\", onClick: handleLogin },\n    \"Login\"\n  ); \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How to create components in React?",
    "answer": "Components are the building blocks of creating User Interfaces(UI) in React. There are two possible ways to create a component. jsx harmony\n   function Greeting({ message }) {\n     return <h1>{`Hello, ${message}`}</h1>;\n   } jsx harmony\n   class Greeting extends React.Component {\n     render() {\n       return <h1>{`Hello, ${this.props.message}`}</h1>;\n     }\n   } \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "React",
    "question": "When to use a Class Component over a Function Component?",
    "answer": "After the addition of Hooks(i.e. React 16.8 onwards) it is always recommended to use Function components over Class components in React. Because you could use state, lifecycle methods and other features that were only available in class component present in function component too. But even there are two reasons to use Class components over Function components. So the summary to this question is as follows: Use Function Components: - If you don't need state or lifecycle methods, and your component is purely presentational. - For simplicity, readability, and modern code practices, especially with the use of React Hooks for state and side effects. Use Class Components: - If you need to manage state or use lifecycle methods. - In scenarios where backward compatibility or integration with older code is necessary. Note: You can also use reusable react error boundary third-party component without writing any class. i.e, No need to use class components for Error boundaries. The usage of Error boundaries from the above library is quite straight forward. Note when using react-error-boundary: ErrorBoundary is a client component. You can only pass props to it that are serializable or use it in files that have a \"use client\"; directive. ```jsx\n\"use client\"; import { ErrorBoundary } from \"react-error-boundary\"; Something went wrong\\}>\n  \n;\n``` \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What are Pure Components?",
    "answer": "Pure components are the components which render the same output for the same state and props. In function components, you can achieve these pure components through memoized React.memo() API wrapping around the component. This API prevents unnecessary re-renders by comparing the previous props and new props using shallow comparison. So it will be helpful for performance optimizations. But at the same time, it won't compare the previous state with the current state because function component itself prevents the unnecessary rendering by default when you set the same state again. The syntactic representation of memoized components looks like below, jsx\nconst MemoizedComponent = memo(SomeComponent, arePropsEqual?); Below is the example of how child component(i.e., EmployeeProfile) prevents re-renders for the same props passed by parent component(i.e.,EmployeeRegForm). ```jsx\nimport { memo, useState } from \"react\"; const EmployeeProfile = memo(function EmployeeProfile({ name, email }) {\n  return (\n    <>\n      Name:{name}\nEmail: {email}\n\n  );\n});\nexport default function EmployeeRegForm() {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  return (\n    <>\n      \n        Name:{\" \"}\n         setName(e.target.value)} />\n      \n\n        Email:{\" \"}\n         setEmail(e.target.value)} />\n      \n\n\n\n  );\n}\n``` Name:{name} Email: {email} In the above code, the email prop has not been passed to child component. So there won't be any re-renders for email prop change. In class components, the components extending React.PureComponent instead of React.Component become the pure components. When props or state changes, PureComponent will do a shallow comparison on both props and state by invoking shouldComponentUpdate() lifecycle method. Note: React.memo() is a higher-order component. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What is state in React?",
    "answer": "State of a component is an object that holds some information that may change over the lifetime of the component. The important point is whenever the state object changes, the component re-renders. It is always recommended to make our state as simple as possible and minimize the number of stateful components.  Let's take an example of User component with message state. Here, useState hook has been used to add state to the User component and it returns an array with current state and function to update it. ```jsx harmony\nimport { useState } from \"react\"; function User() {\n  const [message, setMessage] = useState(\"Welcome to React world\"); return (\n    \n{message}\n\n  );\n}\n``` Whenever React calls your component or access useState hook, it gives you a snapshot of the state for that particular render. See Class\n\n```jsx harmony\nimport React from \"react\";\nclass User extends React.Component {\n  constructor(props) {\n    super(props);\nthis.state = {\n  message: \"Welcome to React world\",\n};\n\n}\nrender() {\n    return (\n      \n{this.state.message}\n\n    );\n  }\n}\n```  ```jsx harmony\nimport React from \"react\";\nclass User extends React.Component {\n  constructor(props) {\n    super(props); } render() {\n    return (\n      \n{this.state.message}\n\n    );\n  }\n}\n```  State is similar to props, but it is private and fully controlled by the component ,i.e., it is not accessible to any other component till the owner component decides to pass it. \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "React",
    "question": "What are props in React?",
    "answer": "Props are inputs to components. They are single values or objects containing a set of values that are passed to components on creation similar to HTML-tag attributes. Here, the data is passed down from a parent component to a child component. The primary purpose of props in React is to provide following component functionality: For example, let us create an element with reactProp property: jsx harmony\n<Element reactProp={\"1\"} /> This reactProp (or whatever you came up with) attribute name then becomes a property attached to React's native props object which originally already exists on all components created using React library. jsx harmony\nprops.reactProp; For example, the usage of props in function component looks like below: ```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\"; const ChildComponent = (props) => {\n  return (\n    \n{props.name}\n{props.age}\n{props.gender}\n\n  );\n}; {props.name} {props.age} {props.gender} const ParentComponent = () => {\n  return (\n    \n\n\n\n  );\n};\n``` The properties from props object can be accessed directly using destructing feature from ES6 (ECMAScript 2015). It is also possible to fallback to default value when the prop value is not specified. The above child component can be simplified like below. jsx harmony\nconst ChildComponent = ({ name, age, gender = \"male\" }) => {\n  return (\n    <div>\n      <p>{name}</p>\n      <p>{age}</p>\n      <p>{gender}</p>\n    </div>\n  );\n}; Note: The default value won't be used if you pass null or 0 value. i.e, default value is only used if the prop value is missed or undefined value has been passed. {this.props.name} {this.props.age} {this.props.gender} \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is the difference between state and props?",
    "answer": "In React, both state and props are plain JavaScript objects and used to manage the data of a component, but they are used in different ways and have different characteristics. The state entity is managed by the component itself and can be updated using the setter(setState() for class components) function. Unlike props, state can be modified by the component and is used to manage the internal state of the component. i.e, state acts as a component's memory. Moreover, changes in the state trigger a re-render of the component and its children. The components cannot become reusable with the usage of state alone. On the otherhand, props (short for \"properties\") are passed to a component by its parent component and are read-only, meaning that they cannot be modified by the own component itself. i.e, props acts as arguments for a function. Also, props can be used to configure the behavior of a component and to pass data between components. The components become reusable with the usage of props. \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "React",
    "question": "What is the difference between HTML and React event handling?",
    "answer": "Below are some of the main differences between HTML and React event handling, html\n   <button onclick=\"activateLasers()\"></button> Whereas in React it follows camelCase convention: jsx harmony\n   <button onClick={activateLasers}> html\n   <a\n     href=\"#\"\n     onclick='console.log(\"The link was clicked.\"); return false;'\n   /> Whereas in React you must call preventDefault() explicitly: javascript\n   function handleClick(event) {\n     event.preventDefault();\n     console.log(\"The link was clicked.\");\n   } \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What are synthetic events in React?",
    "answer": "SyntheticEvent is a cross-browser wrapper around the browser's native event. Its API is same as the browser's native event, including stopPropagation() and preventDefault(), except the events work identically across all browsers. The native events can be accessed directly from synthetic events using nativeEvent attribute. Let's take an example of BookStore title search component with the ability to get all native event properties ```js\nfunction BookStore() {\n  function handleTitleChange(e) {\n    console.log(\"The new title is:\", e.target.value);\n    // 'e' represents synthetic event\n    const nativeEvent = e.nativeEvent;\n    console.log(nativeEvent);\n    e.stopPropagation();\n    e.preventDefault();\n  } return ;\n}\n``` \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "Node.js",
    "question": "What are inline conditional expressions?",
    "answer": "You can use either if statements or ternary expressions which are available from JS to conditionally render expressions. Apart from these approaches, you can also embed any expressions in JSX by wrapping them in curly braces and then followed by JS logical operator &&. jsx harmony\n<h1>Hello!</h1>;\n{\n  messages.length > 0 && !isLogin ? (\n    <h2>You have {messages.length} unread messages.</h2>\n  ) : (\n    <h2>You don't have unread messages.</h2>\n  );\n} \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is \"key\" prop and what is the benefit of using it in arrays of elements?",
    "answer": "A key is a special attribute you should include when mapping over arrays to render data. Key prop helps React identify which items have changed, are added, or are removed. Keys should be unique among its siblings. Most often we use ID from our data as key: jsx harmony\nconst todoItems = todos.map((todo) => <li key={todo.id}>{todo.text}</li>); When you don't have stable IDs for rendered items, you may use the item index as a key as a last resort: jsx harmony\nconst todoItems = todos.map((todo, index) => (\n  <li key={index}>{todo.text}</li>\n)); Note: \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is Virtual DOM?",
    "answer": "The Virtual DOM (VDOM) is an in-memory representation of Real DOM. The representation of a UI is kept in memory and synced with the \"real\" DOM. It's a step that happens between the render function being called and the displaying of elements on the screen. This entire process is called reconciliation. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "How Virtual DOM works?",
    "answer": "The Virtual DOM works in three simple steps.    \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "General Programming",
    "question": "What is the difference between Shadow DOM and Virtual DOM?",
    "answer": "The Shadow DOM is a browser technology designed primarily for scoping variables and CSS in web components. The Virtual DOM is a concept implemented by libraries in JavaScript on top of browser APIs. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What is React Fiber?",
    "answer": "Fiber is the new reconciliation engine or reimplementation of core algorithm in React v16. The goal of React Fiber is to increase its suitability for areas like animation, layout, gestures, ability to pause, abort, or reuse work and assign priority to different types of updates; and new concurrency primitives. \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "React",
    "question": "What is the main goal of React Fiber?",
    "answer": "The goal of React Fiber is to increase its suitability for areas like animation, layout, and gestures. Its headline feature is incremental rendering: the ability to split rendering work into chunks and spread it out over multiple frames. from documentation Its main goals are: \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "React",
    "question": "What are controlled components?",
    "answer": "A component that controls the input elements within the forms on subsequent user input is called Controlled Component, i.e, every state mutation will have an associated handler function. That means, the displayed data is always in sync with the state of the component. The controlled components will be implemented using the below steps, For example, the name input field updates the user name using handleChange event handler as below, ```javascript\nimport React, { useState } from \"react\"; function UserProfile() {\n  const [username, setUsername] = useState(\"\"); const handleChange = (e) => {\n    setUsername(e.target.value);\n  }; return (\n    \n\n        Name:\n        \n\n\n  );\n}\n``` \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What are uncontrolled components?",
    "answer": "The Uncontrolled Components are the ones that store their own state internally, and you query the DOM using a ref to find its current value when you need it. This is a bit more like traditional HTML. The uncontrolled components will be implemented using the below steps, In the below UserProfile component, the username input is accessed using ref. ```jsx harmony\nimport React, { useRef } from \"react\"; function UserProfile() {\n  const usernameRef = useRef(null); const handleSubmit = (event) => {\n    event.preventDefault();\n    console.log(\"The submitted username is: \" + usernameRef.current.value);\n  }; return (\n    \n\n        Username:\n        \n\nSubmit\n\n  );\n}\n``` In most cases, it's recommend to use controlled components to implement forms. In a controlled component, form data is handled by a React component. The alternative is uncontrolled components, where form data is handled by the DOM itself. See Class\n\n```jsx harmony\nclass UserProfile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.input = React.createRef();\n  }\nhandleSubmit(event) {\n    alert(\"A name was submitted: \" + this.input.current.value);\n    event.preventDefault();\n  }\nrender() {\n    return (\n      \n\n          {\"Name:\"}\n          \n\n\n\n    );\n  }\n}\n```  ```jsx harmony\nclass UserProfile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.input = React.createRef();\n  } handleSubmit(event) {\n    alert(\"A name was submitted: \" + this.input.current.value);\n    event.preventDefault();\n  } render() {\n    return (\n      \n\n          {\"Name:\"}\n          \n\n\n\n    );\n  }\n}\n```  \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "What is the difference between createElement and cloneElement?",
    "answer": "JSX elements will be transpiled to React.createElement() functions to create React elements which are going to be used for the object representation of UI. Whereas cloneElement is used to clone an element and pass it new props. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What is Lifting State Up in React?",
    "answer": "When several components need to share the same changing data then it is recommended to lift the shared state up to their closest common ancestor. That means if two child components share the same data from its parent, then move the state to parent instead of maintaining local state in both of the child components. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What are Higher-Order Components?",
    "answer": "A higher-order component (HOC) is a function that takes a component and returns a new component. Basically, it's a pattern that is derived from React's compositional nature. We call them pure components because they can accept any dynamically provided child component but they won't modify or copy any behavior from their input components. javascript\nconst EnhancedComponent = higherOrderComponent(WrappedComponent); HOC can be used for many use cases: \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is children prop?",
    "answer": "Children is a prop that allows you to pass components as data to other components, just like any other prop you use. Component tree put between component's opening and closing tag will be passed to that component as children prop. A simple usage of children prop looks as below, ```jsx harmony\nfunction MyDiv({ children }){\n    return (\n      \n        {children}\n      ;\n    );\n} export default function Greeting() {\n  return (\n    \n{\"Hello\"}\n{\"World\"}\n\n  );\n}\n``` See Class\n\n```jsx harmony\nconst MyDiv = React.createClass({\n  render: function () {\n    return {this.props.children};\n  },\n});\nReactDOM.render(\n  \n{\"Hello\"}\n{\"World\"}\n,\n  node\n);\n```  ```jsx harmony\nconst MyDiv = React.createClass({\n  render: function () {\n    return {this.props.children};\n  },\n}); ReactDOM.render(\n  \n{\"Hello\"}\n{\"World\"}\n,\n  node\n);\n```  Note: There are several methods available in the legacy React API to work with this prop. These include React.Children.map, React.Children.forEach, React.Children.count, React.Children.only, React.Children.toArray. \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "React",
    "question": "How to write comments in React?",
    "answer": "The comments in React/JSX are similar to JavaScript Multiline comments but are wrapped in curly braces. Single-line comments: jsx harmony\n<div>\n  {/* Single-line comments(In vanilla JavaScript, the single-line comments are represented by double slash(//)) */}\n  {`Welcome ${user}, let's play React`}\n</div> Multi-line comments: jsx harmony\n<div>\n  {/* Multi-line comments for more than\n   one line */}\n  {`Welcome ${user}, let's play React`}\n</div> \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "What is reconciliation?",
    "answer": "Reconciliation is the process through which React updates the Browser DOM and makes React work faster. React use a diffing algorithm so that component updates are predictable and faster. React would first calculate the difference between the real DOM and the copy of DOM (Virtual DOM) when there's an update of components.\nReact stores a copy of Browser DOM which is called Virtual DOM. When we make changes or add data, React creates a new Virtual DOM and compares it with the previous one. This comparison is done by Diffing Algorithm.\nNow React compares the Virtual DOM with Real DOM. It finds out the changed nodes and updates only the changed nodes in Real DOM leaving the rest nodes as it is. This process is called Reconciliation. \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "Does the lazy function support named exports?",
    "answer": "No, currently React.lazy function supports default exports only. If you would like to import modules which are named exports, you can create an intermediate module that reexports it as the default. It also ensures that tree shaking keeps working and don\u2019t pull unused components.\nLet's take a component file which exports multiple named components, javascript\n// MoreComponents.js\nexport const SomeComponent = /* ... */;\nexport const UnusedComponent = /* ... */; and reexport MoreComponents.js components in an intermediate file IntermediateComponent.js javascript\n// IntermediateComponent.js\nexport { SomeComponent as default } from \"./MoreComponents.js\"; Now you can import the module using lazy function as below, javascript\nimport React, { lazy } from \"react\";\nconst SomeComponent = lazy(() => import(\"./IntermediateComponent.js\")); \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "Why React uses className over class attribute?",
    "answer": "The attribute names written in JSX turned into keys of JavaScript objects and the JavaScript names cannot contain dashes or reserved words, it is recommended to use camelCase wherever applicable in JSX code. The attribute class is a keyword in JavaScript, and JSX is an extension of JavaScript. That's the principle reason why React uses className instead of class. Pass a string as the className prop. jsx harmony\nrender() {\n  return <span className=\"menu navigation-menu\">{'Menu'}</span>\n} \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What are fragments?",
    "answer": "It's a common pattern or practice in React for a component to return multiple elements. Fragments let you group a list of children without adding extra nodes to the DOM.\nYou need to use either <Fragment> or a shorter syntax having empty tag (<>). Below is the example of how to use fragment inside Story component. jsx harmony\nfunction Story({ title, description, date }) {\n  return (\n    <Fragment>\n      <h2>{title}</h2>\n      <p>{description}</p>\n      <p>{date}</p>\n    </Fragment>\n  );\n} It is also possible to render list of fragments inside a loop with the mandatory key attribute supplied. jsx harmony\nfunction StoryBook() {\n  return stories.map((story) => (\n    <Fragment key={story.id}>\n      <h2>{story.title}</h2>\n      <p>{story.description}</p>\n      <p>{story.date}</p>\n    </Fragment>\n  ));\n} Usually, you don't need to use <Fragment> until there is a need of key attribute. The usage of shorter syntax looks like below. jsx harmony\nfunction Story({ title, description, date }) {\n  return (\n    <>\n      <h2>{title}</h2>\n      <p>{description}</p>\n      <p>{date}</p>\n    \n  );\n} \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "Why fragments are better than container divs?",
    "answer": "Below are the list of reasons to prefer fragments over container DOM elements, \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What are portals in React?",
    "answer": "Portal is a recommended way to render children into a DOM node that exists outside the DOM hierarchy of the parent component. When using\nCSS transform in a component, its descendant elements should not use fixed positioning, otherwise the layout will blow up. javascript\nReactDOM.createPortal(child, container); The first argument is any render-able React child, such as an element, string, or fragment. The second argument is a DOM element. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What are stateless components?",
    "answer": "If the behaviour of a component is independent of its state then it can be a stateless component. You can use either a function or a class for creating stateless components. But unless you need to use a lifecycle hook in your components, you should go for function components. There are a lot of benefits if you decide to use function components here; they are easy to write, understand, and test, a little faster, and you can avoid the this keyword altogether. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What are stateful components?",
    "answer": "If the behaviour of a component is dependent on the state of the component then it can be termed as stateful component. These stateful components are either function components with hooks or class components. Let's take an example of function stateful component which update the state based on click event, ```javascript\nimport React, {useState} from 'react'; const App = (props) => {\nconst [count, setCount] = useState(0);\nhandleIncrement() {\n  setCount(count+1);\n} return (\n  <>\n    Increment\nCounter: {count}\n\n  )\n}\n``` See Class\n\nThe equivalent class stateful component with a state that gets initialized in the constructor.\n```jsx harmony\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\nhandleIncrement() {\n    setState({ count: this.state.count + 1 });\n  }\nrender() {\n    <>\n       this.handleIncrement}>Increment\nCount: {count}\n    ;\n  }\n}\n``` The equivalent class stateful component with a state that gets initialized in the constructor. ```jsx harmony\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  } handleIncrement() {\n    setState({ count: this.state.count + 1 });\n  } render() {\n    <>\n       this.handleIncrement}>Increment\nCount: {count}\n    ;\n  }\n}\n```  \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "React",
    "question": "How to apply validation on props in React?",
    "answer": "When the application is running in development mode, React will automatically check all props that we set on components to make sure they have correct type. If the type is incorrect, React will generate warning messages in the console. It's disabled in production mode due to performance impact. The mandatory props are defined with isRequired. The set of predefined prop types: We can define propTypes for User component as below: ```jsx harmony\nimport React from \"react\";\nimport PropTypes from \"prop-types\"; class User extends React.Component {\n  static propTypes = {\n    name: PropTypes.string.isRequired,\n    age: PropTypes.number.isRequired,\n  }; render() {\n    return (\n      <>\n        {Welcome, ${this.props.name}}\n{Age, ${this.props.age}}\n\n    );\n  }\n}\n```",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "{Age, ${this.props.age}}",
    "answer": "Note: In React v15.5 PropTypes were moved from React.PropTypes to prop-types library. The Equivalent Functional Component ```jsx harmony\nimport React from \"react\";\nimport PropTypes from \"prop-types\"; function User({ name, age }) {\n  return (\n    <>\n      {Welcome, ${name}}\n{Age, ${age}}\n\n  );\n}",
    "difficulty": "Easy"
  },
  {
    "technology": "General Programming",
    "question": "{Age, ${age}}",
    "answer": "User.propTypes = {\n  name: PropTypes.string.isRequired,\n  age: PropTypes.number.isRequired,\n};\n``` \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "React",
    "question": "What are the advantages of React?",
    "answer": "Below are the list of main advantages of React, \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "React",
    "question": "What are the limitations of React?",
    "answer": "Apart from the advantages, there are few limitations of React too, \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What are the recommended ways for static type checking?",
    "answer": "Normally we use PropTypes library (React.PropTypes moved to a prop-types package since React v15.5) for type checking in the React applications. For large code bases, it is recommended to use static type checkers such as Flow or TypeScript, that perform type checking at compile time and provide auto-completion features. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What is the use of react-dom package?",
    "answer": "The react-dom package provides DOM-specific methods that can be used at the top level of your app. Most of the components are not required to use this module. Some of the methods of this package are: \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What is ReactDOMServer?",
    "answer": "The ReactDOMServer object enables you to render components to static markup (typically used on node server). This object is mainly used for server-side rendering (SSR). The following methods can be used in both the server and browser environments: For example, you generally run a Node-based web server like Express, Hapi, or Koa, and you call renderToString to render your root component to a string, which you then send as response. ```javascript\n// using Express\nimport { renderToString } from \"react-dom/server\";\nimport MyPage from \"./MyPage\"; app.get(\"/\", (req, res) => {\n  res.write(\n    \"<!DOCTYPE html>My Page\"\n  );\n  res.write('');\n  res.write(renderToString());\n  res.write(\"\");\n  res.end();\n});\n``` \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How to use innerHTML in React?",
    "answer": "The dangerouslySetInnerHTML attribute is React's replacement for using innerHTML in the browser DOM. Just like innerHTML, it is risky to use this attribute considering cross-site scripting (XSS) attacks. You just need to pass a __html object as key and HTML text as value. In this example MyComponent uses dangerouslySetInnerHTML attribute for setting HTML markup: ```jsx harmony\nfunction createMarkup() {\n  return { __html: \"First \u00b7 Second\" };\n} function MyComponent() {\n  return ;\n}\n``` \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How to use styles in React?",
    "answer": "The style attribute accepts a JavaScript object with camelCased properties rather than a CSS string. This is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. ```jsx harmony\nconst divStyle = {\n  color: \"blue\",\n  backgroundImage: \"url(\" + imgUrl + \")\",\n}; function HelloWorldComponent() {\n  return Hello World!;\n}\n``` Style keys are camelCased in order to be consistent with accessing the properties on DOM nodes in JavaScript (e.g. node.style.backgroundImage). \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "React",
    "question": "How events are different in React?",
    "answer": "Handling events in React elements has some syntactic differences: \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is the impact of indexes as keys?",
    "answer": "Keys should be stable, predictable, and unique so that React can keep track of elements. In the below code snippet each element's key will be based on ordering, rather than tied to the data that is being represented. This limits the optimizations that React can do and creates confusing bugs in the application. jsx harmony\n{\n  todos.map((todo, index) => <Todo {...todo} key={index} />);\n} If you use element data for unique key, assuming todo.id is unique to this list and stable, React would be able to reorder elements without needing to reevaluate them as much. jsx harmony\n{\n  todos.map((todo) => <Todo {...todo} key={todo.id} />);\n} Note: If you don't specify key prop at all, React will use index as a key's value while iterating over an array of data. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How do you conditionally render components?",
    "answer": "In some cases you want to render different components depending on some state. JSX does not render false or undefined, so you can use conditional short-circuiting to render a given part of your component only if a certain condition is true. jsx harmony\nconst MyComponent = ({ name, address }) => (\n  <div>\n    <h2>{name}</h2>\n    {address && <p>{address}</p>}\n  </div>\n); If you need an if-else condition then use ternary operator. jsx harmony\nconst MyComponent = ({ name, address }) => (\n  <div>\n    <h2>{name}</h2>\n    {address ? <p>{address}</p> : <p>{\"Address is not available\"}</p>}\n  </div>\n); \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "General Programming",
    "question": "Why we need to be careful when spreading props on DOM elements?",
    "answer": "When we spread props we run into the risk of adding unknown HTML attributes, which is a bad practice. Instead we can use prop destructuring with ...rest operator, so it will add only required props. For example, ```jsx harmony\nconst ComponentA = () => (\n  \n); const ComponentB = ({ isDisplay, ...domProps }) => (\n  {\"ComponentB\"}\n);\n``` \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How do you memoize a component?",
    "answer": "There are memoize libraries available which can be used on function components. For example moize library can memoize the component in another component. ```jsx harmony\nimport moize from \"moize\";\nimport Component from \"./components/Component\"; // this module exports a non-memoized component const MemoizedFoo = moize.react(Component); const Consumer = () => {\n  \n    {\"I will memoize the following entry:\"}\n    \n;\n};\n``` Update: Since React v16.6.0, we have a React.memo. It provides a higher order component which memoizes component unless the props change. To use it, simply wrap the component using React.memo before you use it. js\nconst MemoComponent = React.memo(function MemoComponent(props) {\n  /* render using props */\n});\nOR;\nexport default React.memo(MyFunctionComponent); \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "How you implement Server Side Rendering or SSR?",
    "answer": "React is already equipped to handle rendering on Node servers. A special version of the DOM renderer is available, which follows the same pattern as on the client side. ```jsx harmony\nimport ReactDOMServer from \"react-dom/server\";\nimport App from \"./App\"; ReactDOMServer.renderToString();\n``` This method will output the regular HTML as a string, which can be then placed inside a page body as part of the server response. On the client side, React detects the pre-rendered content and seamlessly picks up where it left off. \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "React",
    "question": "How to enable production mode in React?",
    "answer": "You should use Webpack's DefinePlugin method to set NODE_ENV to production, by which it strip out things like propType validation and extra warnings. Apart from this, if you minify the code, for example, Uglify's dead-code elimination to strip out development only code and comments, it will drastically reduce the size of your bundle. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "Do Hooks replace render props and higher order components?",
    "answer": "Both render props and higher-order components render only a single child but in most of the cases Hooks are a simpler way to serve this by reducing nesting in your tree. \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "React",
    "question": "What is a switching component?",
    "answer": "A switching component is a component that renders one of many components. We need to use object to map prop values to components. For example, a switching component to display different pages based on page prop: ```jsx harmony\nimport HomePage from \"./HomePage\";\nimport AboutPage from \"./AboutPage\";\nimport ServicesPage from \"./ServicesPage\";\nimport ContactPage from \"./ContactPage\"; const PAGES = {\n  home: HomePage,\n  about: AboutPage,\n  services: ServicesPage,\n  contact: ContactPage,\n}; const Page = (props) => {\n  const Handler = PAGES[props.page] || ContactPage; return ;\n}; // The keys of the PAGES object can be used in the prop types to catch dev-time errors.\nPage.propTypes = {\n  page: PropTypes.oneOf(Object.keys(PAGES)).isRequired,\n};\n``` \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "React",
    "question": "What are React Mixins?",
    "answer": "Mixins are a way to totally separate components to have a common functionality. Mixins should not be used and can be replaced with higher-order components or decorators. One of the most commonly used mixins is PureRenderMixin. You might be using it in some components to prevent unnecessary re-renders when the props and state are shallowly equal to the previous props and state: ```javascript\nconst PureRenderMixin = require(\"react-addons-pure-render-mixin\"); const Button = React.createClass({\n  mixins: [PureRenderMixin],\n  // ...\n});\n``` \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What are the Pointer Events supported in React?",
    "answer": "Pointer Events provide a unified way of handling all input events. In the old days we had a mouse and respective event listeners to handle them but nowadays we have many devices which don't correlate to having a mouse, like phones with touch surface or pens. We need to remember that these events will only work in browsers that support the Pointer Events specification. The following event types are now available in React DOM: \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "Why should component names start with capital letter?",
    "answer": "If you are rendering your component using JSX, the name of that component has to begin with a capital letter otherwise React will throw an error as an unrecognized tag. This convention is because only HTML elements and SVG tags can begin with a lowercase letter. jsx harmony\nfunction SomeComponent {\n  // Code goes here\n} You can define function component whose name starts with lowercase letter, but when it's imported it should have a capital letter. Here lowercase is fine: ```jsx harmony\nfunction myComponent {\n  render() {\n    return ;\n  }\n} export default myComponent;\n``` While when imported in another file it should start with capital letter: jsx harmony\nimport MyComponent from \"./myComponent\"; \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "Are custom DOM attributes supported in React v16?",
    "answer": "Yes. In the past, React used to ignore unknown DOM attributes. If you wrote JSX with an attribute that React doesn't recognize, React would just skip it. For example, let's take a look at the below attribute: jsx harmony\n<div mycustomattribute={\"something\"} /> Would render an empty div to the DOM with React v15: html\n<div /> In React v16 any unknown attributes will end up in the DOM: html\n<div mycustomattribute=\"something\" /> This is useful for supplying browser-specific non-standard attributes, trying new DOM APIs, and integrating with opinionated third-party libraries. \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "General Programming",
    "question": "How to loop inside JSX?",
    "answer": "You can simply use Array.prototype.map with ES6 arrow function syntax. For example, the items array of objects is mapped into an array of components: jsx harmony\n<tbody>\n  {items.map((item) => (\n    <SomeComponent key={item.id} name={item.name} />\n  ))}\n</tbody> But you can't iterate using for loop: jsx harmony\n<tbody>\n  for (let i = 0; i < items.length; i++) {\n    <SomeComponent key={items[i].id} name={items[i].name} />\n  }\n</tbody> This is because JSX tags are transpiled into function calls, and you can't use statements inside expressions. This may change thanks to do expressions which are stage 1 proposal. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "How do you access props in attribute quotes?",
    "answer": "React (or JSX) doesn't support variable interpolation inside an attribute value. The below representation won't work: jsx harmony\n<img className=\"image\" src=\"images/{this.props.image}\" /> But you can put any JS expression inside curly braces as the entire attribute value. So the below expression works: jsx harmony\n<img className=\"image\" src={\"images/\" + this.props.image} /> Using template strings will also work: jsx harmony\n<img className=\"image\" src={`images/${this.props.image}`} /> \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "React",
    "question": "What is React proptype array with shape?",
    "answer": "If you want to pass an array of objects to a component with a particular shape then use React.PropTypes.shape() as an argument to React.PropTypes.arrayOf(). javascript\nReactComponent.propTypes = {\n  arrayWithShape: React.PropTypes.arrayOf(\n    React.PropTypes.shape({\n      color: React.PropTypes.string.isRequired,\n      fontSize: React.PropTypes.number.isRequired,\n    })\n  ).isRequired,\n}; \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "General Programming",
    "question": "How to conditionally apply class attributes?",
    "answer": "You shouldn't use curly braces inside quotes because it is going to be evaluated as a string. jsx harmony\n<div className=\"btn-panel {this.props.visible ? 'show' : 'hidden'}\"> Instead you need to move curly braces outside (don't forget to include spaces between class names): jsx harmony\n<div className={'btn-panel ' + (this.props.visible ? 'show' : 'hidden')}> Template strings will also work: jsx harmony\n<div className={`btn-panel ${this.props.visible ? 'show' : 'hidden'}`}> \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "React",
    "question": "What is the difference between React and ReactDOM?",
    "answer": "The react package contains React.createElement(), React.Component, React.Children, and other helpers related to elements and component classes. You can think of these as the isomorphic or universal helpers that you need to build components. The react-dom package contains ReactDOM.render(), and in react-dom/server we have server-side rendering support with ReactDOMServer.renderToString() and ReactDOMServer.renderToStaticMarkup(). \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "Why ReactDOM is separated from React?",
    "answer": "The React team worked on extracting all DOM-related features into a separate library called ReactDOM. React v0.14 is the first release in which the libraries are split. By looking at some of the packages, react-native, react-art, react-canvas, and react-three, it has become clear that the beauty and essence of React has nothing to do with browsers or the DOM. To build more environments that React can render to, React team planned to split the main React package into two: react and react-dom. This paves the way to writing components that can be shared between the web version of React and React Native. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How to use React label element?",
    "answer": "If you try to render a <label> element bound to a text input using the standard for attribute, then it produces HTML missing that attribute and prints a warning to the console. jsx harmony\n<label for={'user'}>{'User'}</label>\n<input type={'text'} id={'user'} /> Since for is a reserved keyword in JavaScript, use htmlFor instead. jsx harmony\n<label htmlFor={'user'}>{'User'}</label>\n<input type={'text'} id={'user'} /> \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "General Programming",
    "question": "How to combine multiple inline style objects?",
    "answer": "You can use spread operator in regular React: jsx harmony\n<button style={{ ...styles.panel.button, ...styles.panel.submitButton }}>\n  {\"Submit\"}\n</button> If you're using React Native then you can use the array notation: jsx harmony\n<button style={[styles.panel.button, styles.panel.submitButton]}>\n  {\"Submit\"}\n</button> \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "General Programming",
    "question": "How to re-render the view when the browser is resized?",
    "answer": "You can use the useState hook to manage the width and height state variables, and the useEffect hook to add and remove the resize event listener. The [] dependency array passed to useEffect ensures that the effect only runs once (on mount) and not on every re-render. ```javascript\nimport React, { useState, useEffect } from \"react\";\nfunction WindowDimensions() {\n  const [dimensions, setDimensions] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight,\n  }); useEffect(() => {\n    function handleResize() {\n      setDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); return (\n    \n      {dimensions.width} x {dimensions.height}\n    \n  );\n}\n``` Using Class Component You can listen to the resize event in componentDidMount() and then update the dimensions (width and height). You should remove the listener in componentWillUnmount() method. ```javascript\nclass WindowDimensions extends React.Component {\n  constructor(props) {\n    super(props);\n    this.updateDimensions = this.updateDimensions.bind(this);\n  } componentWillMount() {\n    this.updateDimensions();\n  } componentDidMount() {\n    window.addEventListener(\"resize\", this.updateDimensions);\n  } componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateDimensions);\n  } updateDimensions() {\n    this.setState({\n      width: window.innerWidth,\n      height: window.innerHeight,\n    });\n  } render() {\n    return (\n      \n        {this.state.width} x {this.state.height}\n      \n    );\n  }\n}\n``` \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "React",
    "question": "How to pretty print JSON with React?",
    "answer": "We can use <pre> tag so that the formatting of the JSON.stringify() is retained: ```jsx harmony\nconst data = { name: \"John\", age: 42 }; function User {\n    return {JSON.stringify(data, null, 2)};\n} const container = createRoot(document.getElementById(\"container\")); container.render();\n``` See Class\n\n```jsx harmony\nconst data = { name: \"John\", age: 42 };\nclass User extends React.Component {\n  render() {\n    return {JSON.stringify(data, null, 2)};\n  }\n}\nReact.render(, document.getElementById(\"container\"));\n```  ```jsx harmony\nconst data = { name: \"John\", age: 42 }; class User extends React.Component {\n  render() {\n    return {JSON.stringify(data, null, 2)};\n  }\n} React.render(, document.getElementById(\"container\"));\n```  \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "React",
    "question": "Why you can't update props in React?",
    "answer": "The React philosophy is that props should be immutable(read only) and top-down. This means that a parent can send any prop values to a child, but the child can't modify received props. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "How to focus an input element on page load?",
    "answer": "You need to use useEffect hook to set focus on input field during page load time for functional component. ```jsx harmony\nimport React, { useEffect, useRef } from \"react\"; const App = () => {\n  const inputElRef = useRef(null); useEffect(() => {\n    inputElRef.current.focus();\n  }, []); return (\n    \n\n\n\n  );\n}; ReactDOM.render(, document.getElementById(\"app\"));\n``` See Class\n\n  You can do it by creating ref for input element and using it in componentDidMount():\n```jsx harmony\nclass App extends React.Component {\n  componentDidMount() {\n    this.nameInput.focus();\n  }\nrender() {\n    return (\n      \n\n (this.nameInput = input)}\n          defaultValue={\"Will focus\"}\n        />\n      \n    );\n  }\n}\nReactDOM.render(, document.getElementById(\"app\"));\n``` You can do it by creating ref for input element and using it in componentDidMount(): ```jsx harmony\nclass App extends React.Component {\n  componentDidMount() {\n    this.nameInput.focus();\n  } render() {\n    return (\n      \n\n (this.nameInput = input)}\n          defaultValue={\"Will focus\"}\n        />\n      \n    );\n  }\n} ReactDOM.render(, document.getElementById(\"app\"));\n```  \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "React",
    "question": "How can we find the version of React at runtime in the browser?",
    "answer": "You can use React.version to get the version. ```jsx harmony\nconst REACT_VERSION = React.version; ReactDOM.render(\n  {React version: ${REACT_VERSION}},\n  document.getElementById(\"app\")\n);\n``` \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How to add Google Analytics for React Router?",
    "answer": "Add a listener on the history object to record each page view: javascript\nhistory.listen(function (location) {\n  window.ga(\"set\", \"page\", location.pathname + location.search);\n  window.ga(\"send\", \"pageview\", location.pathname + location.search);\n}); \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "React",
    "question": "How do you apply vendor prefixes to inline styles in React?",
    "answer": "React does not apply vendor prefixes automatically. You need to add vendor prefixes manually. jsx harmony\n<div\n  style={{\n    transform: \"rotate(90deg)\",\n    WebkitTransform: \"rotate(90deg)\", // note the capital 'W' here\n    msTransform: \"rotate(90deg)\", // 'ms' is the only lowercase vendor prefix\n  }}\n/> \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How to import and export components using React and ES6?",
    "answer": "You should use default for exporting the components ```jsx harmony\nimport User from \"user\"; export default function MyProfile {\n    return //...;\n}\n``` See Class\n\n ```jsx harmony\n import React from \"react\";\n import User from \"user\";\nexport default class MyProfile extends React.Component {\nrender() {\nreturn //...;\n}\n}\n``` ```jsx harmony\n import React from \"react\";\n import User from \"user\"; export default class MyProfile extends React.Component {\nrender() {\nreturn //...;\n}\n} ``` With the export specifier, the MyProfile is going to be the member and exported to this module and the same can be imported without mentioning the name in other components.\n``` \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "React",
    "question": "What are the exceptions on React component naming?",
    "answer": "The component names should start with an uppercase letter but there are few exceptions to this convention. The lowercase tag names with a dot (property accessors) are still considered as valid component names.\nFor example, the below tag can be compiled to a valid component, jsx harmony\n     render() {\n          return (\n            <obj.component/> // `React.createElement(obj.component)`\n          )\n    } \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "React",
    "question": "Is it possible to use async/await in plain React?",
    "answer": "If you want to use async/await in React, you will need Babel and transform-async-to-generator plugin. React Native ships with Babel and a set of transforms. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What are the common folder structures for React?",
    "answer": "There are two common practices for React project file structure. Grouping by features or routes: One common way to structure projects is locate CSS, JS, and tests together, grouped by feature or route. common/\n\u251c\u2500 Avatar.js\n\u251c\u2500 Avatar.css\n\u251c\u2500 APIUtils.js\n\u2514\u2500 APIUtils.test.js\nfeed/\n\u251c\u2500 index.js\n\u251c\u2500 Feed.js\n\u251c\u2500 Feed.css\n\u251c\u2500 FeedStory.js\n\u251c\u2500 FeedStory.test.js\n\u2514\u2500 FeedAPI.js\nprofile/\n\u251c\u2500 index.js\n\u251c\u2500 Profile.js\n\u251c\u2500 ProfileHeader.js\n\u251c\u2500 ProfileHeader.css\n\u2514\u2500 ProfileAPI.js Grouping by file type: Another popular way to structure projects is to group similar files together. api/\n\u251c\u2500 APIUtils.js\n\u251c\u2500 APIUtils.test.js\n\u251c\u2500 ProfileAPI.js\n\u2514\u2500 UserAPI.js\ncomponents/\n\u251c\u2500 Avatar.js\n\u251c\u2500 Avatar.css\n\u251c\u2500 Feed.js\n\u251c\u2500 Feed.css\n\u251c\u2500 FeedStory.js\n\u251c\u2500 FeedStory.test.js\n\u251c\u2500 Profile.js\n\u251c\u2500 ProfileHeader.js\n\u2514\u2500 ProfileHeader.css \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "What are the popular packages for animation?",
    "answer": "React Transition Group and React Motion are popular animation packages in React ecosystem. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is the benefit of styles modules?",
    "answer": "It is recommended to avoid hard coding style values in components. Any values that are likely to be used across different UI components should be extracted into their own modules. For example, these styles could be extracted into a separate component: ```javascript\nexport const colors = {\n  white,\n  black,\n  blue,\n}; export const space = [0, 8, 16, 32, 64];\n``` And then imported individually in other components: javascript\nimport { space, colors } from \"./styles\"; \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "React",
    "question": "What are the popular React-specific linters?",
    "answer": "ESLint is a popular JavaScript linter. There are plugins available that analyse specific code styles. One of the most common for React is an npm package called eslint-plugin-react. By default, it will check a number of best practices, with rules checking things from keys in iterators to a complete set of prop types. Another popular plugin is eslint-plugin-jsx-a11y, which will help fix common issues with accessibility. As JSX offers slightly different syntax to regular HTML, issues with alt text and tabindex, for example, will not be picked up by regular plugins. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "React Router",
    "answer": "\u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What is React Router?",
    "answer": "React Router is a powerful routing library built on top of React that helps you add new screens and flows to your application incredibly quickly, all while keeping the URL in sync with what's being displayed on the page. \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "React",
    "question": "How React Router is different from history library?",
    "answer": "React Router is a wrapper around the history library which handles interaction with the browser's window.history with its browser and hash histories. It also provides memory history which is useful for environments that don't have global history, such as mobile app development (React Native) and unit testing with Node. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What are the <Router> components of React Router v6?",
    "answer": "React Router v6 provides below 4 <Router> components: The above components will create browser, hash, memory and static history instances. React Router v6 makes the properties and methods of the history instance associated with your router available through the context in the router object. \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "What is the purpose of push() and replace() methods of history?",
    "answer": "A history instance has two methods for navigation purpose. If you think of the history as an array of visited locations, push() will add a new location to the array and replace() will replace the current location in the array with the new one. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How do you programmatically navigate using React Router v4?",
    "answer": "There are three different ways to achieve programmatic routing/navigation within components. Using the withRouter() higher-order function: The withRouter() higher-order function will inject the history object as a prop of the component. This object provides push() and replace() methods to avoid the usage of context. ```jsx harmony\nimport { withRouter } from \"react-router-dom\"; // this also works with 'react-router-native' const Button = withRouter(({ history }) => (\n   {\n      history.push(\"/new-location\");\n    }} ));\n``` Using <Route> component and render props pattern: The <Route> component passes the same props as withRouter(), so you will be able to access the history methods through the history prop. ```jsx harmony\nimport { Route } from \"react-router-dom\"; const Button = () => (\n   (\n       {\n          history.push(\"/new-location\");\n        }}\n      >\n        {\"Click Me!\"}\n      \n    )}\n  />\n);\n``` Using context: This option is not recommended and treated as unstable API. ```jsx harmony\nconst Button = (props, context) => (\n   {\n      context.history.push(\"/new-location\");\n    }} ); Button.contextTypes = {\n  history: React.PropTypes.shape({\n    push: React.PropTypes.func.isRequired,\n  }),\n};\n``` \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "React",
    "question": "How to get query parameters in React Router v4?",
    "answer": "The ability to parse query strings was taken out of React Router v4 because there have been user requests over the years to support different implementation. So the decision has been given to users to choose the implementation they like. The recommended approach is to use query strings library. javascript\nconst queryString = require(\"query-string\");\nconst parsed = queryString.parse(props.location.search); You can also use URLSearchParams if you want something native: javascript\nconst params = new URLSearchParams(props.location.search);\nconst foo = params.get(\"name\"); You should use a polyfill for IE11. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "Why you get \"Router may have only one child element\" warning?",
    "answer": "You have to wrap your Route's in a <Switch> block because <Switch> is unique in that it renders a route exclusively. At first you need to add Switch to your imports: javascript\nimport { Switch, Router, Route } from \"react-router\"; Then define the routes within <Switch> block: jsx harmony\n<Router>\n  <Switch>\n    <Route {/* ... */} />\n    <Route {/* ... */} />\n  </Switch>\n</Router> \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How to pass params to history.push method in React Router v4?",
    "answer": "While navigating you can pass props to the history object: javascript\nthis.props.history.push({\n  pathname: \"/template\",\n  search: \"?name=sudheer\",\n  state: { detail: response.data },\n}); The search property is used to pass query params in push() method. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "How to implement default or NotFound page?",
    "answer": "A <Switch> renders the first child <Route> that matches. A <Route> with no path always matches. So you just need to simply drop path attribute as below jsx harmony\n<Switch>\n  <Route exact path=\"/\" component={Home} />\n  <Route path=\"/user\" component={User} />\n  <Route component={NotFound} />\n</Switch> \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How to get history on React Router v4?",
    "answer": "Below are the list of steps to get history object on React Router v4, Create a module that exports a history object and import this module across the project. For example, create history.js file: ```javascript\nimport { createBrowserHistory } from \"history\"; export default createBrowserHistory({\n  / pass a configuration object here if needed /\n});\n``` You should use the <Router> component instead of built-in routers. Import the above history.js inside index.js file: ```jsx harmony\nimport { Router } from \"react-router-dom\";\nimport history from \"./history\";\nimport App from \"./App\"; ReactDOM.render(\n  \n\n,\n  holder\n);\n``` You can also use push method of history object similar to built-in history object: ```javascript\n// some-other-file.js\nimport history from \"./history\"; history.push(\"/go-here\");\n``` \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "How to perform automatic redirect after login?",
    "answer": "The react-router package provides <Redirect> component in React Router. Rendering a <Redirect> will navigate to a new location. Like server-side redirects, the new location will override the current location in the history stack. ```javascript\nimport { Redirect } from \"react-router\"; export default function Login {\n    if (this.state.isLoggedIn === true) {\n      return ;\n    } else {\n      return {\"Login Please\"};\n    }\n}\n``` See Class\n\n```jsx\nimport React, { Component } from \"react\";\nimport { Redirect } from \"react-router\";\nexport default class LoginComponent extends Component {\n  render() {\n    if (this.state.isLoggedIn === true) {\n      return ;\n    } else {\n      return {\"Login Please\"};\n    }\n  }\n}\n```  ```jsx\nimport React, { Component } from \"react\";\nimport { Redirect } from \"react-router\"; export default class LoginComponent extends Component {\n  render() {\n    if (this.state.isLoggedIn === true) {\n      return ;\n    } else {\n      return {\"Login Please\"};\n    }\n  }\n}\n```  \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "React",
    "question": "What is React Intl?",
    "answer": "The React Intl library makes internationalization in React straightforward, with off-the-shelf components and an API that can handle everything from formatting strings, dates, and numbers, to pluralization. React Intl is part of FormatJS which provides bindings to React via its components and API. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What are the main features of React Intl?",
    "answer": "Below are the main features of React Intl, \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What are the two ways of formatting in React Intl?",
    "answer": "The library provides two ways to format strings, numbers, and dates: Using react components: jsx harmony\n<FormattedMessage\n  id={\"account\"}\n  defaultMessage={\"The amount is less than minimum balance.\"}\n/> Using an API: ```javascript\nconst messages = defineMessages({\n  accountMessage: {\n    id: \"account\",\n    defaultMessage: \"The amount is less than minimum balance.\",\n  },\n}); formatMessage(messages.accountMessage);\n``` \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How to use <FormattedMessage> as placeholder using React Intl?",
    "answer": "The <Formatted... /> components from react-intl return elements, not plain text, so they can't be used for placeholders, alt text, etc. In that case, you should use lower level API formatMessage(). You can inject the intl object into your component using injectIntl() higher-order component and then format the message using formatMessage() available on that object. ```jsx harmony\nimport React from \"react\";\nimport { injectIntl, intlShape } from \"react-intl\"; const MyComponent = ({ intl }) => {\n  const placeholder = intl.formatMessage({ id: \"messageId\" });\n  return ;\n}; MyComponent.propTypes = {\n  intl: intlShape.isRequired,\n}; export default injectIntl(MyComponent);\n``` \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "React",
    "question": "How to access current locale with React Intl?",
    "answer": "You can get the current locale in any component of your application using injectIntl(): ```jsx harmony\nimport { injectIntl, intlShape } from \"react-intl\"; const MyComponent = ({ intl }) => (\n  {The current locale is ${intl.locale}}\n); MyComponent.propTypes = {\n  intl: intlShape.isRequired,\n}; export default injectIntl(MyComponent);\n``` \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "React",
    "question": "How to format date using React Intl?",
    "answer": "The injectIntl() higher-order component will give you access to the formatDate() method via the props in your component. The method is used internally by instances of FormattedDate and it returns the string representation of the formatted date. ```jsx harmony\n import { injectIntl, intlShape } from \"react-intl\"; const stringDate = this.props.intl.formatDate(date, {\n   year: \"numeric\",\n   month: \"numeric\",\n   day: \"numeric\",\n }); const MyComponent = ({ intl }) => (\n   {The formatted date is ${stringDate}}\n ); MyComponent.propTypes = {\n   intl: intlShape.isRequired,\n }; export default injectIntl(MyComponent);\n ``` \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What is Shallow Renderer in React testing?",
    "answer": "Shallow rendering is useful for writing unit test cases in React. It lets you render a component one level deep and assert facts about what its render method returns, without worrying about the behavior of child components, which are not instantiated or rendered. For example, if you have the following component: javascript\nfunction MyComponent() {\n  return (\n    <div>\n      <span className={\"heading\"}>{\"Title\"}</span>\n      <span className={\"description\"}>{\"Description\"}</span>\n    </div>\n  );\n} Then you can assert as follows: ```jsx harmony\nimport ShallowRenderer from \"react-test-renderer/shallow\"; // in your test\nconst renderer = new ShallowRenderer();\nrenderer.render(); const result = renderer.getRenderOutput(); expect(result.type).toBe(\"div\");\nexpect(result.props.children).toEqual([\n  {\"Title\"},\n  {\"Description\"},\n]);\n``` \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What is TestRenderer package in React?",
    "answer": "This package provides a renderer that can be used to render components to pure JavaScript objects, without depending on the DOM or a native mobile environment. This package makes it easy to grab a snapshot of the platform view hierarchy (similar to a DOM tree) rendered by a ReactDOM or React Native without using a browser or jsdom. ```jsx harmony\nimport TestRenderer from \"react-test-renderer\"; const Link = ({ page, children }) => {children}; const testRenderer = TestRenderer.create(\n  {\"Facebook\"}\n); console.log(testRenderer.toJSON());\n// {\n//   type: 'a',\n//   props: { href: 'https://www.facebook.com/' },\n//   children: [ 'Facebook' ]\n// }\n``` \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What is the purpose of ReactTestUtils package?",
    "answer": "ReactTestUtils are provided in the with-addons package and allow you to perform actions against a simulated DOM for the purpose of unit testing. \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "General Programming",
    "question": "What is Jest?",
    "answer": "Jest is a JavaScript unit testing framework created by Facebook based on Jasmine and provides automated mock creation and a jsdom environment. It's often used for testing components. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What are the advantages of Jest over Jasmine?",
    "answer": "There are couple of advantages compared to Jasmine: - Automatically finds tests to execute in your source code. - Automatically mocks dependencies when running your tests. - Allows you to test asynchronous code synchronously. - Runs your tests with a fake DOM implementation (via jsdom) so that your tests can be run on the command line. - Runs tests in parallel processes so that they finish sooner. \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "Give a simple example of Jest test case",
    "answer": "Let's write a test for a function that adds two numbers in sum.js file: ```javascript\n const sum = (a, b) => a + b; export default sum;\n ``` Create a file named sum.test.js which contains actual test: ```javascript\n import sum from \"./sum\"; test(\"adds 1 + 2 to equal 3\", () => {\n   expect(sum(1, 2)).toBe(3);\n });\n ``` And then add the following section to your package.json: json\n {\n   \"scripts\": {\n     \"test\": \"jest\"\n   }\n } Finally, run yarn test or npm test and Jest will print a result: console\n $ yarn test\n PASS ./sum.test.js\n \u2713 adds 1 + 2 to equal 3 (2ms)",
    "difficulty": "Hard"
  },
  {
    "technology": "React",
    "question": "React Redux",
    "answer": "\u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is flux?",
    "answer": "Flux is an application design paradigm used as a replacement for the more traditional MVC pattern. It is not a framework or a library but a new kind of architecture that complements React and the concept of Unidirectional Data Flow. Facebook uses this pattern internally when working with React. The workflow between dispatcher, stores and views components with distinct inputs and outputs as follows:  \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is Redux?",
    "answer": "Redux is a predictable state container for JavaScript apps based on the Flux design pattern. Redux can be used together with React, or with any other view library. It is tiny (about 2kB) and has no dependencies. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What are the core principles of Redux?",
    "answer": "Redux follows three fundamental principles: \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "General Programming",
    "question": "What are the downsides of Redux compared to Flux?",
    "answer": "Instead of saying downsides we can say that there are few compromises of using Redux over Flux. Those are as follows: \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is the difference between mapStateToProps() and mapDispatchToProps()?",
    "answer": "mapStateToProps() is a utility which helps your component get updated state (which is updated by some other components): javascript\n const mapStateToProps = (state) => {\n   return {\n     todos: getVisibleTodos(state.todos, state.visibilityFilter),\n   };\n }; mapDispatchToProps() is a utility which will help your component to fire an action event (dispatching action which may cause change of application state): javascript\n const mapDispatchToProps = (dispatch) => {\n   return {\n     onTodoClick: (id) => {\n       dispatch(toggleTodo(id));\n     },\n   };\n }; It is recommended to always use the \u201cobject shorthand\u201d form for the mapDispatchToProps. Redux wraps it in another function that looks like (\u2026args) => dispatch(onTodoClick(\u2026args)), and pass that wrapper function as a prop to your component. javascript\n const mapDispatchToProps = {\n   onTodoClick,\n }; \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "Can I dispatch an action in reducer?",
    "answer": "Dispatching an action within a reducer is an anti-pattern. Your reducer should be without side effects, simply digesting the action payload and returning a new state object. Adding listeners and dispatching actions within the reducer can lead to chained actions and other side effects. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How to access Redux store outside a component?",
    "answer": "You just need to export the store from the module where it created with createStore(). Also, it shouldn't pollute the global window object. ```javascript\n store = createStore(myReducer); export default store;\n ``` \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What are the drawbacks of MVW pattern?",
    "answer": "\u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "Are there any similarities between Redux and RxJS?",
    "answer": "These libraries are very different for very different purposes, but there are some vague similarities. Redux is a tool for managing state throughout the application. It is usually used as an architecture for UIs. Think of it as an alternative to (half of) Angular. RxJS is a reactive programming library. It is usually used as a tool to accomplish asynchronous tasks in JavaScript. Think of it as an alternative to Promises. Redux uses the Reactive paradigm because the Store is reactive. The Store observes actions from a distance, and changes itself. RxJS also uses the Reactive paradigm, but instead of being an architecture, it gives you basic building blocks, Observables, to accomplish this pattern. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "How to reset state in Redux?",
    "answer": "You need to write a root reducer in your application which delegate handling the action to the reducer generated by combineReducers(). For example, let us take rootReducer() to return the initial state after USER_LOGOUT action. As we know, reducers are supposed to return the initial state when they are called with undefined as the first argument, no matter the action. ```javascript\n const appReducer = combineReducers({\n   / your app's top-level reducers /\n }); const rootReducer = (state, action) => {\n   if (action.type === \"USER_LOGOUT\") {\n     state = undefined;\n   } return appReducer(state, action);\n };\n ``` In case of using redux-persist, you may also need to clean your storage. redux-persist keeps a copy of your state in a storage engine. First, you need to import the appropriate storage engine and then, to parse the state before setting it to undefined and clean each storage state key. ```javascript\n const appReducer = combineReducers({\n   / your app's top-level reducers /\n }); const rootReducer = (state, action) => {\n   if (action.type === \"USER_LOGOUT\") {\n     Object.keys(state).forEach((key) => {\n       storage.removeItem(persist:${key});\n     }); } return appReducer(state, action);\n };\n ``` \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "React",
    "question": "What is the difference between React context and React Redux?",
    "answer": "You can use Context in your application directly and is going to be great for passing down data to deeply nested components which what it was designed for. Whereas Redux is much more powerful and provides a large number of features that the Context API doesn't provide. Also, React Redux uses context internally but it doesn't expose this fact in the public API. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "Why are Redux state functions called reducers?",
    "answer": "Reducers always return the accumulation of the state (based on all previous and current actions). Therefore, they act as a reducer of state. Each time a Redux reducer is called, the state and action are passed as parameters. This state is then reduced (or accumulated) based on the action, and then the next state is returned. You could reduce a collection of actions and an initial state (of the store) on which to perform these actions to get the resulting final state. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "How to make AJAX request in Redux?",
    "answer": "You can use redux-thunk middleware which allows you to define async actions. Let's take an example of fetching specific account as an AJAX call using fetch API: ``javascript\n export function fetchAccount(id) {\n   return (dispatch) => {\n     dispatch(setLoadingAccountState()); // Show a loading spinner\n     fetch(/account/${id}`, (response) => {\n       dispatch(doneFetchingAccount()); // Hide loading spinner\n       if (response.status === 200) {\n         dispatch(setAccount(response.json)); // Use a normal function to set the received state\n       } else {\n         dispatch(someError);\n       }\n     });\n   };\n } function setAccount(data) {\n   return { type: \"SET_Account\", data: data };\n }\n ``` \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "React",
    "question": "Should I keep all component's state in Redux store?",
    "answer": "Keep your data in the Redux store, and the UI related state internally in the component. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is the proper way to access Redux store?",
    "answer": "The best way to access your store in a component is to use the connect() function, that creates a new component that wraps around your existing one. This pattern is called Higher-Order Components, and is generally the preferred way of extending a component's functionality in React. This allows you to map state and action creators to your component, and have them passed in automatically as your store updates. Let's take an example of <FilterLink> component using connect: ```javascript\n import { connect } from \"react-redux\";\n import { setVisibilityFilter } from \"../actions\";\n import Link from \"../components/Link\"; const mapStateToProps = (state, ownProps) => ({\n   active: ownProps.filter === state.visibilityFilter,\n }); const mapDispatchToProps = (dispatch, ownProps) => ({\n   onClick: () => dispatch(setVisibilityFilter(ownProps.filter)),\n }); const FilterLink = connect(mapStateToProps, mapDispatchToProps)(Link); export default FilterLink;\n ``` Due to it having quite a few performance optimizations and generally being less likely to cause bugs, the Redux developers almost always recommend using connect() over accessing the store directly (using context API). javascript\n function MyComponent {\n   someMethod() {\n     doSomethingWith(this.context.store);\n   }\n } \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What is the difference between component and container in React Redux?",
    "answer": "Component is a class or function component that describes the presentational part of your application. Container is an informal term for a component that is connected to a Redux store. Containers subscribe to Redux state updates and dispatch actions, and they usually don't render DOM elements; they delegate rendering to presentational child components. \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "General Programming",
    "question": "What is the purpose of the constants in Redux?",
    "answer": "Constants allows you to easily find all usages of that specific functionality across the project when you use an IDE. It also prevents you from introducing silly bugs caused by typos \u2013 in which case, you will get a ReferenceError immediately. Normally we will save them in a single file (constants.js or actionTypes.js). javascript\n export const ADD_TODO = \"ADD_TODO\";\n export const DELETE_TODO = \"DELETE_TODO\";\n export const EDIT_TODO = \"EDIT_TODO\";\n export const COMPLETE_TODO = \"COMPLETE_TODO\";\n export const COMPLETE_ALL = \"COMPLETE_ALL\";\n export const CLEAR_COMPLETED = \"CLEAR_COMPLETED\"; In Redux, you use them in two places: During action creation: Let's take actions.js: ```javascript\nimport { ADD_TODO } from \"./actionTypes\"; export function addTodo(text) {\n  return { type: ADD_TODO, text };\n}\n``` In reducers: Let's create reducer.js: ```javascript\nimport { ADD_TODO } from \"./actionTypes\"; export default (state = [], action) => {\n  switch (action.type) {\n    case ADD_TODO:\n      return [\n        ...state,\n        {\n          text: action.text,\n          completed: false,\n        },\n      ];\n    default:\n      return state;\n  }\n};\n``` \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "What are the different ways to write mapDispatchToProps()?",
    "answer": "There are a few ways of binding action creators to dispatch() in mapDispatchToProps(). Below are the possible options: javascript\n const mapDispatchToProps = (dispatch) => ({\n   action: () => dispatch(action()),\n }); javascript\n const mapDispatchToProps = (dispatch) => ({\n   action: bindActionCreators(action, dispatch),\n }); javascript\n const mapDispatchToProps = { action }; The third option is just a shorthand for the first one. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is the use of the ownProps parameter in mapStateToProps() and mapDispatchToProps()?",
    "answer": "If the ownProps parameter is specified, React Redux will pass the props that were passed to the component into your connect functions. So, if you use a connected component: ```jsx harmony\n import ConnectedComponent from \"./containers/ConnectedComponent\"; ;\n ``` The ownProps inside your mapStateToProps() and mapDispatchToProps() functions will be an object: javascript\n {\n   user: \"john\";\n } You can use this object to decide what to return from those functions. \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "General Programming",
    "question": "How to structure Redux top level directories?",
    "answer": "Most of the applications has several top-level directories as below: This structure works well for small and medium size apps. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is redux-saga?",
    "answer": "redux-saga is a library that aims to make side effects (asynchronous things like data fetching and impure things like accessing the browser cache) in React/Redux applications easier and better. It is available in NPM: console\n $ npm install --save redux-saga \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "General Programming",
    "question": "What is the mental model of redux-saga?",
    "answer": "Saga is like a separate thread in your application, that's solely responsible for side effects. redux-saga is a redux middleware, which means this thread can be started, paused and cancelled from the main application with normal Redux actions, it has access to the full Redux application state and it can dispatch Redux actions as well. \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "What are the differences between call() and put() in redux-saga?",
    "answer": "Both call() and put() are effect creator functions. call() function is used to create effect description, which instructs middleware to call the promise. put() function creates an effect, which instructs middleware to dispatch an action to the store. Let's take example of how these effects work for fetching particular user data. ``javascript\n function* fetchUserSaga(action) {\n   //callfunction accepts rest arguments, which will be passed toapi.fetchUserfunction.\n   // Instructing middleware to call promise, it resolved value will be assigned touserData` variable\n   const userData = yield call(api.fetchUser, action.userId); // Instructing middleware to dispatch corresponding action.\n   yield put({\n     type: \"FETCH_USER_SUCCESS\",\n     userData,\n   });\n }\n ``` \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "What is Redux Thunk?",
    "answer": "Redux Thunk middleware allows you to write action creators that return a function instead of an action. The thunk can be used to delay the dispatch of an action, or to dispatch only if a certain condition is met. The inner function receives the store methods dispatch() and getState() as parameters. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What are the differences between redux-saga and redux-thunk?",
    "answer": "Both Redux Thunk and Redux Saga take care of dealing with side effects. In most of the scenarios, Thunk uses Promises to deal with them, whereas Saga uses Generators. Thunk is simple to use and Promises are familiar to many developers, Sagas/Generators are more powerful but you will need to learn them. But both middleware can coexist, so you can start with Thunks and introduce Sagas when/if you need them. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is Redux DevTools?",
    "answer": "Redux DevTools is a live-editing time travel environment for Redux with hot reloading, action replay, and customizable UI. If you don't want to bother with installing Redux DevTools and integrating it into your project, consider using Redux DevTools Extension for Chrome and Firefox. \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "General Programming",
    "question": "What are the features of Redux DevTools?",
    "answer": "Some of the main features of Redux DevTools are below, \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What are Redux selectors and why use them?",
    "answer": "Selectors are functions that take Redux state as an argument and return some data to pass to the component. For example, to get user details from the state: javascript\n const getUserData = (state) => state.user.data; These selectors have two main benefits, \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is Redux Form?",
    "answer": "Redux Form works with React and Redux to enable a form in React to use Redux to store all of its state. Redux Form can be used with raw HTML5 inputs, but it also works very well with common UI frameworks like Material UI, React Widgets and React Bootstrap. \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "General Programming",
    "question": "What are the main features of Redux Form?",
    "answer": "Some of the main features of Redux Form are: \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "How to add multiple middlewares to Redux?",
    "answer": "You can use applyMiddleware(). For example, you can add redux-thunk and logger passing them as arguments to applyMiddleware(): javascript\n import { createStore, applyMiddleware } from \"redux\";\n const createStoreWithMiddleware = applyMiddleware(\n   ReduxThunk,\n   logger\n )(createStore); \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "How to set initial state in Redux?",
    "answer": "You need to pass initial state as second argument to createStore: ```javascript\n const rootReducer = combineReducers({\n   todos: todos,\n   visibilityFilter: visibilityFilter,\n }); const initialState = {\n   todos: [{ id: 123, name: \"example\", completed: false }],\n }; const store = createStore(rootReducer, initialState);\n ``` \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "How Relay is different from Redux?",
    "answer": "Relay is similar to Redux in that they both use a single store. The main difference is that relay only manages state originated from the server, and all access to the state is used via GraphQL queries (for reading data) and mutations (for changing data). Relay caches the data for you and optimizes data fetching for you, by fetching only changed data and nothing more.",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "What is an action in Redux?",
    "answer": "Actions are plain JavaScript objects or payloads of information that send data from your application to your store. They are the only source of information for the store. Actions must have a type property that indicates the type of action being performed. For example, let's take an action which represents adding a new todo item: {\n   type: ADD_TODO,\n   text: 'Add todo item'\n } \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "React Native",
    "answer": "\u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What is the difference between React Native and React?",
    "answer": "React is a JavaScript library, supporting both front end web and being run on the server, for building user interfaces and web applications. React Native is a mobile framework that compiles to native app components, allowing you to build native mobile applications (iOS, Android, and Windows) in JavaScript that allows you to use React to build your components, and implements React under the hood. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How to test React Native apps?",
    "answer": "React Native can be tested only in mobile simulators like iOS and Android. You can run the app in your mobile using expo app (https://expo.io) Where it syncs using QR code, your mobile and computer should be in same wireless network. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How to do logging in React Native?",
    "answer": "You can use console.log, console.warn, etc. As of React Native v0.29 you can simply run the following to see logs in the console: $ react-native log-ios\n $ react-native log-android \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How to debug your React Native?",
    "answer": "Follow the below steps to debug React Native app:",
    "difficulty": "Hard"
  },
  {
    "technology": "React",
    "question": "React supported libraries & Integration",
    "answer": "\u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is reselect and how it works?",
    "answer": "Reselect is a selector library (for Redux) which uses memoization concept. It was originally written to compute derived data from Redux-like applications state, but it can't be tied to any architecture or library. Reselect keeps a copy of the last inputs/outputs of the last call, and recomputes the result only if one of the inputs changes. If the same inputs are provided twice in a row, Reselect returns the cached output. It's memoization and cache are fully customizable. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is Flow?",
    "answer": "Flow is a static type checker designed to find type errors in JavaScript. Flow types can express much more fine-grained distinctions than traditional type systems. For example, Flow helps you catch errors involving null, unlike most type systems. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is the difference between Flow and PropTypes?",
    "answer": "Flow is a static analysis tool (static checker) which uses a superset of the language, allowing you to add type annotations to all of your code and catch an entire class of bugs at compile time. PropTypes is a basic type checker (runtime checker) which has been patched onto React. It can't check anything other than the types of the props being passed to a given component. If you want more flexible typechecking for your entire project Flow/TypeScript are appropriate choices. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How to use Font Awesome icons in React?",
    "answer": "The below steps followed to include Font Awesome in React: Install font-awesome: console\n$ npm install --save font-awesome Import font-awesome in your index.js file: javascript\nimport \"font-awesome/css/font-awesome.min.css\"; Add Font Awesome classes in className: javascript\nfunction MyComponent {\n  return <div><i className={'fa fa-spinner'} /></div>\n} \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "React",
    "question": "What is React Dev Tools?",
    "answer": "React Developer Tools let you inspect the component hierarchy, including component props and state. It exists both as a browser extension (for Chrome and Firefox), and as a standalone app (works with other environments including Safari, IE, and React Native). The official extensions available for different browsers or environments. \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "General Programming",
    "question": "Why is DevTools not loading in Chrome for local files?",
    "answer": "If you opened a local HTML file in your browser (file://...) then you must first open Chrome Extensions and check Allow access to file URLs. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How to use Polymer in React?",
    "answer": "You need to follow below steps to use Polymer in React, Create a Polymer element: jsx harmony\n<link\n  rel=\"import\"\n  href=\"../../bower_components/polymer/polymer.html\"\n/>;\nPolymer({\n  is: \"calendar-element\",\n  ready: function () {\n    this.textContent = \"I am a calendar\";\n  },\n}); Create the Polymer component HTML tag by importing it in a HTML document, e.g. import it in the index.html of your React application: html\n<link\n  rel=\"import\"\n  href=\"./src/polymer-components/calendar-element.html\"\n/> Use that element in the JSX file: javascript\nexport default function MyComponent {\n  return <calendar-element />;\n} \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What are the advantages of React over Vue.js?",
    "answer": "React has the following advantages over Vue.js: Note: The above list of advantages are purely opinionated and it vary based on the professional experience. But they are helpful as base parameters. \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "React",
    "question": "What is the difference between React and Angular?",
    "answer": "Let's see the difference between React and Angular in a table format. | React                                                                                       | Angular                                                                                                                            |\n | ------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------- |\n | React is a library and has only the View layer                                              | Angular is a framework and has complete MVC functionality                                                                          |\n | React handles rendering on the server side                                                  | AngularJS renders only on the client side but Angular 2 and above renders on the server side                                       |\n | React uses JSX that looks like HTML in JS which can be confusing                            | Angular follows the template approach for HTML, which makes code shorter and easy to understand                                    |\n | React Native, which is a React type to build mobile applications are faster and more stable | Ionic, Angular's mobile native app is relatively less stable and slower                                                            |\n | In React, data flows only in one way and hence debugging is easy                            | In Angular, data flows both way i.e it has two-way data binding between children and parent and hence debugging is often difficult | Note: The above list of differences are purely opinionated and it vary based on the professional experience. But they are helpful as base parameters. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "Why React tab is not showing up in DevTools?",
    "answer": "When the page loads, React DevTools sets a global named __REACT_DEVTOOLS_GLOBAL_HOOK__, then React communicates with that hook during initialization. If the website is not using React or if React fails to communicate with DevTools then it won't show up the tab. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What are Styled Components?",
    "answer": "styled-components is a JavaScript library for styling React applications. It removes the mapping between styles and components, and lets you write actual CSS augmented with JavaScript. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "Give an example of Styled Components?",
    "answer": "Lets create <Title> and <Wrapper> components with specific styles for each. ```javascript\n import React from \"react\";\n import styled from \"styled-components\"; // Create a  component that renders an  which is centered, red and sized at 1.5em\n const Title = styled.h1font-size: 1.5em;\n   text-align: center;\n   color: palevioletred;; // Create a  component that renders a  with some padding and a papayawhip background\n const Wrapper = styled.sectionpadding: 4em;\n   background: papayawhip;;\n ``` These two variables, Title and Wrapper, are now components that you can render just like any other react component. jsx harmony\n <Wrapper>\n   <Title>{\"Lets start first styled component!\"}</Title>\n </Wrapper> \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is Relay?",
    "answer": "Relay is a JavaScript framework for providing a data layer and client-server communication to web applications using the React view layer. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What are the main features of Reselect library?",
    "answer": "Let's see the main features of Reselect library, Let's take calculations and different amounts of a shipment order with the simplified usage of Reselect: ```javascript\n import { createSelector } from \"reselect\"; const shopItemsSelector = (state) => state.shop.items;\n const taxPercentSelector = (state) => state.shop.taxPercent; const subtotalSelector = createSelector(shopItemsSelector, (items) =>\n   items.reduce((acc, item) => acc + item.value, 0)\n ); const taxSelector = createSelector(\n   subtotalSelector,\n   taxPercentSelector,\n   (subtotal, taxPercent) => subtotal * (taxPercent / 100)\n ); export const totalSelector = createSelector(\n   subtotalSelector,\n   taxSelector,\n   (subtotal, tax) => ({ total: subtotal + tax })\n ); let exampleState = {\n   shop: {\n     taxPercent: 8,\n     items: [\n       { name: \"apple\", value: 1.2 },\n       { name: \"orange\", value: 0.95 },\n     ],\n   },\n }; console.log(subtotalSelector(exampleState)); // 2.15\n console.log(taxSelector(exampleState)); // 0.172\n console.log(totalSelector(exampleState)); // { total: 2.322 }\n ``` \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "Can Redux only be used with React?",
    "answer": "Redux can be used as a data store for any UI layer. The most common usage is with React and React Native, but there are bindings available for Angular, Angular 2, Vue, Mithril, and more. Redux simply provides a subscription mechanism which can be used by any other code. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "Do you need to have a particular build tool to use Redux?",
    "answer": "Redux is originally written in ES6 and transpiled for production into ES5 with Webpack and Babel. You should be able to use it regardless of your JavaScript build process. Redux also offers a UMD build that can be used directly without any build process at all. \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "How Redux Form initialValues get updated from state?",
    "answer": "You need to add enableReinitialize : true setting. javascript\n const InitializeFromStateForm = reduxForm({\n   form: \"initializeFromState\",\n   enableReinitialize: true,\n })(UserEdit); If your initialValues prop gets updated, your form will update too. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How React PropTypes allow different types for one prop?",
    "answer": "You can use oneOfType() method of PropTypes. For example, the height property can be defined with either string or number type as below: javascript\n Component.propTypes = {\n   size: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n }; \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "Can I import an SVG file as react component?",
    "answer": "You can import SVG directly as component instead of loading it as a file. This feature is available with react-scripts@2.0.0 and higher. ```jsx harmony\n import { ReactComponent as Logo } from \"./logo.svg\"; const App = () => (\n   \n     {/ Logo is an actual react component /}\n     \n\n );\n ``` Note: Don't forget about the curly braces in the import. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What is render hijacking in react?",
    "answer": "The concept of render hijacking is the ability to control what a component will output from another component. It means that you decorate your component by wrapping it into a Higher-Order component. By wrapping, you can inject additional props or make other changes, which can cause changing logic of rendering. It does not actually enable hijacking, but by using HOC you make your component behave differently. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How to pass numbers to React component?",
    "answer": "We can pass numbers as props to React component using curly braces {} where as strings in double quotes \"\" or single quotes '' ```jsx\n import React from \"react\"; const ChildComponent = ({ name, age }) => {\n   return (\n     <>\n       My Name is {name} and Age is {age}\n   \n   );\n }; const ParentComponent = () => {\n   return (\n     <>\n       \n\n   );\n }; export default ParentComponent;\n ``` \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "Do I need to keep all my state into Redux? Should I ever use react internal state?",
    "answer": "It is up to the developer's decision, i.e., it is developer's job to determine what kinds of state make up your application, and where each piece of state should live. Some users prefer to keep every single piece of data in Redux, to maintain a fully serializable and controlled version of their application at all times. Others prefer to keep non-critical or UI state, such as \u201cis this dropdown currently open\u201d, inside a component's internal state. Below are the rules of thumb to determine what kind of data should be put into Redux \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What is the purpose of registerServiceWorker in React?",
    "answer": "React creates a service worker for you without any configuration by default. The service worker is a web API that helps you cache your assets and other files so that when the user is offline or on a slow network, he/she can still see results on the screen, as such, it helps you build a better user experience, that's what you should know about service worker for now. It's all about adding offline capabilities to your site. ```jsx\n import React from \"react\";\n import ReactDOM from \"react-dom\";\n import App from \"./App\";\n import registerServiceWorker from \"./registerServiceWorker\"; ReactDOM.render(, document.getElementById(\"root\"));\n registerServiceWorker();\n ``` \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What is React memo function?",
    "answer": "Class components can be restricted from re-rendering when their input props are the same using PureComponent or shouldComponentUpdate. Now you can do the same with function components by wrapping them in React.memo. jsx\n const MyComponent = React.memo(function MyComponent(props) {\n   /* only rerenders if props change */\n }); \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What is React lazy function?",
    "answer": "The React.lazy function lets you render a dynamic import as a regular component. It will automatically load the bundle containing the OtherComponent when the component gets rendered. This must return a Promise which resolves to a module with a default export containing a React component. ```jsx\n const OtherComponent = React.lazy(() => import(\"./OtherComponent\")); function MyComponent() {\n   return (\n     \n\n\n   );\n }\n ``` Note:\nReact.lazy and Suspense is not yet available for server-side rendering. If you want to do code-splitting in a server rendered app, we still recommend React Loadable. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "How to prevent unnecessary updates using setState?",
    "answer": "You can compare the current value of the state with an existing state value and decide whether to rerender the page or not. If the values are the same then you need to return null to stop re-rendering otherwise return the latest state value. For example, the user profile information is conditionally rendered as follows, jsx\n getUserProfile = (user) => {\n   const latestAddress = user.address;\n   this.setState((state) => {\n     if (state.address === latestAddress) {\n       return null;\n     } else {\n       return { title: latestAddress };\n     }\n   });\n }; \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How do you render Array, Strings and Numbers in React 16 Version?",
    "answer": "Arrays: Unlike older releases, you don't need to make sure render method return a single element in React16. You are able to return multiple sibling elements without a wrapping element by returning an array. For example, let us take the below list of developers, jsx\n const ReactJSDevs = () => {\n   return [\n     <li key=\"1\">John</li>,\n     <li key=\"2\">Jackie</li>,\n     <li key=\"3\">Jordan</li>,\n   ];\n }; You can also merge this array of items in another array component. jsx\n const JSDevs = () => {\n   return (\n     <ul>\n       <li>Brad</li>\n       <li>Brodge</li>\n       <ReactJSDevs />\n       <li>Brandon</li>\n     </ul>\n   );\n }; Strings and Numbers: You can also return string and number type from the render method. jsx\n render() {\n  return 'Welcome to ReactJS questions';\n }\n // Number\n render() {\n  return 2018;\n } \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What are hooks?",
    "answer": "Hooks is a special JavaScript function that allows you use state and other React features without writing a class. This pattern has been introduced as a new feature in React 16.8 and helped to isolate the stateful logic from the components. Let's see an example of useState hook: ```jsx\n import { useState } from \"react\"; function Example() {\n   // Declare a new state variable, which we'll call \"count\"\n   const [count, setCount] = useState(0); return (\n     <>\n       You clicked {count} times\n setCount(count + 1)}>Click me\n\n   );\n }\n ``` You clicked {count} times Note: Hooks can be used inside an existing function component without rewriting the component. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What rules need to be followed for hooks?",
    "answer": "You need to follow two rules in order to use hooks, \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How to ensure hooks followed the rules in your project?",
    "answer": "React team released an ESLint plugin called eslint-plugin-react-hooks that enforces Hook's two rules. It is part of Hooks API. You can add this plugin to your project using the below command, javascript\n npm install eslint-plugin-react-hooks --save-dev And apply the below config in your ESLint config file, javascript\n // Your ESLint configuration\n {\n   \"plugins\": [\n     // ...\n     \"react-hooks\"\n   ],\n   \"rules\": {\n     // ...\n     \"react-hooks/rules-of-hooks\": \"error\"\n   }\n } The recommended eslint-config-react-app preset already includes the hooks rules of this plugin.\n For example, the linter enforce proper naming convention for hooks. If you rename your custom hooks which as prefix \"use\" to something else then linter won't allow you to call built-in hooks such as useState, useEffect etc inside of your custom hook anymore. Note: This plugin is intended to use in Create React App by default. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What are the differences between Flux and Redux?",
    "answer": "Below are the major differences between Flux and Redux | Flux                                           | Redux                                      |\n | ---------------------------------------------- | ------------------------------------------ |\n | State is mutable                               | State is immutable                         |\n | The Store contains both state and change logic | The Store and change logic are separate    |\n | There are multiple stores exist                | There is only one store exist              |\n | All the stores are disconnected and flat       | Single store with hierarchical reducers    |\n | It has a singleton dispatcher                  | There is no concept of dispatcher          |\n | React components subscribe to the store        | Container components uses connect function | \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What are the benefits of React Router V4?",
    "answer": "Below are the main benefits of React Router V4 module, \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "Can you describe about componentDidCatch lifecycle method signature?",
    "answer": "The componentDidCatch lifecycle method is invoked after an error has been thrown by a descendant component. The method receives two parameters, The method structure would be as follows javascript\n componentDidCatch(error, info); \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "In which scenarios do error boundaries not catch errors?",
    "answer": "Below are the cases in which error boundaries don't work, \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What is the behavior of uncaught errors in react 16?",
    "answer": "In React 16, errors that were not caught by any error boundary will result in unmounting of the whole React component tree. The reason behind this decision is that it is worse to leave corrupted UI in place than to completely remove it. For example, it is worse for a payments app to display a wrong amount than to render nothing. \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "General Programming",
    "question": "What is the proper placement for error boundaries?",
    "answer": "The granularity of error boundaries usage is up to the developer based on project needs. You can follow either of these approaches, \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What is the benefit of component stack trace from error boundary?",
    "answer": "Apart from error messages and javascript stack, React16 will display the component stack trace with file names and line numbers using error boundary concept. For example, BuggyCounter component displays the component stack trace as below,  \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "What are default props?",
    "answer": "The defaultProps can be defined as a property on the component to set the default values for the props. These default props are used when props not supplied(i.e., undefined props), but not for null or 0 as props. That means, If you provide null value then it remains null value. It's the same behavior with 0 as well. For example, let us create color default prop for the button component, ```javascript\n function MyButton {\n   // ...\n } MyButton.defaultProps = {\n   color: \"red\",\n };\n ``` If props.color is not provided then it will set the default value to 'red'. i.e, Whenever you try to access the color prop it uses the default value javascript\n function MyButton() {\n   return <MyButton />; // props.color will contain red value\n } \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is the purpose of displayName class property?",
    "answer": "The displayName string is used in debugging messages. Usually, you don\u2019t need to set it explicitly because it\u2019s inferred from the name of the function or class that defines the component. You might want to set it explicitly if you want to display a different name for debugging purposes or when you create a higher-order component. For example, To ease debugging, choose a display name that communicates that it\u2019s the result of a withSubscription HOC. javascript\n function withSubscription(WrappedComponent) {\n   class WithSubscription extends React.Component {\n     /* ... */\n   }\n   WithSubscription.displayName = `WithSubscription(${getDisplayName(\n     WrappedComponent\n   )})`;\n   return WithSubscription;\n }\n function getDisplayName(WrappedComponent) {\n   return (\n     WrappedComponent.displayName || WrappedComponent.name || \"Component\"\n   );\n } \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "React",
    "question": "What is the browser support for react applications?",
    "answer": "React supports all popular browsers, including Internet Explorer 9 and above, although some polyfills are required for older browsers such as IE 9 and IE 10. If you use es5-shim and es5-sham polyfill then it even support old browsers that doesn't support ES5 methods. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is code-splitting?",
    "answer": "Code-Splitting is a feature supported by bundlers like Webpack and Browserify which can create multiple bundles that can be dynamically loaded at runtime. The react project supports code splitting via dynamic import() feature. For example, in the below code snippets, it will make moduleA.js and all its unique dependencies as a separate chunk that only loads after the user clicks the 'Load' button. moduleA.js ```javascript\n const moduleA = \"Hello\"; export { moduleA };\n ``` App.js ```javascript\n export default function App {\n   function handleClick() {\n     import(\"./moduleA\")\n       .then(({ moduleA }) => {\n         // Use moduleA\n       })\n       .catch((err) => {\n         // Handle failure\n       });\n   }; return (\n    \nLoad\n\n  );\n }\n ``` ```javascript\n    import React, { Component } from \"react\";\n\n     class App extends Component {\n       handleClick = () => {\n         import(\"./moduleA\")\n           .then(({ moduleA }) => {\n             // Use moduleA\n           })\n           .catch((err) => {\n             // Handle failure\n           });\n       };\n\n       render() {\n         return (\n           \nLoad\n\n         );\n       }\n     }\n\n     export default App;\n  ``` \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "What are Keyed Fragments?",
    "answer": "The Fragments declared with the explicit  syntax may have keys. The general use case is mapping a collection to an array of fragments as below, javascript\n function Glossary(props) {\n   return (\n     <dl>\n       {props.items.map((item) => (\n         // Without the `key`, React will fire a key warning\n         <React.Fragment key={item.id}>\n           <dt>{item.term}</dt>\n           <dd>{item.description}</dd>\n         </React.Fragment>\n       ))}\n     </dl>\n   );\n } Note: key is the only attribute that can be passed to Fragment. In the future, there might be a support for additional attributes, such as event handlers. \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "React",
    "question": "Does React support all HTML attributes?",
    "answer": "As of React 16, both standard or custom DOM attributes are fully supported. Since React components often take both custom and DOM-related props, React uses the camelCase convention just like the DOM APIs. Let us take few props with respect to standard HTML attributes, javascript\n <div tabIndex=\"-1\" />      // Just like node.tabIndex DOM API\n <div className=\"Button\" /> // Just like node.className DOM API\n <input readOnly={true} />  // Just like node.readOnly DOM API These props work similarly to the corresponding HTML attributes, with the exception of the special cases. It also support all SVG attributes. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "When component props defaults to true?",
    "answer": "If you pass no value for a prop, it defaults to true. This behavior is available so that it matches the behavior of HTML. For example, below expressions are equivalent, ```javascript ``` Note: It is not recommended to use this approach because it can be confused with the ES6 object shorthand (example, {name} which is short for {name: name}) \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is NextJS and major features of it?",
    "answer": "Next.js is a popular and lightweight framework for static and server\u2011rendered applications built with React. It also provides styling and routing solutions. Below are the major features provided by NextJS, \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "React",
    "question": "How do you pass an event handler to a component?",
    "answer": "You can pass event handlers and other functions as props to child components. The functions can be passed to child component as below, ```jsx\n function Button({ onClick }) {\n   return Download;\n } export default function downloadExcel() {\n   function handleClick() {\n     alert(\"Downloaded\");\n   } return ;\n }\n ``` \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "How to prevent a function from being called multiple times?",
    "answer": "If you use an event handler such as onClick or onScroll and want to prevent the callback from being fired too quickly, then you can limit the rate at which callback is executed. This can be achieved in the below possible ways, \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "How JSX prevents Injection Attacks?",
    "answer": "React DOM escapes any values embedded in JSX before rendering them. Thus it ensures that you can never inject anything that\u2019s not explicitly written in your application. Everything is converted to a string before being rendered. For example, you can embed user input as below, javascript\n const name = response.potentiallyMaliciousInput;\n const element = <h1>{name}</h1>; This way you can prevent XSS(Cross-site-scripting) attacks in the application. \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "General Programming",
    "question": "How do you update rendered elements?",
    "answer": "You can update UI(represented by rendered element) by passing the newly created element to ReactDOM's render method. For example, lets take a ticking clock example, where it updates the time by calling render method multiple times, ```javascript\n function tick() {\n   const element = (\n     \nHello, world!\nIt is {new Date().toLocaleTimeString()}.\n\n   );\n   ReactDOM.render(element, document.getElementById(\"root\"));\n }",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "It is {new Date().toLocaleTimeString()}.",
    "answer": "setInterval(tick, 1000);\n ``` \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "How do you say that props are readonly?",
    "answer": "When you declare a component as a function or a class, it must never modify its own props. Let us take a below capital function, javascript\n function capital(amount, interest) {\n   return amount + interest;\n } The above function is called \u201cpure\u201d because it does not attempt to change their inputs, and always return the same result for the same inputs. Hence, React has a single rule saying \"All React components must act like pure functions with respect to their props.\" \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What are the conditions to safely use the index as a key?",
    "answer": "There are three conditions to make sure, it is safe use the index as a key. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "Should keys be globally unique?",
    "answer": "The keys used within arrays should be unique among their siblings but they don\u2019t need to be globally unique. i.e, You can use the same keys with two different arrays. For example, the below Book component uses two arrays with different arrays, javascript\n function Book(props) {\n   const index = (\n     <ul>\n       {props.pages.map((page) => (\n         <li key={page.id}>{page.title}</li>\n       ))}\n     </ul>\n   );\n   const content = props.pages.map((page) => (\n     <div key={page.id}>\n       <h3>{page.title}</h3>\n       <p>{page.content}</p>\n       <p>{page.pageNumber}</p>\n     </div>\n   ));\n   return (\n     <div>\n       {index}\n       <hr />\n       {content}\n     </div>\n   );\n } \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "General Programming",
    "question": "What is the popular choice for form handling?",
    "answer": "Formik is a form library for react which provides solutions such as validation, keeping track of the visited fields, and handling form submission. In detail, You can categorize them as follows, It is used to create a scalable, performant, form helper with a minimal API to solve annoying stuff. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What are the advantages of formik over redux form library?",
    "answer": "Below are the main reasons to recommend formik over redux form library, \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "Why are you not required to use inheritance?",
    "answer": "In React, it is recommended to use composition over inheritance to reuse code between components. Both Props and composition give you all the flexibility you need to customize a component\u2019s look and behavior explicitly and safely.\n Whereas, If you want to reuse non-UI functionality between components, it is suggested to extract it into a separate JavaScript module. Later components import it and use that function, object, or class, without extending it. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "Can I use web components in react application?",
    "answer": "Yes, you can use web components in a react application. Even though many developers won't use this combination, it may require especially if you are using third-party UI components that are written using Web Components. For example, let us use Vaadin date picker web component as below, javascript\n import \"./App.css\";\n import \"@vaadin/vaadin-date-picker\";\n export default function App() {\n   return (\n     <div className=\"App\">\n       <vaadin-date-picker label=\"When were you born?\"></vaadin-date-picker>\n     </div>\n   );\n } \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is dynamic import?",
    "answer": "You can achieve code-splitting in your app using dynamic import. Let's take an example of addition, javascript\n import { add } from \"./math\";\n console.log(add(10, 20)); javascript\n import(\"./math\").then((math) => {\n   console.log(math.add(10, 20));\n }); \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "React",
    "question": "What are loadable components?",
    "answer": "With the release of React 18, React.lazy and Suspense are now available for server-side rendering. However, prior to React 18, it was recommended to use Loadable Components for code-splitting in a server-side rendered app because React.lazy and Suspense were not available for server-side rendering. Loadable Components lets you render a dynamic import as a regular component. For example, you can use Loadable Components to load the OtherComponent in a separate bundle like this: ```javascript\n import loadable from \"@loadable/component\"; const OtherComponent = loadable(() => import(\"./OtherComponent\")); function MyComponent() {\n   return (\n     \n\n\n   );\n }\n ``` Now OtherComponent will be loaded in a separated bundle\n Loadable Components provides additional benefits beyond just code-splitting, such as automatic code reloading, error handling, and preloading. By using Loadable Components, you can ensure that your application loads quickly and efficiently, providing a better user experience for your users. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What is suspense component?",
    "answer": "If the module containing the dynamic import is not yet loaded by the time parent component renders, you must show some fallback content while you\u2019re waiting for it to load using a loading indicator. This can be done using Suspense component. For example, the below code uses suspense component, ```javascript\n const OtherComponent = React.lazy(() => import(\"./OtherComponent\")); function MyComponent() {\n   return (\n     \nLoading...\\}>\n         \n\n\n   );\n }\n ``` As mentioned in the above code, Suspense is wrapped above the lazy component. \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "General Programming",
    "question": "What is route based code splitting?",
    "answer": "One of the best place to do code splitting is with routes. The entire page is going to re-render at once so users are unlikely to interact with other elements in the page at the same time. Due to this, the user experience won't be disturbed. Let us take an example of route based website using libraries like React Router with React.lazy, ```javascript\n import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n import React, { Suspense, lazy } from \"react\"; const Home = lazy(() => import(\"./routes/Home\"));\n const About = lazy(() => import(\"./routes/About\")); const App = () => (\n   \nLoading...\\}>\n       \n\n\n\n\n\n );\n ``` In the above code, the code splitting will happen at each route level. \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "General Programming",
    "question": "What is the purpose of default value in context?",
    "answer": "The defaultValue argument is only used when a component does not have a matching Provider above it in the tree. This can be helpful for testing components in isolation without wrapping them. Below code snippet provides default theme value as Luna. javascript\n const MyContext = React.createContext(defaultValue); \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is diffing algorithm?",
    "answer": "React needs to use algorithms to find out how to efficiently update the UI to match the most recent tree. The diffing algorithms is generating the minimum number of operations to transform one tree into another. However, the algorithms have a complexity in the order of O(n\u00b3) where n is the number of elements in the tree. In this case, displaying 1000 elements would require in the order of one billion comparisons. This is far too expensive. Instead, React implements a heuristic O(n) algorithm based on two assumptions: \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "What are the rules covered by diffing algorithm?",
    "answer": "When diffing two trees, React first compares the two root elements. The behavior is different depending on the types of the root elements. It covers the below rules during reconciliation algorithm, DOM Elements Of The Same Type:\n    When comparing two React DOM elements of the same type, React looks at the attributes of both, keeps the same underlying DOM node, and only updates the changed attributes. Lets take an example with same DOM elements except className attribute, ```javascript ``` Component Elements Of The Same Type:\n    When a component updates, the instance stays the same, so that state is maintained across renders. React updates the props of the underlying component instance to match the new element, and calls componentWillReceiveProps() and componentWillUpdate() on the underlying instance. After that, the render() method is called and the diff algorithm recurses on the previous result and the new result. Recursing On Children:\n    when recursing on the children of a DOM node, React just iterates over both lists of children at the same time and generates a mutation whenever there\u2019s a difference. For example, when adding an element at the end of the children, converting between these two trees works well. ```javascript\n\nfirst\nsecond - first - second first\nsecond\nthird - first - second - third ``` Handling keys:\n    React supports a key attribute. When children have keys, React uses the key to match children in the original tree with children in the subsequent tree. For example, adding a key can make the tree conversion efficient, ```javascript\n \nDuke\nVillanova - Duke - Villanova Connecticut\nDuke\nVillanova\n\n ``` - Connecticut - Duke - Villanova \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "When do you need to use refs?",
    "answer": "There are few use cases to go for refs, \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "Must prop be named as render for render props?",
    "answer": "Even though the pattern named render props, you don\u2019t have to use a prop named render to use this pattern. i.e, Any prop that is a function that a component uses to know what to render is technically a \u201crender prop\u201d. Lets take an example with the children prop for render props, javascript\n <Mouse\n   children={(mouse) => (\n     <p>\n       The mouse position is {mouse.x}, {mouse.y}\n     </p>\n   )}\n /> Actually children prop doesn\u2019t need to be named in the list of \u201cattributes\u201d in JSX element. Instead, you can keep it directly inside element, javascript\n <Mouse>\n   {(mouse) => (\n     <p>\n       The mouse position is {mouse.x}, {mouse.y}\n     </p>\n   )}\n </Mouse> While using this above technique(without any name), explicitly state that children should be a function in your propTypes. javascript\n Mouse.propTypes = {\n   children: PropTypes.func.isRequired,\n }; \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What are the problems of using render props with pure components?",
    "answer": "If you create a function inside a render method, it negates the purpose of pure component. Because the shallow prop comparison will always return false for new props, and each render in this case will generate a new value for the render prop. You can solve this issue by defining the render function as instance method. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is windowing technique?",
    "answer": "Windowing is a technique that only renders a small subset of your rows at any given time, and can dramatically reduce the time it takes to re-render the components as well as the number of DOM nodes created. If your application renders long lists of data then this technique is recommended. Both react-window and react-virtualized are popular windowing libraries which provides several reusable components for displaying lists, grids, and tabular data. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "How do you print falsy values in JSX?",
    "answer": "The falsy values such as false, null, undefined, and true are valid children but they don't render anything. If you still want to display them then you need to convert it to string. Let's take an example on how to convert to a string, javascript\n <div>My JavaScript variable is {String(myVariable)}.</div> \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "General Programming",
    "question": "What is the typical use case of portals?",
    "answer": "React portals are very useful when a parent component has overflow: hidden or has properties that affect the stacking context (e.g. z-index, position, opacity) and you need to visually \u201cbreak out\u201d of its container. For example, dialogs, global message notifications, hovercards, and tooltips. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How do you set default value for uncontrolled component?",
    "answer": "In React, the value attribute on form elements will override the value in the DOM. With an uncontrolled component, you might want React to specify the initial value, but leave subsequent updates uncontrolled. To handle this case, you can specify a defaultValue attribute instead of value. javascript\n render() {\n   return (\n     <form onSubmit={this.handleSubmit}>\n       <label>\n         User Name:\n         <input\n           defaultValue=\"John\"\n           type=\"text\"\n           ref={this.input} />\n       </label>\n       <input type=\"submit\" value=\"Submit\" />\n     </form>\n   );\n } The same applies for select and textArea inputs. But you need to use defaultChecked for checkbox and radio inputs. \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "React",
    "question": "What is your favorite React stack?",
    "answer": "Even though the tech stack varies from developer to developer, the most popular stack is used in react boilerplate project code. It mainly uses Redux and redux-saga for state management and asynchronous side-effects, react-router for routing purpose, styled-components for styling react components, axios for invoking REST api, and other supported stack such as webpack, reselect, ESNext, Babel.\n You can clone the project https://github.com/react-boilerplate/react-boilerplate and start working on any new react project. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is the difference between Real DOM and Virtual DOM?",
    "answer": "Below are the main differences between Real DOM and Virtual DOM, | Real DOM                             | Virtual DOM                          |\n | ------------------------------------ | ------------------------------------ |\n | Updates are slow                     | Updates are fast                     |\n | DOM manipulation is very expensive.  | DOM manipulation is very easy        |\n | You can update HTML directly.        | You Can\u2019t directly update HTML       |\n | It causes too much of memory wastage | There is no memory wastage           |\n | Creates a new DOM if element updates | It updates the JSX if element update | \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How to add Bootstrap to a react application?",
    "answer": "Bootstrap can be added to your React app in a three possible ways, \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "React",
    "question": "Can you list down top websites or applications using react as front end framework?",
    "answer": "Below are the top 10 websites using React as their front-end framework, \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "React",
    "question": "Is it recommended to use CSS In JS technique in React?",
    "answer": "React does not have any opinion about how styles are defined but if you are a beginner then good starting point is to define your styles in a separate *.css file as usual and refer to them using className. This functionality is not part of React but came from third-party libraries. But If you want to try a different approach(CSS-In-JS) then styled-components library is a good option. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "Do I need to rewrite all my class components with hooks?",
    "answer": "No. But you can try Hooks in a few components(or new components) without rewriting any existing code. Because there are no plans to remove classes in ReactJS. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How to fetch data with React Hooks?",
    "answer": "The effect hook called useEffect can be used to fetch data from an API and to set the data in the local state of the component with the useState hook\u2019s update function. Here is an example of fetching a list of react articles from an API using fetch. ```javascript\n import React from \"react\"; function App() {\n   const [data, setData] = React.useState({ hits: [] }); React.useEffect(() => {\n     fetch(\"http://hn.algolia.com/api/v1/search?query=react\")\n       .then((response) => response.json())\n       .then((data) => setData(data));\n   }, []); return (\n     \n       {data.hits.map((item) => (\n         \n{item.title}\n\n       ))}\n     \n   );\n } - {item.title} export default App;\n ``` A popular way to simplify this is by using the library axios. We provided an empty array as second argument to the useEffect hook to avoid activating it on component updates. This way, it only fetches on component mount. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "Is Hooks cover all use cases for classes?",
    "answer": "Hooks doesn't cover all use cases of classes but there is a plan to add them soon. Currently there are no Hook equivalents to the uncommon getSnapshotBeforeUpdate and componentDidCatch lifecycles yet. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What is the stable release for hooks support?",
    "answer": "React includes a stable implementation of React Hooks in 16.8 release for below packages \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "Why do we use array destructuring (square brackets notation) in useState?",
    "answer": "When we declare a state variable with useState, it returns a pair \u2014 an array with two items. The first item is the current value, and the second is a function that updates the value. Using [0] and [1] to access them is a bit confusing because they have a specific meaning. This is why we use array destructuring instead. For example, the array index access would look as follows: javascript\n var userStateVariable = useState(\"userProfile\"); // Returns an array pair\n var user = userStateVariable[0]; // Access first item\n var setUser = userStateVariable[1]; // Access second item Whereas with array destructuring the variables can be accessed as follows: javascript\n const [user, setUser] = useState(\"userProfile\"); \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What are the sources used for introducing hooks?",
    "answer": "Hooks got the ideas from several different sources. Below are some of them, \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How do you access imperative API of web components?",
    "answer": "Web Components often expose an imperative API to implement its functions. You will need to use a ref to interact with the DOM node directly if you want to access imperative API of a web component. But if you are using third-party Web Components, the best solution is to write a React component that behaves as a wrapper for your Web Component. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is formik?",
    "answer": "Formik is a small react form library that helps you with the three major problems, \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "General Programming",
    "question": "What are typical middleware choices for handling asynchronous calls in Redux?",
    "answer": "Some of the popular middleware choices for handling asynchronous calls in Redux eco system are Redux Thunk, Redux Promise, Redux Saga. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "Do browsers understand JSX code?",
    "answer": "No, browsers can't understand JSX code. You need a transpiler to convert your JSX to regular Javascript that browsers can understand. The most widely used transpiler right now is Babel. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "Describe about data flow in react?",
    "answer": "React implements one-way reactive data flow using props which reduce boilerplate and is easier to understand than traditional two-way data binding. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is MobX?",
    "answer": "MobX is a simple, scalable and battle tested state management solution for applying functional reactive programming (TFRP). For ReactJS application, you need to install below packages,\n bash\n npm install mobx --save\n npm install mobx-react --save \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "General Programming",
    "question": "What are the differences between Redux and MobX?",
    "answer": "Below are the main differences between Redux and MobX, | Topic         | Redux                                                         | MobX                                                                   |\n | ------------- | ------------------------------------------------------------- | ---------------------------------------------------------------------- |\n | Definition    | It is a javascript library for managing the application state | It is a library for reactively managing the state of your applications |\n | Programming   | It is mainly written in ES6                                   | It is written in JavaScript(ES5)                                       |\n | Data Store    | There is only one large store exist for data storage          | There is more than one store for storage                               |\n | Usage         | Mainly used for large and complex applications                | Used for simple applications                                           |\n | Performance   | Need to be improved                                           | Provides better performance                                            |\n | How it stores | Uses JS Object to store                                       | Uses observable to store the data                                      | \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "Should I learn ES6 before learning ReactJS?",
    "answer": "No, you don\u2019t have to learn es2015/es6 to learn react. But you may find many resources or React ecosystem uses ES6 extensively. Let's see some of the frequently used ES6 features, Destructuring: To get props and use them in a component ```javascript\n// in es 5\nvar someData = this.props.someData;\nvar dispatch = this.props.dispatch; // in es6\nconst { someData, dispatch } = this.props;\n``` Spread operator: Helps in passing props down into a component ```javascript\n// in es 5 // in es6\n\n``` Arrow functions: Makes compact syntax\n    javascript\n    // es 5\n    var users = usersList.map(function (user) {\n      return <li>{user.name}</li>;\n    });\n    // es 6\n    const users = usersList.map((user) => <li>{user.name}</li>); \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "What is Concurrent Rendering?",
    "answer": "The Concurrent rendering makes React apps to be more responsive by rendering component trees without blocking the main UI thread. It allows React to interrupt a long-running render to handle a high-priority event. i.e, When you enabled concurrent Mode, React will keep an eye on other tasks that need to be done, and if there's something with a higher priority it will pause what it is currently rendering and let the other task finish first. You can enable this in two ways, ```javascript\n // 1. Part of an app by wrapping with ConcurrentMode\n \n\n; // 2. Whole app using createRoot\n ReactDOM.unstable_createRoot(domNode).render();\n ``` \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "What is the difference between async mode and concurrent mode?",
    "answer": "Both refers the same thing. Previously concurrent Mode being referred to as \"Async Mode\" by React team. The name has been changed to highlight React\u2019s ability to perform work on different priority levels. So it avoids the confusion from other approaches to Async Rendering. \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "React",
    "question": "Can I use javascript urls in react16.9?",
    "answer": "Yes, you can use javascript: URLs but it will log a warning in the console. Because URLs starting with javascript: are dangerous by including unsanitized output in a tag like <a href> and create a security hole. javascript\n const companyProfile = {\n   website: \"javascript: alert('Your website is hacked')\",\n };\n // It will log a warning\n <a href={companyProfile.website}>More details</a>; Remember that the future versions will throw an error for javascript URLs. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What is the purpose of eslint plugin for hooks?",
    "answer": "The ESLint plugin enforces rules of Hooks to avoid bugs. It assumes that any function starting with \u201duse\u201d and a capital letter right after it is a Hook. In particular, the rule enforces that, \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "React",
    "question": "What is the difference between Imperative and Declarative in React?",
    "answer": "Imagine a simple UI component, such as a \"Like\" button. When you tap it, it turns blue if it was previously grey, and grey if it was previously blue. The imperative way of doing this would be: javascript\n if (user.likes()) {\n   if (hasBlue()) {\n     removeBlue();\n     addGrey();\n   } else {\n     removeGrey();\n     addBlue();\n   }\n } Basically, you have to check what is currently on the screen and handle all the changes necessary to redraw it with the current state, including undoing the changes from the previous state. You can imagine how complex this could be in a real-world scenario. In contrast, the declarative approach would be: javascript\n if (this.state.liked) {\n   return <blueLike />;\n } else {\n   return <greyLike />;\n } Because the declarative approach separates concerns, this part of it only needs to handle how the UI should look in a specific state, and is therefore much simpler to understand. \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "React",
    "question": "What are the benefits of using TypeScript with ReactJS?",
    "answer": "Below are some of the benefits of using TypeScript with ReactJS, \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "How do you make sure that user remains authenticated on page refresh while using Context API State Management?",
    "answer": "When a user logs in and reload, to persist the state generally we add the load user action in the useEffect hooks in the main App.js. While using Redux, loadUser action can be easily accessed. App.js js\n import { loadUser } from \"../actions/auth\";\n store.dispatch(loadUser()); - But while using Context API, to access context in App.js, wrap the AuthState in index.js so that App.js can access the auth context. Now whenever the page reloads, no matter what route you are on, the user will be authenticated as loadUser action will be triggered on each re-render. index.js ```js\n import React from \"react\";\n import ReactDOM from \"react-dom\";\n import App from \"./App\";\n import AuthState from \"./context/auth/AuthState\"; ReactDOM.render(\n   \n\n\n\n,\n   document.getElementById(\"root\")\n );\n ``` App.js ```js\n const authContext = useContext(AuthContext); const { loadUser } = authContext; useEffect(() => {\n   loadUser();\n }, []);\n ``` loadUser ```js\n const loadUser = async () => {\n   const token = sessionStorage.getItem(\"token\"); if (!token) {\n     dispatch({\n       type: ERROR,\n     });\n   }\n   setAuthToken(token); try {\n     const res = await axios(\"/api/auth\"); } catch (err) {\n     console.error(err);\n   }\n };\n ``` \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "What are the benefits of new JSX transform?",
    "answer": "There are three major benefits of new JSX transform, \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "How is the new JSX transform different from old transform??",
    "answer": "The new JSX transform doesn\u2019t require React to be in scope. i.e, You don't need to import React package for simple scenarios. Let's take an example to look at the main differences between the old and the new transform, Old Transform: ```js\n import React from \"react\"; function App() {\n   return Good morning!!;\n }\n ``` Now JSX transform convert the above code into regular JavaScript as below, ```js\n import React from \"react\"; function App() {\n   return React.createElement(\"h1\", null, \"Good morning!!\");\n }\n ``` New Transform: The new JSX transform doesn't require any React imports js\n function App() {\n   return <h1>Good morning!!</h1>;\n } Under the hood JSX transform compiles to below code ```js\n import { jsx as _jsx } from \"react/jsx-runtime\"; function App() {\n   return _jsx(\"h1\", { children: \"Good morning!!\" });\n }\n ``` Note: You still need to import React to use Hooks. \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "React",
    "question": "What are React Server components?",
    "answer": "React Server Component is a way to write React component that gets rendered in the server-side with the purpose of improving React app performance. These components allow us to load components from the backend. Note: React Server Components is still under development and not recommended for production yet. \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "What is prop drilling?",
    "answer": "Prop Drilling is the process by which you pass data from one component of the React Component tree to another by going through other components that do not need the data but only help in passing it around. \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "React",
    "question": "What is the difference between useState and useRef hook?",
    "answer": "\u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "React",
    "question": "What is a wrapper component?",
    "answer": "A wrapper in React is a component that wraps or surrounds another component or group of components. It can be used for a variety of purposes such as adding additional functionality, styling, or layout to the wrapped components. For example, consider a simple component that displays a message: javascript\n const Message = ({ text }) => {\n   return <p>{text}</p>;\n }; We can create a wrapper component that will add a border to the message component: javascript\n const MessageWrapper = (props) => {\n   return (\n     <div style={{ border: \"1px solid black\" }}>\n       <Message {...props} />\n     </div>\n   );\n }; Now we can use the MessageWrapper component instead of the Message component and the message will be displayed with a border: javascript\n <MessageWrapper text=\"Hello World\" /> Wrapper component can also accept its own props and pass them down to the wrapped component, for example, we can create a wrapper component that will add a title to the message component: javascript\n const MessageWrapperWithTitle = ({ title, ...props }) => {\n   return (\n     <div>\n       <h3>{title}</h3>\n       <Message {...props} />\n     </div>\n   );\n }; Now we can use the MessageWrapperWithTitle component and pass title props: javascript\n <MessageWrapperWithTitle title=\"My Message\" text=\"Hello World\" /> This way, the wrapper component can add additional functionality, styling, or layout to the wrapped component while keeping the wrapped component simple and reusable. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What are the differences between useEffect and useLayoutEffect hooks?",
    "answer": "useEffect and useLayoutEffect are both React hooks that can be used to synchronize a component with an external system, such as a browser API or a third-party library. However, there are some key differences between the two: - Timing: useEffect runs after the browser has finished painting, while useLayoutEffect runs synchronously before the browser paints. This means that useLayoutEffect can be used to measure and update layout in a way that feels more synchronous to the user. - Browser Paint: useEffect allows browser to paint the changes before running the effect, hence it may cause some visual flicker. useLayoutEffect synchronously runs the effect before browser paints and hence it will avoid visual flicker. - Execution Order: The order in which multiple useEffect hooks are executed is determined by React and may not be predictable. However, the order in which multiple useLayoutEffect hooks are executed is determined by the order in which they were called. - Error handling: useEffect has a built-in mechanism for handling errors that occur during the execution of the effect, so that it does not crash the entire application. useLayoutEffect does not have this mechanism, and errors that occur during the execution of the effect will crash the entire application. Timing: useEffect runs after the browser has finished painting, while useLayoutEffect runs synchronously before the browser paints. This means that useLayoutEffect can be used to measure and update layout in a way that feels more synchronous to the user. Browser Paint: useEffect allows browser to paint the changes before running the effect, hence it may cause some visual flicker. useLayoutEffect synchronously runs the effect before browser paints and hence it will avoid visual flicker. Execution Order: The order in which multiple useEffect hooks are executed is determined by React and may not be predictable. However, the order in which multiple useLayoutEffect hooks are executed is determined by the order in which they were called. Error handling: useEffect has a built-in mechanism for handling errors that occur during the execution of the effect, so that it does not crash the entire application. useLayoutEffect does not have this mechanism, and errors that occur during the execution of the effect will crash the entire application. In general, it's recommended to use useEffect as much as possible, because it is more performant and less prone to errors. useLayoutEffect should only be used when you need to measure or update layout, and you can't achieve the same result using useEffect. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What are the differences between Functional and Class Components?",
    "answer": "There are two different ways to create components in ReactJS. The main differences are listed down as below, ## 1. Syntax: The class components uses ES6 classes to create the components. It uses render function to display the HTML content in the webpage. The syntax for class component looks like as below. js\n class App extends React.Component {\n   render() {\n     return <h1>This is a class component</h1>;\n   }\n } Note: The Pascal Case is the recommended approach to provide naming to a component. Functional component has been improved over the years with some added features like Hooks. Here is a syntax for functional component. js\n function App() {\n   return (\n     <div className=\"App\">\n       <h1>Hello, I'm a function component</h1>\n     </div>\n   );\n } ## 2. State: State contains information or data about a component which may change over time. In class component, you can update the state when a user interacts with it or server updates the data using the setState() method. The initial state is going to be assigned in the Constructor() method using the this.state object and it is possible to assign different data types such as string, boolean, numbers, etc. A simple example showing how we use the setState() and constructor(): ```js\n class App extends Component {\n   constructor() {\n     super();\n     this.state = {\n       message: \"This is a class component\",\n     };\n   }\n   updateMessage() {\n     this.setState({\n       message: \"Updating the class component\",\n     });\n   }\n   render() {\n     return (\n       <>\n         {this.state.message}\n {\n             this.updateMessage();\n           }}>\n           Click!!\n         \n\n     );\n   }\n } ``` You didn't use state in functional components because it was only supported in class components. But over the years hooks have been implemented in functional components which enables to use state too. The useState() hook can used to implement state in functional components. It returns an array with two items: the first item is current state and the next one is a function (setState) that updates the value of the current state. Let's see an example to demonstrate the state in functional components, js\n function App() {\n   const [message, setMessage] = useState(\"This is a functional component\");\n   const updateMessage = () => {\n     setMessage(\"Updating the functional component\");\n   };\n   return (\n     <div className=\"App\">\n       <h1>{message} </h1>\n       <button onClick={updateMessage}>Click me!!</button>\n     </div>\n   );\n } ## 3. Props: Props are referred to as \"properties\". The props are passed into React component just like arguments passed to a function. In other words, they are similar to HTML attributes. The props are accessible in child class component using this.props as shown in below example, ```js\n class Child extends React.Component {\n   render() {\n     return (\n       \n         {\" \"}\n         This is a functional component and component name is {\n           this.props.name\n         }{\" \"}\n       \n     );\n   }\n } class Parent extends React.Component {\n   render() {\n     return (\n       \n\n\n\n     );\n   }\n }\n ``` Props in functional components are similar to that of the class components but the difference is the absence of 'this' keyword. ```js\n function Child(props) {\n   return (\n     \n       This is a child component and the component name is{props.name}\n     \n   );\n } function Parent() {\n   return (\n     \n\n\n\n   );\n }\n ``` \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "React",
    "question": "What is strict mode in React?",
    "answer": "React.StrictMode is a useful component for highlighting potential problems in an application. Just like <Fragment>, <StrictMode> does not render any extra DOM elements. It activates additional checks and warnings for its descendants. These checks apply for development mode only. ```jsx harmony\n import { StrictMode } from \"react\"; function App() {\n   return (\n     \n\n\n\n\n\n\n\n\n\n   );\n }\n ``` In the example above, the strict mode checks apply to <ComponentOne> and <ComponentTwo> components only. i.e., Part of the application only. Note: Frameworks such as NextJS has this flag enabled by default. \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "General Programming",
    "question": "What is the benefit of strict mode?",
    "answer": "The  will be helpful in the below cases, \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "React",
    "question": "Why does strict mode render twice in React?",
    "answer": "StrictMode renders components twice in development mode(not production) in order to detect any problems with your code and warn you about those problems. This is used to detect accidental side effects in the render phase. If you used create-react-app development tool then it automatically enables StrictMode by default. js\n const root = createRoot(document.getElementById(\"root\"));\n root.render(\n   <StrictMode>\n     <App />\n   </StrictMode>\n ); If you want to disable this behavior then you can simply remove strict mode. js\n const root = createRoot(document.getElementById(\"root\"));\n root.render(<App />); To detect side effects the following functions are invoked twice: \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What are the rules of JSX?",
    "answer": "The below 3 rules needs to be followed while using JSX in a react application. Return a single root element:\n    If you are returning multiple elements from a component, wrap them in a single parent element. Otherwise you will receive the below error in your browser console. html Adjacent JSX elements must be wrapped in an enclosing tag. All the tags needs to be closed:\n    Unlike HTML, all tags needs to closed explicitly with in JSX. This rule applies for self-closing tags(like hr, br and img tags) as well. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is the reason behind multiple JSX tags to be wrapped?",
    "answer": "Behind the scenes, JSX is transformed into plain javascript objects. It is not possible to return two or more objects from a function without wrapping into an array. This is the reason you can't simply return two or more JSX tags from a function without\n  wrapping them into a single parent tag or a Fragment. \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "General Programming",
    "question": "How do you prevent mutating array variables?",
    "answer": "The preexisting variables outside of the function scope including state, props and context leads to a mutation and they result in unpredictable bugs during the rendering stage. The below points should be taken care while working with arrays variables. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What are capture phase events?",
    "answer": "The onClickCapture React event is helpful to catch all the events of child elements irrespective of event propagation logic or even if the events propagation stopped. This is useful if you need to log every click events for analytics purpose. For example, the below code triggers the click event of parent first followed by second level child eventhough leaf child button elements stops the propagation. jsx\n <div onClickCapture={() => alert(\"parent\")}>\n   <div onClickCapture={() => alert(\"child\")}>\n     <button onClick={(e) => e.stopPropagation()} />\n     <button onClick={(e) => e.stopPropagation()} />\n   </div>\n </div> The event propagation for the above code snippet happens in the following order:",
    "difficulty": "Easy"
  },
  {
    "technology": "React",
    "question": "How does React updates screen in an application?",
    "answer": "React updates UI in three steps, Triggering or initiating a render: The component is going to triggered for render in two ways. ```jsx\nimport { createRoot } from \"react-dom/client\"; const root = createRoot(document.getElementById(\"root\"));\nroot.render();\n``` Rendering components: After triggering a render, React will call your components to display them on the screen. React will call the root component for initial render and call the function component whose state update triggered the render. This is a recursive process for all nested components of the target component. Commit changes to DOM: After calling components, React will modify the DOM for initial render using appendChild() DOM API and apply minimal necessary DOM updates for re-renders based on differences between rerenders. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How does React batch multiple state updates?",
    "answer": "React prevents component from re-rendering for each and every state update by grouping multiple state updates within an event handler. This strategy improves the application performance and this process known as batching. The older version of React only supported batching for browser events whereas React18 supported for asynchronous actions, timeouts and intervals along with native events. This improved version of batching is called automatic batching. Let's demonstrate this automatic batching feature with a below example. ```jsx\n  import { useState } from \"react\"; export default function BatchingState() {\n    const [count, setCount] = useState(0);\n    const [message, setMessage] = useState(\"batching\"); }\n  ``` The preceding code updated two state variables with in an event handler. However, React will perform automatic batching feature and the component will be re-rendered only once for better performance. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "Is it possible to prevent automatic batching?",
    "answer": "Yes, it is possible to prevent automatic batching default behavior. There might be cases where you need to re-render your component after each state update or updating one state depends on another state variable. Considering this situation, React introduced flushSync method from react-dom API for the usecases where you need to flush state updates to DOM immediately. The usage of flushSync method within an onClick event handler will be looking like as below, ```jsx\n  import { flushSync } from \"react-dom\"; const handleClick = () => {\n    flushSync(() => {\n      setClicked(!clicked); //Component will create a re-render here\n    }); };\n  ``` In the above click handler, React will update DOM at first using flushSync and second time updates DOM because of the counter setter function by avoiding automatic batching. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What is React hydration?",
    "answer": "React hydration is used to add client-side JavaScript interactivity to pre-rendered static HTML generated by the server. It is used only for server-side rendering(SSR) to enhance the initial rendering time and make it SEO friendly application. This hydration acts as a bridge to reduce the gap between server side and client-side rendering. After the page loaded with generated static HTML, React will add application state and interactivity by attaching all event handlers for the respective elements. Let's demonstrate this with an example. Consider that React DOM API(using renderToString) generated HTML for <App> component which contains <button> element to increment the counter. ```jsx\n  import {useState} from 'react';\n  import { renderToString } from 'react-dom/server'; export default function App() {\n    const [count, setCount] = React.useState(0); } const html = renderToString();\n  ``` The above code generates the below HTML with a header text and button component without any interactivity. html\n  <h1>Counter</h1>\n  <button>\n    <!-- -->0<!-- -->\n    times\n  </button> At this stage hydrateRoot API can be used to perform hydration by attaching onClick event handler. ```jsx\n  import { hydrateRoot } from \"react-dom/client\";\n  import App from \"./App.js\"; hydrateRoot(document.getElementById(\"root\"), );\n  ``` After this step, you are able to run React application on server-side and hydrating the javascript bundle on client-side for smooth user experience and SEO purposes. \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "How do you update objects inside state?",
    "answer": "You cannot update the objects which exists in the state directly. Instead, you should create a fresh new object (or copy from the existing object) and update the latest state using the newly created object. Eventhough JavaScript objects are mutable, you need to treat objects inside state as read-only while updating the state. Let's see this comparison with an example. The issue with regular object mutation approach can be described by updating the user details fields of Profile component. The properties of Profile component such as firstName, lastName and age details mutated in an event handler as shown below. ```jsx\n  import { useState } from \"react\"; export default function Profile() {\n    const [user, setUser] = useState({\n      firstName: \"John\",\n      lastName: \"Abraham\",\n      age: 30,\n    }); }\n  ``` Once you run the application with above user profile component, you can observe that user profile details won't be update upon entering the input fields.\n  This issue can be fixed by creating a new copy of object which includes existing properties through spread syntax(...obj) and add changed values in a single event handler itself as shown below. jsx\n  handleProfileChange(e) {\n    setUser({\n    ...user,\n      [e.target.name]: e.target.value\n    });\n  } The above event handler is concise instead of maintaining separate event handler for each field. Now, UI displays the updated field values as expected without an issue. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "How do you update nested objects inside state?",
    "answer": "You cannot simply use spread syntax for all kinds of objects inside state. Because spread syntax is shallow and it copies properties for one level deep only. If the object has nested object structure, UI doesn't work as expected with regular JavaScript nested property mutation. Let's demonstrate this behavior with an example of User object which has address nested object inside of it. jsx\n  const user = {\n    name: \"John\",\n    age: 32,\n    address: {\n      country: \"Singapore\",\n      postalCode: 440004,\n    },\n  }; If you try to update the country nested field in a regular javascript fashion(as shown below) then user profile screen won't be updated with latest value. js\n  user.address.country = \"Germany\"; This issue can be fixed by flattening all the fields into a top-level object or create a new object for each nested object and point it to it's parent object. In this example, first you need to create copy of address object and update it with the latest value. Later, the address object should be linked to parent user object something like below. js\n  setUser({\n    ...user,\n    address: {\n      ...user.address,\n      country: \"Germany\",\n    },\n  }); This approach is bit verbose and not easy for deep hierarchical state updates. But this workaround can be used for few levels of nested objects without much hassle. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "How do you update arrays inside state?",
    "answer": "Eventhough arrays in JavaScript are mutable in nature, you need to treat them as immutable while storing them in a state. That means, similar to objects, the arrays cannot be updated directly inside state. Instead, you need to create a copy of the existing array and then set the state to use newly copied array. To ensure that arrays are not mutated, the mutation operations like direct direct assignment(arr[1]='one'), push, pop, shift, unshift, splice etc methods should be avoided on original array. Instead, you can create a copy of existing array with help of array operations such as filter, map, slice, spread syntax etc. For example, the below push operation doesn't add the new todo to the total todo's list in an event handler. jsx\n  onClick = {\n    todos.push({\n      id: id+1,\n      name: name\n    })\n  } This issue is fixed by replacing push operation with spread syntax where it will create a new array and the UI updated with new todo. jsx\n  onClick = {\n    [\n      ...todos,\n      { id: id+1, name: name }\n    ]\n  } \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "How do you use immer library for state updates?",
    "answer": "Immer library enforces the immutability of state based on copy-on-write mechanism. It uses JavaScript proxy to keep track of updates to immutable states. Immer has 3 main states as below, Immer can be used by following below instructions, For example, the mutation syntax of immer library simplifies the nested address object of user state as follows, ```jsx\n  import { useImmer } from \"use-immer\";\n  const [user, setUser] = useImmer({\n    name: \"John\",\n    age: 32,\n    address: {\n      country: \"Singapore\",\n      postalCode: 440004,\n    },\n  }); //Update user details upon any event\n  setUser((draft) => {\n    draft.address.country = \"Germany\";\n  });\n  ``` The preceding code enables you to update nested objects with a conceise mutation syntax. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What are the benefits of preventing the direct state mutations?",
    "answer": "\u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What are the preferred and non-preferred array operations for updating the state?",
    "answer": "The below table represent preferred and non-preferred array operations for updating the component state. | Action    | Preferred            | Non-preferred              |\n  | --------- | -------------------- | -------------------------- |\n  | Adding    | concat, [...arr]     | push, unshift              |\n  | Removing  | filter, slice        | pop, shift, splice         |\n  | Replacing | map                  | splice, arr[i] = someValue |\n  | sorting   | copying to new array | reverse, sort              | If you use Immer library then you can able to use all array methods without any problem. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What will happen by defining nested function components?",
    "answer": "Technically it is possible to write nested function components but it is not suggested to write nested function definitions. Because it leads to unexpected bugs and performance issues. \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "Can I use keys for non-list items?",
    "answer": "Keys are primarily used for rendering list items but they are not just for list items. You can also use them React to distinguish components. By default, React uses order of the components in \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "General Programming",
    "question": "What are the guidelines to be followed for writing reducers?",
    "answer": "There are two guidelines to be taken care while writing reducers in your code. Reducers must be pure without mutating the state. That means, same input always returns the same output. These reducers run during rendering time similar to state updater functions. So these functions should not send any requests, schedule time outs and any other side effects. Each action should describe a single user interaction eventhough there are multiple changes applied to data. For example, if you \"reset\" registration form which has many user input fields managed by a reducer, it is suggested to send one \"reset\" action instead of creating separate action for each fields. The proper ordering of actions should reflect the user interactions in the browser and it helps a lot for debugging purpose. \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "React",
    "question": "What is useReducer hook? Can you describe its usage?",
    "answer": "\u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "General Programming",
    "question": "How do you compare useState and useReducer?",
    "answer": "\u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How does context works using useContext hook?",
    "answer": "\u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What are the use cases of useContext hook?",
    "answer": "Some of the common use cases of useContext are listed below, \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "React",
    "question": "When to use client and server components?",
    "answer": "You can efficiently build nextjs application if you are aware about which part of the application needs to use client components and which other parts needs to use server components. The common cases of both client and server components are listed below: \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "What are the differences between page router and app router in nextjs?",
    "answer": "\u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "Why should we not update the state directly?",
    "answer": "If you try to update the state directly then it won't re-render the component. javascript\n   //Wrong\n   this.state.message = \"Hello world\"; Instead use setState() method. It schedules an update to a component's state object. When state changes, the component responds by re-rendering. javascript\n   //Correct\n   this.setState({ message: \"Hello World\" }); Note: You can directly assign to the state object either in constructor or using latest javascript's class field declaration syntax. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is the purpose of callback function as an argument of setState()?",
    "answer": "The callback function is invoked when setState finished and the component gets rendered. Since setState() is asynchronous the callback function is used for any post action. Note: It is recommended to use lifecycle method rather than this callback function. javascript\n   setState({ name: \"John\" }, () =>\n     console.log(\"The name has updated and component re-rendered\")\n   ); \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "How to bind methods or event handlers in JSX callbacks?",
    "answer": "There are 3 possible ways to achieve this in class components: Binding in Constructor: In JavaScript classes, the methods are not bound by default. The same rule applies for React event handlers defined as class methods. Normally we bind them in constructor. javascript\n  class User extends Component {\n    constructor(props) {\n      super(props);\n      this.handleClick = this.handleClick.bind(this);\n    }\n    handleClick() {\n      console.log(\"SingOut triggered\");\n    }\n    render() {\n      return <button onClick={this.handleClick}>SingOut</button>;\n    }\n  } Public class fields syntax: If you don't like to use bind approach then public class fields syntax can be used to correctly bind callbacks. The Create React App enables this syntax by default. jsx harmony\n  handleClick = () => {\n    console.log(\"SingOut triggered\", this);\n  }; jsx harmony\n  <button onClick={this.handleClick}>SingOut</button> Arrow functions in callbacks: It is possible to use arrow functions directly in the callbacks. jsx harmony\n  handleClick() {\n      console.log('SingOut triggered');\n  }\n  render() {\n      return <button onClick={() => this.handleClick()}>SignOut</button>;\n  } Note: If the callback is passed as prop to child components, those components might do an extra re-rendering. In those cases, it is preferred to go with .bind() or public class fields syntax approach considering performance. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "How to pass a parameter to an event handler or callback?",
    "answer": "You can use an arrow function to wrap around an event handler and pass parameters: jsx harmony\n   <button onClick={() => this.handleClick(id)} /> This is an equivalent to calling .bind: jsx harmony\n   <button onClick={this.handleClick.bind(this, id)} /> Apart from these two approaches, you can also pass arguments to a function which is defined as arrow function jsx harmony\n   <button onClick={this.handleClick(id)} />;\n   handleClick = (id) => () => {\n     console.log(\"Hello, your ticket number is\", id);\n   }; \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is the use of refs?",
    "answer": "The ref is used to return a reference to the element. They should be avoided in most cases, however, they can be useful when you need a direct access to the DOM element or an instance of a component. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "How to create refs?",
    "answer": "There are two approaches This is a recently added approach. Refs are created using React.createRef() method and attached to React elements via the ref attribute. In order to use refs throughout the component, just assign the ref to the instance property within constructor. jsx harmony\n  class MyComponent extends React.Component {\n    constructor(props) {\n      super(props);\n      this.myRef = React.createRef();\n    }\n    render() {\n      return <div ref={this.myRef} />;\n    }\n  } You can also use ref callbacks approach regardless of React version. For example, the search bar component's input element is accessed as follows,\n      jsx harmony\n      class SearchBar extends Component {\n        constructor(props) {\n          super(props);\n          this.txtSearch = null;\n          this.state = { term: \"\" };\n          this.setInputSearchRef = (e) => {\n            this.txtSearch = e;\n          };\n        }\n        onInputChange(event) {\n          this.setState({ term: this.txtSearch.value });\n        }\n        render() {\n          return (\n            <input\n              value={this.state.term}\n              onChange={this.onInputChange.bind(this)}\n              ref={this.setInputSearchRef}\n            />\n          );\n        }\n      } You can also use refs in function components using closures.\n   Note: You can also use inline ref callbacks even though it is not a recommended approach. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What are forward refs?",
    "answer": "Ref forwarding is a feature that lets some components take a ref they receive, and pass it further down to a child. ```jsx harmony\n   const ButtonElement = React.forwardRef((props, ref) => (\n     \n       {props.children}\n     \n   )); // Create ref to the DOM button:\n   const ref = React.createRef();\n   {\"Forward Ref\"};\n   ``` \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "Node.js",
    "question": "Which is preferred option with in callback refs and findDOMNode()?",
    "answer": "It is preferred to use callback refs over findDOMNode() API. Because findDOMNode() prevents certain improvements in React in the future. The legacy approach of using findDOMNode: ```javascript\n   class MyComponent extends Component {\n     componentDidMount() {\n       findDOMNode(this).scrollIntoView();\n     } }\n   ``` The recommended approach is: ```javascript\n   class MyComponent extends Component {\n     constructor(props) {\n       super(props);\n       this.node = createRef();\n     }\n     componentDidMount() {\n       this.node.current.scrollIntoView();\n     } }\n   ``` \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "Why are String Refs legacy?",
    "answer": "If you worked with React before, you might be familiar with an older API where the ref attribute is a string, like ref={'textInput'}, and the DOM node is accessed as this.refs.textInput. We advise against it because string refs have below issues, and are considered legacy. String refs were removed in React v16. It doesn't work as most people would expect with the \"render callback\" pattern (e.g. ) ```jsx harmony\n  class MyComponent extends Component {\n    renderRow = (index) => {\n      // This won't work. Ref will get attached to DataTable rather than MyComponent:\n      return ; }\n  ``` \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What are the different phases of component lifecycle?",
    "answer": "The component lifecycle has three distinct lifecycle phases: Mounting: The component is ready to mount in the browser DOM. This phase covers initialization from constructor(), getDerivedStateFromProps(), render(), and componentDidMount() lifecycle methods. Updating: In this phase, the component gets updated in two ways, sending the new props and updating the state either from setState() or forceUpdate(). This phase covers getDerivedStateFromProps(), shouldComponentUpdate(), render(), getSnapshotBeforeUpdate() and componentDidUpdate() lifecycle methods. Unmounting: In this last phase, the component is not needed and gets unmounted from the browser DOM. This phase includes componentWillUnmount() lifecycle method. It's worth mentioning that React internally has a concept of phases when applying changes to the DOM. They are separated as follows Render The component will render without any side effects. This applies to Pure components and in this phase, React can pause, abort, or restart the render. Pre-commit Before the component actually applies the changes to the DOM, there is a moment that allows React to read from the DOM through the getSnapshotBeforeUpdate(). Commit React works with the DOM and executes the final lifecycles respectively componentDidMount() for mounting, componentDidUpdate() for updating, and componentWillUnmount() for unmounting. React 16.3+ Phases (or an interactive version)  Before React 16.3  \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What are the lifecycle methods of React?",
    "answer": "Before React 16.3 - componentWillMount: Executed before rendering and is used for App level configuration in your root component. - componentDidMount: Executed after first rendering and here all AJAX requests, DOM or state updates, and set up event listeners should occur. - componentWillReceiveProps: Executed when particular prop updates to trigger state transitions. - shouldComponentUpdate: Determines if the component will be updated or not. By default it returns true. If you are sure that the component doesn't need to render after state or props are updated, you can return false value. It is a great place to improve performance as it allows you to prevent a re-render if component receives new prop. - componentWillUpdate: Executed before re-rendering the component when there are props & state changes confirmed by shouldComponentUpdate() which returns true. - componentDidUpdate: Mostly it is used to update the DOM in response to prop or state changes. - componentWillUnmount: It will be used to cancel any outgoing network requests, or remove all event listeners associated with the component. React 16.3+ - getDerivedStateFromProps: Invoked right before calling render() and is invoked on every render. This exists for rare use cases where you need a derived state. Worth reading if you need derived state. - componentDidMount: Executed after first rendering and where all AJAX requests, DOM or state updates, and set up event listeners should occur. - shouldComponentUpdate: Determines if the component will be updated or not. By default, it returns true. If you are sure that the component doesn't need to render after the state or props are updated, you can return a false value. It is a great place to improve performance as it allows you to prevent a re-render if component receives a new prop. - getSnapshotBeforeUpdate: Executed right before rendered output is committed to the DOM. Any value returned by this will be passed into componentDidUpdate(). This is useful to capture information from the DOM i.e. scroll position. - componentDidUpdate: Mostly it is used to update the DOM in response to prop or state changes. This will not fire if shouldComponentUpdate() returns false. - componentWillUnmount It will be used to cancel any outgoing network requests, or remove all event listeners associated with the component. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How to create props proxy for HOC component?",
    "answer": "You can add/edit props passed to the component using props proxy pattern like this: ```jsx harmony\nfunction HOC(WrappedComponent) {\n  return class Test extends Component {\n    render() {\n      const newProps = {\n        title: \"New Header\",\n        footer: false,\n        showFeatureX: false,\n        showFeatureY: true,\n      }; };\n}\n``` \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is context?",
    "answer": "Context provides a way to pass data through the component tree without having to pass props down manually at every level. For example, authenticated users, locale preferences, UI themes need to be accessed in the application by many components. javascript\nconst { Provider, Consumer } = React.createContext(defaultValue); \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is the purpose of using super constructor with props argument?",
    "answer": "A child class constructor cannot make use of this reference until the super() method has been called. The same applies to ES6 sub-classes as well. The main reason for passing props parameter to super() call is to access this.props in your child constructors. Passing props: ```javascript\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props); }\n}\n``` Not passing props: ```javascript\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(); } render() {\n    // no difference outside constructor\n    console.log(this.props); // prints { name: 'John', age: 42 }\n  }\n}\n``` The above code snippets reveals that this.props is different only within the constructor. It would be the same outside the constructor. \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "How to set state with a dynamic key name?",
    "answer": "If you are using ES6 or the Babel transpiler to transform your JSX code then you can accomplish this with computed property names. javascript\nhandleInputChange(event) {\n  this.setState({ [event.target.id]: event.target.value })\n} \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "React",
    "question": "What would be the common mistake of function being called every time the component renders?",
    "answer": "You need to make sure that function is not being called while passing the function as a parameter. jsx harmony\nrender() {\n  // Wrong: handleClick is called instead of passed as a reference!\n  return <button onClick={this.handleClick()}>{'Click Me'}</button>\n} Instead, pass the function itself without parenthesis: jsx harmony\nrender() {\n  // Correct: handleClick is passed as a reference!\n  return <button onClick={this.handleClick}>{'Click Me'}</button>\n} \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What are error boundaries in React v16?",
    "answer": "Error boundaries are components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed. A class component becomes an error boundary if it defines a new lifecycle method called componentDidCatch(error, info) or static getDerivedStateFromError(): ```jsx harmony\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  } componentDidCatch(error, info) {\n    // You can also log the error to an error reporting service\n    logErrorToMyService(error, info);\n  } static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  } render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return {\"Something went wrong.\"};\n    }\n    return this.props.children;\n  }\n}\n``` After that use it as a regular component: jsx harmony\n<ErrorBoundary>\n  <MyWidget />\n</ErrorBoundary> \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How are error boundaries handled in React v15?",
    "answer": "React v15 provided very basic support for error boundaries using unstable_handleError method. It has been renamed to componentDidCatch in React v16. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What is the purpose of render method of react-dom?",
    "answer": "This method is used to render a React element into the DOM in the supplied container and return a reference to the component. If the React element was previously rendered into container, it will perform an update on it and only mutate the DOM as necessary to reflect the latest changes. ReactDOM.render(element, container, [callback]) If the optional callback is provided, it will be executed after the component is rendered or updated. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What will happen if you use setState() in constructor?",
    "answer": "When you use setState(), then apart from assigning to the object state React also re-renders the component and all its children. You would get error like this: Can only update a mounted or mounting component. So we need to use this.state to initialize variables inside constructor. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "Is it good to use setState() in componentWillMount() method?",
    "answer": "Yes, it is safe to use setState() inside componentWillMount() method. But at the same it is recommended to avoid async initialization in componentWillMount() lifecycle method. componentWillMount() is invoked immediately before mounting occurs. It is called before render(), therefore setting state in this method will not trigger a re-render. Avoid introducing any side-effects or subscriptions in this method. We need to make sure async calls for component initialization happened in componentDidMount() instead of componentWillMount(). jsx harmony\ncomponentDidMount() {\n  axios.get(`api/todos`)\n    .then((result) => {\n      this.setState({\n        messages: [...result.data]\n      })\n    })\n} \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What will happen if you use props in initial state?",
    "answer": "If the props on the component are changed without the component being refreshed, the new prop value will never be displayed because the constructor function will never update the current state of the component. The initialization of state from props only runs when the component is first created. The below component won't display the updated input value: ```jsx harmony\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props); } render() {\n    return {this.state.inputValue};\n  }\n}\n``` Using props inside render method will update the value: ```jsx harmony\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props); } render() {\n    return {this.props.inputValue};\n  }\n}\n``` \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "React",
    "question": "How you use decorators in React?",
    "answer": "You can decorate your class components, which is the same as passing the component into a function. Decorators are flexible and readable way of modifying component functionality. ```jsx harmony\n@setTitle(\"Profile\")\nclass Profile extends React.Component {\n  //....\n} /\n  title is a string that will be set as a document title\n  WrappedComponent is what our decorator will receive when\n  put directly above a component class as seen in the example above\n/\nconst setTitle = (title) => (WrappedComponent) => {\n  return class extends React.Component {\n    componentDidMount() {\n      document.title = title;\n    } };\n};\n``` Note: Decorators are a feature that didn't make it into ES7, but are currently a stage 2 proposal. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is CRA and its benefits?",
    "answer": "The create-react-app CLI tool allows you to quickly create & run React applications with no configuration step. Let's create Todo App using CRA: ```console $ npm install -g create-react-app $ create-react-app todo-app\n$ cd todo-app $ npm run build\n$ npm run test\n$ npm start\n``` It includes everything we need to build a React app: \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is the lifecycle methods order in mounting?",
    "answer": "The lifecycle methods are called in the following order when an instance of a component is being created and inserted into the DOM. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What are the lifecycle methods going to be deprecated in React v16?",
    "answer": "The following lifecycle methods going to be unsafe coding practices and will be more problematic with async rendering. Starting with React v16.3 these methods are aliased with UNSAFE_ prefix, and the unprefixed version will be removed in React v17. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is the purpose of getDerivedStateFromProps() lifecycle method?",
    "answer": "The new static getDerivedStateFromProps() lifecycle method is invoked after a component is instantiated as well as before it is re-rendered. It can return an object to update state, or null to indicate that the new props do not require any state updates. javascript\nclass MyComponent extends React.Component {\n  static getDerivedStateFromProps(props, state) {\n    // ...\n  }\n} This lifecycle method along with componentDidUpdate() covers all the use cases of componentWillReceiveProps(). \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is the purpose of getSnapshotBeforeUpdate() lifecycle method?",
    "answer": "The new getSnapshotBeforeUpdate() lifecycle method is called right before DOM updates. The return value from this method will be passed as the third parameter to componentDidUpdate(). javascript\nclass MyComponent extends React.Component {\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    // ...\n  }\n} This lifecycle method along with componentDidUpdate() covers all the use cases of componentWillUpdate(). \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What is the recommended way for naming components?",
    "answer": "It is recommended to name the component by reference instead of using displayName. Using displayName for naming component: javascript\nexport default React.createClass({\n  displayName: \"TodoApp\",\n  // ...\n}); The recommended approach: javascript\nexport default class TodoApp extends React.Component {\n  // ...\n} also javascript\nconst TodoApp = () => {\n  //...\n};\nexport default TodoApp; \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What is the recommended ordering of methods in component class?",
    "answer": "Recommended ordering of methods from mounting to render stage: \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "Why we need to pass a function to setState()?",
    "answer": "The reason behind for this is that setState() is an asynchronous operation. React batches state changes for performance reasons, so the state may not change immediately after setState() is called. That means you should not rely on the current state when calling setState()\u200asince you can't be sure what that state will be. The solution is to pass a function to setState(), with the previous state as an argument. By doing this you can avoid issues with the user getting the old state value on access due to the asynchronous nature of setState(). Let's say the initial count value is zero. After three consecutive increment operations, the value is going to be incremented only by one. javascript\n// assuming this.state.count === 0\nthis.setState({ count: this.state.count + 1 });\nthis.setState({ count: this.state.count + 1 });\nthis.setState({ count: this.state.count + 1 });\n// this.state.count === 1, not 3 If we pass a function to setState(), the count gets incremented correctly. javascript\nthis.setState((prevState, props) => ({\n  count: prevState.count + props.increment,\n}));\n// this.state.count === 3 as expected (OR)",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "Why function is preferred over object for setState()?",
    "answer": "React may batch multiple setState() calls into a single update for performance. Because this.props and this.state may be updated asynchronously, you should not rely on their values for calculating the next state. This counter example will fail to update as expected: javascript\n// Wrong\nthis.setState({\n  counter: this.state.counter + this.props.increment,\n}); The preferred approach is to call setState() with function rather than object. That function will receive the previous state as the first argument, and the props at the time the update is applied as the second argument. javascript\n// Correct\nthis.setState((prevState, props) => ({\n  counter: prevState.counter + props.increment,\n})); \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "Why is isMounted() an anti-pattern and what is the proper solution?",
    "answer": "The primary use case for isMounted() is to avoid calling setState() after a component has been unmounted, because it will emit a warning. javascript\nif (this.isMounted()) {\n  this.setState({...})\n} Checking isMounted() before calling setState() does eliminate the warning, but it also defeats the purpose of the warning. Using isMounted() is a code smell because the only reason you would check is because you think you might be holding a reference after the component has unmounted. An optimal solution would be to find places where setState() might be called after a component has unmounted, and fix them. Such situations most commonly occur due to callbacks, when a component is waiting for some data and gets unmounted before the data arrives. Ideally, any callbacks should be canceled in componentWillUnmount(), prior to unmounting. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is the difference between constructor and getInitialState?",
    "answer": "You should initialize state in the constructor when using ES6 classes, and getInitialState() method when using React.createClass(). Using ES6 classes: javascript\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      /* initial state */\n    };\n  }\n} Using React.createClass(): javascript\nconst MyComponent = React.createClass({\n  getInitialState() {\n    return {\n      /* initial state */\n    };\n  },\n}); Note: React.createClass() is deprecated and removed in React v16. Use plain JavaScript classes instead. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "Can you force a component to re-render without calling setState?",
    "answer": "By default, when your component's state or props change, your component will re-render. If your render() method depends on some other data, you can tell React that the component needs re-rendering by calling forceUpdate(). javascript\ncomponent.forceUpdate(callback); It is recommended to avoid all uses of forceUpdate() and only read from this.props and this.state in render(). \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What is the difference between super() and super(props) in React using ES6 classes?",
    "answer": "When you want to access this.props in constructor() then you should pass props to super() method. Using super(props): javascript\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    console.log(this.props); // { name: 'John', ... }\n  }\n} Using super(): javascript\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super();\n    console.log(this.props); // undefined\n  }\n} Outside constructor() both will display same value for this.props. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is the difference between setState() and replaceState() methods?",
    "answer": "When you use setState() the current and previous states are merged. replaceState() throws out the current state, and replaces it with only what you provide. Usually setState() is used unless you really need to remove all previous keys for some reason. You can also set state to false/null in setState() instead of using replaceState(). \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "How to listen to state changes?",
    "answer": "The componentDidUpdate lifecycle method will be called when state changes. You can compare provided state and props values with current state and props to determine if something meaningful changed. componentDidUpdate(object prevProps, object prevState) Note: The previous releases of ReactJS also uses componentWillUpdate(object nextProps, object nextState) for state changes. It has been deprecated in latest releases. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What is the recommended approach of removing an array element in React state?",
    "answer": "The better approach is to use Array.prototype.filter() method. For example, let's create a removeItem() method for updating the state. javascript\nremoveItem(index) {\n  this.setState({\n    data: this.state.data.filter((item, i) => i !== index)\n  })\n} \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "Is it possible to use React without rendering HTML?",
    "answer": "It is possible. Below are the possible options: jsx harmony\nrender() {\n  return false\n} jsx harmony\nrender() {\n  return true\n} jsx harmony\nrender() {\n  return null\n} React version >=16.0.0: jsx harmony\nrender() {\n  return []\n} jsx harmony\nrender() {\n  return \"\"\n} React version >=16.2.0: jsx harmony\nrender() {\n  return <React.Fragment></React.Fragment>\n} jsx harmony\nrender() {\n  return <>\n} React version >=18.0.0: jsx harmony\nrender() {\n  return undefined\n} \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "General Programming",
    "question": "What are the possible ways of updating objects in state?",
    "answer": "Calling setState() with an object to merge with state: - Using Object.assign() to create a copy of the object: javascript\n  const user = Object.assign({}, this.state.user, { age: 42 });\n  this.setState({ user }); - Using spread operator: javascript\n  const user = { ...this.state.user, age: 42 };\n  this.setState({ user }); Calling setState() with a function: javascript\nthis.setState((prevState) => ({\n  user: {\n    ...prevState.user,\n    age: 42,\n  },\n})); \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What are the approaches to include polyfills in your create-react-app?",
    "answer": "There are approaches to include polyfills in create-react-app, Manual import from core-js: Create a file called (something like) polyfills.js and import it into root index.js file. Run npm install core-js or yarn add core-js and import your specific required features. javascript\nimport \"core-js/fn/array/find\";\nimport \"core-js/fn/array/includes\";\nimport \"core-js/fn/number/is-nan\"; Using Polyfill service: Use the polyfill.io CDN to retrieve custom, browser-specific polyfills by adding this line to index.html: html\n<script src=\"https://cdn.polyfill.io/v2/polyfill.min.js?features=default,Array.prototype.includes\"></script> In the above script we had to explicitly request the Array.prototype.includes feature as it is not included in the default feature set. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How to use https instead of http in create-react-app?",
    "answer": "You just need to use HTTPS=true configuration. You can edit your package.json scripts section: json\n\"scripts\": {\n  \"start\": \"set HTTPS=true && react-scripts start\"\n} or just run set HTTPS=true && npm start \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How to avoid using relative path imports in create-react-app?",
    "answer": "Create a file called .env in the project root and write the import path: NODE_PATH=src/app After that restart the development server. Now you should be able to import anything inside src/app without relative paths. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How to update a component every second?",
    "answer": "You need to use setInterval() to trigger the change, but you also need to clear the timer when the component unmounts to prevent errors and memory leaks. ```javascript\ncomponentDidMount() {\n  this.interval = setInterval(() => this.setState({ time: Date.now() }), 1000)\n} componentWillUnmount() {\n  clearInterval(this.interval)\n}\n``` \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "React",
    "question": "Why is a component constructor called only once?",
    "answer": "React's reconciliation algorithm assumes that without any information to the contrary, if a custom component appears in the same place on subsequent renders, it's the same component as before, so reuses the previous instance rather than creating a new one. \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "React",
    "question": "How to define constants in React?",
    "answer": "You can use ES7 static field to define constant. javascript\nclass MyComponent extends React.Component {\n  static DEFAULT_PAGINATION = 10;\n} \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "React",
    "question": "How to programmatically trigger click event in React?",
    "answer": "You could use the ref prop to acquire a reference to the underlying HTMLInputElement object through a callback, store the reference as a class property, then use that reference to later trigger a click from your event handlers using the HTMLElement.click method. This can be done in two steps: Create ref in render method: jsx harmony\n<input ref={(input) => (this.inputElement = input)} /> Apply click event in your event handler: javascript\nthis.inputElement.click(); \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How to make AJAX call and in which component lifecycle methods should I make an AJAX call?",
    "answer": "You can use AJAX libraries such as Axios, jQuery AJAX, and the browser built-in fetch. You should fetch data in the componentDidMount() lifecycle method. This is so you can use setState() to update your component when the data is retrieved. For example, the employees list fetched from API and set local state: ```jsx harmony\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      employees: [],\n      error: null,\n    };\n  } componentDidMount() {\n    fetch(\"https://api.example.com/items\")\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            employees: result.employees,\n          });\n        },\n        (error) => {\n          this.setState({ error });\n        }\n      );\n  } render() {\n    const { error, employees } = this.state;\n    if (error) {\n      return Error: {error.message};\n    } else {\n      return (\n        \n          {employees.map((employee) => (\n            \n              {employee.name}-{employee.experience}\n            \n          ))}\n        \n      );\n    }\n  }\n}\n``` - {employee.name}-{employee.experience} \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What are render props?",
    "answer": "Render Props is a simple technique for sharing code between components using a prop whose value is a function. The below component uses render prop which returns a React element. jsx harmony\n<DataProvider render={(data) => <h1>{`Hello ${data.target}`}</h1>} /> Libraries such as React Router and DownShift are using this pattern. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "How to dispatch an action on load?",
    "answer": "You can dispatch an action in componentDidMount() method and in render() method you can verify the data. ```javascript\nclass App extends Component {\n  componentDidMount() {\n    this.props.fetchData();\n  } render() {\n    return this.props.isLoaded ? (\n      {\"Loaded\"}\n    ) : (\n      {\"Not Loaded\"}\n    );\n  }\n} const mapStateToProps = (state) => ({\n  isLoaded: state.isLoaded,\n}); const mapDispatchToProps = { fetchData }; export default connect(mapStateToProps, mapDispatchToProps)(App);\n``` \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How to use connect() from React Redux?",
    "answer": "You need to follow two steps to use your store in your container: Connect the above props to your container: The object returned by the mapStateToProps function is connected to the container. You can import connect() from react-redux. ```jsx harmony\nimport React from \"react\";\nimport { connect } from \"react-redux\"; class App extends React.Component {\n  render() {\n    return {this.props.containerData};\n  }\n} function mapStateToProps(state) {\n  return { containerData: state.data };\n} export default connect(mapStateToProps)(App);\n``` \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "Whats the purpose of at symbol in the Redux connect decorator?",
    "answer": "The @ symbol is in fact a JavaScript expression used to signify decorators. Decorators make it possible to annotate and modify classes and properties at design time. Let's take an example setting up Redux without and with a decorator. - Without decorator: ```javascript\n  import React from \"react\";\n  import * as actionCreators from \"./actionCreators\";\n  import { bindActionCreators } from \"redux\";\n  import { connect } from \"react-redux\"; function mapStateToProps(state) {\n    return { todos: state.todos };\n  } function mapDispatchToProps(dispatch) {\n    return { actions: bindActionCreators(actionCreators, dispatch) };\n  } class MyApp extends React.Component {\n    // ...define your main app here\n  } export default connect(mapStateToProps, mapDispatchToProps)(MyApp);\n  ``` - With decorator: ```javascript\n  import React from \"react\";\n  import * as actionCreators from \"./actionCreators\";\n  import { bindActionCreators } from \"redux\";\n  import { connect } from \"react-redux\"; function mapStateToProps(state) {\n    return { todos: state.todos };\n  } function mapDispatchToProps(dispatch) {\n    return { actions: bindActionCreators(actionCreators, dispatch) };\n  } @connect(mapStateToProps, mapDispatchToProps)\n  export default class MyApp extends React.Component {\n    // ...define your main app here\n  }\n  ``` The above examples are almost similar except the usage of decorator. The decorator syntax isn't built into any JavaScript runtimes yet, and is still experimental and subject to change. You can use babel for the decorators support. \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "React",
    "question": "How to use TypeScript in create-react-app application?",
    "answer": "\u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "Does the statics object work with ES6 classes in React?",
    "answer": "No, statics only works with React.createClass(): javascript\nsomeComponent = React.createClass({\n  statics: {\n    someMethod: function () {\n      // ..\n    },\n  },\n}); But you can write statics inside ES6+ classes as below, ```javascript\nclass Component extends React.Component {\n  static propTypes = {\n    // ...\n  }; static someMethod() {\n    // ...\n  }\n}\n``` or writing them outside class as below, ```javascript\nclass Component extends React.Component {\n   ....\n} Component.propTypes = {...}\nComponent.someMethod = function(){....}\n``` \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "Why are inline ref callbacks or functions not recommended?",
    "answer": "If the ref callback is defined as an inline function, it will get called twice during updates, first with null and then again with the DOM element. This is because a new instance of the function is created with each render, so React needs to clear the old ref and set up the new one. ```jsx\nclass UserForm extends Component {\n  handleSubmit = () => {\n    console.log(\"Input Value is: \", this.input.value);\n  }; render() {\n    return (\n      \n (this.input = input)} /> //\n        Access DOM input in handle submit\n        Submit\n\n    );\n  }\n}\n``` But our expectation is for the ref callback to get called once, when the component mounts. One quick fix is to use the ES7 class property syntax to define the function ```jsx\nclass UserForm extends Component {\n  handleSubmit = () => {\n    console.log(\"Input Value is: \", this.input.value);\n  }; setSearchInput = (input) => {\n    this.input = input;\n  }; render() {\n    return (\n      \n // Access DOM input\n        in handle submit\n        Submit\n\n    );\n  }\n}\n``` \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "What are HOC factory implementations?",
    "answer": "There are two main ways of implementing HOCs in React. But they follow different approaches for manipulating the WrappedComponent. Props Proxy In this approach, the render method of the HOC returns a React Element of the type of the WrappedComponent. We also pass through the props that the HOC receives, hence the name Props Proxy. jsx\nfunction ppHOC(WrappedComponent) {\n  return class PP extends React.Component {\n    render() {\n      return <WrappedComponent {...this.props} />;\n    }\n  };\n} Inheritance Inversion In this approach, the returned HOC class (Enhancer) extends the WrappedComponent. It is called Inheritance Inversion because instead of the WrappedComponent extending some Enhancer class, it is passively extended by the Enhancer. In this way the relationship between them seems inverse. jsx\nfunction iiHOC(WrappedComponent) {\n  return class Enhancer extends WrappedComponent {\n    render() {\n      return super.render();\n    }\n  };\n} \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How to use class field declarations syntax in React classes?",
    "answer": "React Class Components can be made much more concise using the class field declarations. You can initialize the local state without using the constructor and declare class methods by using arrow functions without the extra need to bind them. Let's take a counter example to demonstrate class field declarations for state without using constructor and methods without binding, ```jsx\nclass Counter extends Component {\n  state = { value: 0 }; handleIncrement = () => {\n    this.setState((prevState) => ({\n      value: prevState.value + 1,\n    }));\n  }; handleDecrement = () => {\n    this.setState((prevState) => ({\n      value: prevState.value - 1,\n    }));\n  }; render() {\n    return (\n      \n        {this.state.value} }\n}\n``` \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "Why do you not need error boundaries for event handlers?",
    "answer": "Error boundaries do not catch errors inside event handlers. React doesn\u2019t need error boundaries to recover from errors in event handlers. Unlike the render method and lifecycle methods, the event handlers don\u2019t happen during rendering. So if they throw, React still knows what to display on the screen. If you need to catch an error inside an event handler, use the regular JavaScript try / catch statement: ```javascript\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { error: null };\n    this.handleClick = this.handleClick.bind(this);\n  } handleClick() {\n    try {\n      // Do something that could throw\n    } catch (error) {\n      this.setState({ error });\n    }\n  } render() {\n    if (this.state.error) {\n      return Caught an error.;\n    }\n    return Click Me;\n  }\n}\n``` Note that the above example is demonstrating regular JavaScript behavior and doesn\u2019t use error boundaries. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is the difference between try catch block and error boundaries?",
    "answer": "Try catch block works with imperative code whereas error boundaries are meant for declarative code to render on the screen. For example, the try catch block used for below imperative code javascript\ntry {\n  showButton();\n} catch (error) {\n  // ...\n} Whereas error boundaries wrap declarative code as below, javascript\n<ErrorBoundary>\n  <MyComponent />\n</ErrorBoundary> So if an error occurs in a componentDidUpdate method caused by a setState somewhere deep in the tree, it will still correctly propagate to the closest error boundary. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What is the required method to be defined for a class component?",
    "answer": "The render() method is the only required method in a class component. i.e, All methods other than render method are optional for a class component. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What are the possible return types of render method?",
    "answer": "Below are the list of following types used and return from render method, \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is the main purpose of constructor?",
    "answer": "The constructor is mainly used for two purposes, javascript\nconstructor(props) {\n  super(props);\n  // Don't call this.setState() here!\n  this.state = { counter: 0 };\n  this.handleClick = this.handleClick.bind(this);\n} \u2b06 Back to Top",
    "difficulty": "Easy"
  },
  {
    "technology": "React",
    "question": "Is it mandatory to define constructor for React component?",
    "answer": "No, it is not mandatory. i.e, If you don\u2019t initialize state and you don\u2019t bind methods, you don\u2019t need to implement a constructor for your React component. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "Why should not call setState in componentWillUnmount?",
    "answer": "You should not call setState() in componentWillUnmount() because once a component instance is unmounted, it will never be mounted again. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is the purpose of getDerivedStateFromError?",
    "answer": "This lifecycle method is invoked after an error has been thrown by a descendant component. It receives the error that was thrown as a parameter and should return a value to update state. The signature of the lifecycle method is as follows, javascript\nstatic getDerivedStateFromError(error) Let us take error boundary use case with the above lifecycle method for demonstration purpose, ```javascript\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  } static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  } render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return Something went wrong.;\n    } }\n}\n``` \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What is the methods order when component re-rendered?",
    "answer": "An update can be caused by changes to props or state. The below methods are called in the following order when a component is being re-rendered. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What are the methods invoked during error handling?",
    "answer": "Below methods are called when there is an error during rendering, in a lifecycle method, or in the constructor of any child component. \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "Node.js",
    "question": "What is the purpose of unmountComponentAtNode method?",
    "answer": "This method is available from react-dom package and it removes a mounted React component from the DOM and clean up its event handlers and state. If no component was mounted in the container, calling this function does nothing. Returns true if a component was unmounted and false if there was no component to unmount. The method signature would be as follows, javascript\nReactDOM.unmountComponentAtNode(container); \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What are the limitations with HOCs?",
    "answer": "Higher-order components come with a few caveats apart from its benefits. Below are the few listed in an order, Don\u2019t use HOCs inside the render method:\n    It is not recommended to apply a HOC to a component within the render method of a component. javascript\nrender() {\n  // A new version of EnhancedComponent is created on every render\n  // EnhancedComponent1 !== EnhancedComponent2\n  const EnhancedComponent = enhance(MyComponent);\n  // That causes the entire subtree to unmount/remount each time!\n  return <EnhancedComponent />;\n} The above code impacts on performance by remounting a component that causes the state of that component and all of its children to be lost. Instead, apply HOCs outside the component definition so that the resulting component is created only once. Static methods must be copied over:\n    When you apply a HOC to a component the new component does not have any of the static methods of the original component ```javascript\n// Define a static method\nWrappedComponent.staticMethod = function () {\n  /.../\n};\n// Now apply a HOC\nconst EnhancedComponent = enhance(WrappedComponent); // The enhanced component has no static method\ntypeof EnhancedComponent.staticMethod === \"undefined\"; // true\n``` You can overcome this by copying the methods onto the container before returning it, javascript\nfunction enhance(WrappedComponent) {\n  class Enhance extends React.Component {\n    /*...*/\n  }\n  // Must know exactly which method(s) to copy :(\n  Enhance.staticMethod = WrappedComponent.staticMethod;\n  return Enhance;\n} Refs aren\u2019t passed through:\n    For HOCs you need to pass through all props to the wrapped component but this does not work for refs. This is because ref is not really a prop similar to key. In this case you need to use the React.forwardRef API \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "How to debug forwardRefs in DevTools?",
    "answer": "React.forwardRef accepts a render function as parameter and DevTools uses this function to determine what to display for the ref forwarding component. For example, If you don't name the render function or not using displayName property then it will appear as \u201dForwardRef\u201d in the DevTools, javascript\nconst WrappedComponent = React.forwardRef((props, ref) => {\n  return <LogProps {...props} forwardedRef={ref} />;\n}); But If you name the render function then it will appear as \u201dForwardRef(myFunction)\u201d javascript\nconst WrappedComponent = React.forwardRef(function myFunction(props, ref) {\n  return <LogProps {...props} forwardedRef={ref} />;\n}); As an alternative, You can also set displayName property for forwardRef function, ```javascript\nfunction logProps(Component) {\n  class LogProps extends React.Component {\n    // ...\n  } function forwardRef(props, ref) {\n    return ;\n  } // Give this component a more helpful display name in DevTools.\n  // e.g. \"ForwardRef(logProps(MyComponent))\"\n  const name = Component.displayName || Component.name;\n  forwardRef.displayName = logProps(${name}); return React.forwardRef(forwardRef);\n}\n``` \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "Is it good to use arrow functions in render methods?",
    "answer": "Yes, You can use. It is often the easiest way to pass parameters to callback functions. But you need to optimize the performance while using it. javascript\nclass Foo extends Component {\n  handleClick() {\n    console.log(\"Click happened\");\n  }\n  render() {\n    return <button onClick={() => this.handleClick()}>Click Me</button>;\n  }\n} Note: Using an arrow function in render method creates a new function each time the component renders, which may have performance implications \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "How do you say that state updates are merged?",
    "answer": "When you call setState() in the component, React merges the object you provide into the current state. For example, let us take a facebook user with posts and comments details as state variables, javascript\n  constructor(props) {\n    super(props);\n    this.state = {\n      posts: [],\n      comments: []\n    };\n  } Now you can update them independently with separate setState() calls as below, ```javascript\n componentDidMount() {\n    fetchPosts().then(response => {\n      this.setState({\n        posts: response.posts\n      });\n    }); }\n``` As mentioned in the above code snippets, this.setState({comments}) updates only comments variable without modifying or replacing posts variable. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "How do you pass arguments to an event handler?",
    "answer": "During iterations or loops, it is common to pass an extra parameter to an event handler. This can be achieved through arrow functions or bind method. Let us take an example of user details updated in a grid, javascript\n<button onClick={(e) => this.updateUser(userId, e)}>Update User details</button>\n<button onClick={this.updateUser.bind(this, userId)}>Update User details</button> In the both approaches, the synthetic argument e is passed as a second argument. You need to pass it explicitly for arrow functions and it will be passed automatically for bind method. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How to prevent component from rendering?",
    "answer": "You can prevent component from rendering by returning null based on specific condition. This way it can conditionally render component. ```javascript\nfunction Greeting(props) {\n  if (!props.loggedIn) {\n    return null;\n  } return welcome, {props.name};\n}\n``` ```javascript\nclass User extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {loggedIn: false, name: 'John'};\n  } render() {\n   return (\n       \n         //Prevent component render if it is not loggedIn\n         \n\n\n   );\n  }\n``` In the above example, the greeting component skips its rendering section by applying condition and returning null value. \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "Give an example on How to use context?",
    "answer": "Context is designed to share data that can be considered global for a tree of React components. For example, in the code below lets manually thread through a \u201ctheme\u201d prop in order to style the Button component. javascript\n//Lets create a context with a default theme value \"luna\"\nconst ThemeContext = React.createContext(\"luna\");\n// Create App component where it uses provider to pass theme value in the tree\nclass App extends React.Component {\n  render() {\n    return (\n      <ThemeContext.Provider value=\"nova\">\n        <Toolbar />\n      </ThemeContext.Provider>\n    );\n  }\n}\n// A middle component where you don't need to pass theme prop anymore\nfunction Toolbar(props) {\n  return (\n    <div>\n      <ThemedButton />\n    </div>\n  );\n}\n// Lets read theme value in the button component to use\nclass ThemedButton extends React.Component {\n  static contextType = ThemeContext;\n  render() {\n    return <Button theme={this.context} />;\n  }\n} \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "How do you use contextType?",
    "answer": "ContextType is used to consume the context object. The contextType property can be used in two ways, contextType as property of class:\n    The contextType property on a class can be assigned a Context object created by React.createContext(). After that, you can consume the nearest current value of that Context type using this.context in any of the lifecycle methods and render function. Lets assign contextType property on MyClass as below, javascript\nclass MyClass extends React.Component {\n  componentDidMount() {\n    let value = this.context;\n    /* perform a side-effect at mount using the value of MyContext */\n  }\n  componentDidUpdate() {\n    let value = this.context;\n    /* ... */\n  }\n  componentWillUnmount() {\n    let value = this.context;\n    /* ... */\n  }\n  render() {\n    let value = this.context;\n    /* render something based on the value of MyContext */\n  }\n}\nMyClass.contextType = MyContext; Static field\n    You can use a static class field to initialize your contextType using public class field syntax. javascript\nclass MyClass extends React.Component {\n  static contextType = MyContext;\n  render() {\n    let value = this.context;\n    /* render something based on the value */\n  }\n} \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is a consumer?",
    "answer": "A Consumer is a React component that subscribes to context changes. It requires a function as a child which receives current context value as argument and returns a react node. The value argument passed to the function will be equal to the value prop of the closest Provider for this context above in the tree. Lets take a simple example, javascript\n<MyContext.Consumer>\n  {value => /* render something based on the context value */}\n</MyContext.Consumer> \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "How do you solve performance corner cases while using context?",
    "answer": "The context uses reference identity to determine when to re-render, there are some gotchas that could trigger unintentional renders in consumers when a provider\u2019s parent re-renders. For example, the code below will re-render all consumers every time the Provider re-renders because a new object is always created for value. javascript\nclass App extends React.Component {\n  render() {\n    return (\n      <Provider value={{ something: \"something\" }}>\n        <Toolbar />\n      </Provider>\n    );\n  }\n} This can be solved by lifting up the value to parent state, ```javascript\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: { something: \"something\" },\n    };\n  } render() {\n    return (\n      \n\n\n    );\n  }\n}\n``` \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "What is the purpose of forward ref in HOCs?",
    "answer": "Refs will not get passed through because ref is not a prop. It is handled differently by React just like key. If you add a ref to a HOC, the ref will refer to the outermost container component, not the wrapped component. In this case, you can use Forward Ref API. For example, we can explicitly forward refs to the inner FancyButton component using the React.forwardRef API. The below HOC logs all props, ```javascript\nfunction logProps(Component) {\n  class LogProps extends React.Component {\n    componentDidUpdate(prevProps) {\n      console.log(\"old props:\", prevProps);\n      console.log(\"new props:\", this.props);\n    } } return React.forwardRef((props, ref) => {\n    return ;\n  });\n}\n``` Let's use this HOC to log all props that get passed to our \u201cfancy button\u201d component, ```javascript\nclass FancyButton extends React.Component {\n  focus() {\n    // ...\n  } // ...\n}\nexport default logProps(FancyButton);\n``` Now let's create a ref and pass it to FancyButton component. In this case, you can set focus to button element. ```javascript\nimport FancyButton from \"./FancyButton\"; const ref = React.createRef();\nref.current.focus();\n;\n``` \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "React",
    "question": "Is ref argument available for all functions or class components?",
    "answer": "Regular function or class components don\u2019t receive the ref argument, and ref is not available in props either. The second ref argument only exists when you define a component with React.forwardRef call. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "Why do you need additional care for component libraries while using forward refs?",
    "answer": "When you start using forwardRef in a component library, you should treat it as a breaking change and release a new major version of your library. This is because your library likely has a different behavior such as what refs get assigned to, and what types are exported. These changes can break apps and other libraries that depend on the old behavior. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How to create react class components without ES6?",
    "answer": "If you don\u2019t use ES6 then you may need to use the create-react-class module instead. For default props, you need to define getDefaultProps() as a function on the passed object. Whereas for initial state, you have to provide a separate getInitialState method that returns the initial state. javascript\nvar Greeting = createReactClass({\n  getDefaultProps: function () {\n    return {\n      name: \"Jhohn\",\n    };\n  },\n  getInitialState: function () {\n    return { message: this.props.message };\n  },\n  handleClick: function () {\n    console.log(this.state.message);\n  },\n  render: function () {\n    return <h1>Hello, {this.props.name}</h1>;\n  },\n}); Note: If you use createReactClass then auto binding is available for all methods. i.e, You don't need to use .bind(this) with in constructor for event handlers. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "Is it possible to use react without JSX?",
    "answer": "Yes, JSX is not mandatory for using React. Actually it is convenient when you don\u2019t want to set up compilation in your build environment. Each JSX element is just syntactic sugar for calling React.createElement(component, props, ...children). For example, let us take a greeting example with JSX, ```javascript\nclass Greeting extends React.Component {\n  render() {\n    return Hello {this.props.message};\n  }\n} ReactDOM.render(\n  ,\n  document.getElementById(\"root\")\n);\n``` You can write the same code without JSX as below, ``javascript\nclass Greeting extends React.Component {\n  render() {\n    return React.createElement(\"div\", null,Hello ${this.props.message}`);\n  }\n} ReactDOM.render(\n  React.createElement(Greeting, { message: \"World\" }, null),\n  document.getElementById(\"root\")\n);\n``` \u2b06 Back to Top",
    "difficulty": "Hard"
  },
  {
    "technology": "General Programming",
    "question": "How do you create HOC using render props?",
    "answer": "You can implement most higher-order components (HOC) using a regular component with a render prop. For example, if you would prefer to have a withMouse HOC instead of a  component, you could easily create one using a regular  with a render prop. javascript\nfunction withMouse(Component) {\n  return class extends React.Component {\n    render() {\n      return (\n        <Mouse\n          render={(mouse) => <Component {...this.props} mouse={mouse} />}\n        />\n      );\n    }\n  };\n} This way render props gives the flexibility of using either pattern. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What is react scripts?",
    "answer": "The react-scripts package is a set of scripts from the create-react-app starter pack which helps you kick off projects without configuring. The react-scripts start command sets up the development environment and starts a server, as well as hot module reloading. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What are the features of create react app?",
    "answer": "Below are the list of some of the features provided by create react app. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "Node.js",
    "question": "What is the purpose of renderToNodeStream method?",
    "answer": "The ReactDOMServer#renderToNodeStream method is used to generate HTML on the server and send the markup down on the initial request for faster page loads. It also helps search engines to crawl your pages easily for SEO purposes.\nNote: Remember this method is not available in the browser but only server. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "How do you get redux scaffolding using create-react-app?",
    "answer": "Redux team has provided official redux+js or redux+typescript templates for create-react-app project. The generated project setup includes, \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "What is state mutation and how to prevent it?",
    "answer": "State mutation happens when you try to update the state of a component without actually using setState function. This can happen when you are trying to do some computations using a state variable and unknowingly save the result in the same state variable. This is the main reason why it is advised to return new instances of state variables from the reducers by using Object.assign({}, ...) or spread syntax. This can cause unknown issues in the UI as the value of the state variable got updated without telling React to check what all components were being affected from this update and it can cause UI bugs. Ex: ```javascript\nclass A extends React.component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false\n    }\n } componentDidMount() {\n  let { loading } = this.state;\n  loading = (() => true)(); // Trying to perform an operation and directly saving in a state variable\n} ``` How to prevent it: Make sure your state variables are immutable by either enforcing immutability by using plugins like Immutable.js, always using setState to make updates, and returning new instances in reducers when sending updated state values. \u2b06 Back to Top",
    "difficulty": "Medium"
  },
  {
    "technology": "General Programming",
    "question": "Disclaimer",
    "answer": "The questions provided in this repository are the summary of frequently asked questions across numerous companies. We cannot guarantee that these questions will actually be asked during your interview process, nor should you focus on memorizing all of them. The primary purpose is for you to get a sense of what some companies might ask \u2014 do not get discouraged if you don't know the answer to all of them \u2060\u2014 that is ok! Good luck with your interview \ud83d\ude0a",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "2. What is Java Virtual Machine (JVM)?",
    "answer": "Executes Java bytecode, enabling platform independence.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "3. What are the different types of memory areas allocated by JVM?",
    "answer": "Heap, Method Area, Stack, PC Register, Native Method Stack.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "4. What is JIT compiler?",
    "answer": "Compiles bytecode to native code at runtime for faster execution.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "5. How Java platform is different from other platforms?",
    "answer": "Java uses JVM, making it platform-independent.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "6. Why people say that Java is 'write once and run anywhere' language?",
    "answer": "Bytecode runs on any system with a compatible JVM.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "7. How does ClassLoader work in Java?",
    "answer": "Loads classes into memory using a delegation hierarchy.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "8. Do you think \u2018main\u2019 used for main method is a keyword in Java?",
    "answer": "No, it's a method name.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "9. Can we write main method as public void static instead of public static void?",
    "answer": "No, the order is `public static void main()`.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "10. In Java, if we do not specify any value for local variables, then what will be the default value of the local variables?",
    "answer": "No default value; local variables must be initialized.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "11. Let say, we run a java class without passing any arguments. What will be the value of String array of arguments in Main method?",
    "answer": "An empty array (length is 0).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "12. What is the difference between byte and char data types in Java?",
    "answer": "byte: 8-bit signed integer. char: 16-bit unsigned Unicode character.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "13. What are the main principles of Object Oriented Programming?",
    "answer": "Encapsulation, Inheritance, Polymorphism, Abstraction.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "14. What is the difference between Object Oriented Programming language and Object Based Programming language?",
    "answer": "OOP supports inheritance, object-based may not.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "15. In Java what is the default value of an object reference defined as an instance variable in an Object?",
    "answer": "null",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "16. Why do we need constructor in Java?",
    "answer": "To initialize object state.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "17. Why do we need default constructor in Java classes?",
    "answer": "Compiler provides it if no other constructor is defined.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "18. What is the value returned by Constructor in Java?",
    "answer": "The new object instance (implicitly).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "19. Can we inherit a Constructor?",
    "answer": "No.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "20. Why constructors cannot be final, static, or abstract in Java?",
    "answer": "Contradicts the purpose of a constructor (initialization).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "21. What is the purpose of \u2018this\u2019 keyword in java?",
    "answer": "Refers to the current object.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "22. Explain the concept of Inheritance?",
    "answer": "Subclass inherits properties/methods from superclass.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "23. Which class in Java is superclass of every other class?",
    "answer": "Object",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "24. Why Java does not support multiple inheritance?",
    "answer": "To avoid the Diamond Problem.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "25. In OOPS, what is meant by composition?",
    "answer": "Object contains other objects (strong ownership).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "26. How aggregation and composition are different concepts?",
    "answer": "Aggregation: weak relationship. Composition: strong.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "27. Why there are no pointers in Java?",
    "answer": "Security and simplicity.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "28. If there are no pointers in Java, then why do we get NullPointerException?",
    "answer": "Object reference is null, not pointing to an object.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "29. What is the purpose of \u2018super\u2019 keyword in java?",
    "answer": "Call superclass constructor or method.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "30. Is it possible to use this() and super() both in same constructor?",
    "answer": "No, only one, and as the first statement.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "31. What is the meaning of object cloning in Java?",
    "answer": "Creating a copy of an object.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "32. In Java, why do we use static variable?",
    "answer": "Shared by all instances of the class.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "33. Why it is not a good practice to create static variables in Java?",
    "answer": "Can lead to tight coupling and global state issues.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "34. What is the purpose of static method in Java?",
    "answer": "Belongs to the class, not an instance.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "35. Why do we mark main method as static in Java?",
    "answer": "JVM can call it without creating an object.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "36. In what scenario do we use a static block?",
    "answer": "Initialize static variables.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "37. Is it possible to execute a program without defining a main() method?",
    "answer": "No (since Java 7).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "38. What happens when static modifier is not mentioned in the signature of main method?",
    "answer": "NoSuchMethodError at runtime.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "39. What is the difference between static method and instance method in Java?",
    "answer": "Static: Class-level. Instance: Object-level.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "40. What is the other name of Method Overloading?",
    "answer": "Compile-time polymorphism.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "41. How will you implement method overloading in Java?",
    "answer": "Methods with same name, different parameters.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "42. What kinds of argument variations are allowed in Method Overloading?",
    "answer": "Number, type, or order of parameters.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "43. Why it is not possible to do method overloading by changing return type of method in java?",
    "answer": "Compiler can't distinguish calls based on return type.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "44. Is it allowed to overload main() method in Java?",
    "answer": "Yes.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "45. How do we implement method overriding in Java?",
    "answer": "Subclass method with same signature as superclass.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "46. Are we allowed to override a static method in Java?",
    "answer": "No, it's method hiding.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "47. Why Java does not allow overriding a static method?",
    "answer": "Static methods belong to the class, not the object.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "48. Is it allowed to override an overloaded method?",
    "answer": "Yes.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "49. What is the difference between method overloading and method overriding in Java?",
    "answer": "Overloading: Same class, different parameters. Overriding: Subclass, same signature.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "50. Does Java allow virtual functions?",
    "answer": "Yes, all non-final, non-static, non-private methods are virtual.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "51. What is meant by covariant return type in Java?",
    "answer": "Overriding method can return subtype of superclass return type.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "52. What is Runtime Polymorphism?",
    "answer": "Method call determined at runtime (overriding).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "53. Is it possible to achieve Runtime Polymorphism by data members in Java?",
    "answer": "No.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "54. Explain the difference between static and dynamic binding?",
    "answer": "Static: Compile-time (overloading). Dynamic: Runtime (overriding).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "55. What is Abstraction in Object Oriented programming?",
    "answer": "Hiding complex implementation, showing essential features.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "56. How is Abstraction different from Encapsulation?",
    "answer": "Abstraction: Hiding complexity. Encapsulation: Bundling data and methods.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "57. What is an abstract class in Java?",
    "answer": "Cannot be instantiated; may contain abstract methods.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "58. Is it allowed to mark a method abstract method without marking the class abstract?",
    "answer": "No.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "59. Is it allowed to mark a method abstract as well as final?",
    "answer": "No.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "60. Can we instantiate an abstract class in Java?",
    "answer": "No.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "61. What is an interface in Java?",
    "answer": "Contract of methods to be implemented.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "62. Is it allowed to mark an interface method as static?",
    "answer": "Yes (since Java 8).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "63. Why an Interface cannot be marked as final in Java?",
    "answer": "Final means it cannot be implemented, contradicting its purpose.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "64. What is a marker interface?",
    "answer": "Interface with no methods (e.g., Serializable).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "65. What can we use instead of Marker interface?",
    "answer": "Annotations.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "66. How Annotations are better than Marker Interfaces?",
    "answer": "More flexible, can carry metadata.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "67. What is the difference between abstract class and interface in Java?",
    "answer": "Abstract class can have state and method implementations. Interface primarily defines contracts.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "68. Does Java allow us to use private and protected modifiers for variables in interfaces?",
    "answer": "No.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "69. How can we cast to an object reference to an interface reference?",
    "answer": "If the object implements the interface.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "70. How can you change the value of a final variable in Java?",
    "answer": "Only once, during initialization.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "71. Can a class be marked final in Java?",
    "answer": "Yes.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "72. How can we create a final method in Java?",
    "answer": "Use the `final` keyword.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "73. How can we prohibit inheritance in Java?",
    "answer": "Make the class `final`.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "74. Why Integer class in final in Java?",
    "answer": "Immutability and security.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "75. What is a blank final variable in Java?",
    "answer": "Final variable not initialized at declaration.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "76. How can we initialize a blank final variable?",
    "answer": "In the constructor.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "77. Is it allowed to declare main method as final?",
    "answer": "Yes.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "78. What is the purpose of package in Java?",
    "answer": "Namespace and organization.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "79. What is java.lang package?",
    "answer": "Core Java classes (Object, String, etc.).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "80. Which is the most important class in Java?",
    "answer": "Object",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "81. Is it mandatory to import java.lang package every time?",
    "answer": "No, implicitly imported.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "82. Can you import same package or class twice in your class?",
    "answer": "Yes, but redundant.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "83. What is a static import in Java?",
    "answer": "Import static members directly.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "84. What is the difference between import static com.test.Fooclass and import com.test.Fooclass?",
    "answer": "static imports static members; regular imports the class itself.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "85. What is Locale in Java?",
    "answer": "Represents a geographical, political, or cultural region.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "86. How will you use a specific Locale in Java?",
    "answer": "Create Locale object, use with formatting classes.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "87. What is the serialization?",
    "answer": "Converting an object to a byte stream.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "88. What is the purpose of serialization?",
    "answer": "Persistence and transport.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "89. What is Deserialization?",
    "answer": "Converting a byte stream back to an object.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "90. What is Serialization and Deserialization conceptually?",
    "answer": "Object -> Bytes (Serialization), Bytes -> Object (Deserialization).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "91. Why do we mark a data member transient?",
    "answer": "Exclude it from serialization.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "92. Is it allowed to mark a method as transient?",
    "answer": "No.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "93. How does marking a field as transient makes it possible to serialize an object?",
    "answer": "The transient field's value isn't saved in the byte stream.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "94. What is Externalizable interface in Java?",
    "answer": "Provides control over serialization process.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "95. What is the difference between Serializable and Externalizable interface?",
    "answer": "Serializable: Automatic. Externalizable: Manual control.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "96. What is Reflection in Java?",
    "answer": "Inspect and manipulate classes at runtime.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "97. What are the uses of Reflection in Java?",
    "answer": "Dynamic object creation, accessing private members.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "98. How can we access private method of a class from outside the class?",
    "answer": "Using Reflection (setAccessible(true)).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "99. How can we create an Object dynamically at Runtime in Java?",
    "answer": "Using Reflection (Class.forName().newInstance()).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "100. What is Garbage Collection in Java?",
    "answer": "Automatic memory management.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "101. Why Java provides Garbage Collector?",
    "answer": "To automatically reclaim unused memory, preventing memory leaks.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "102. What is the purpose of gc() in Java?",
    "answer": "It's a request to the JVM to run the garbage collector (not a guarantee).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "103. How does Garbage Collection work in Java?",
    "answer": "It identifies and reclaims memory occupied by unreachable objects.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "104. When does an object become eligible for Garbage Collection in Java?",
    "answer": "When there are no more reachable references to it.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "105. Why do we use finalize() method in Java?",
    "answer": "To perform cleanup before an object is garbage collected (rarely used).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "106. What are the different types of References in Java?",
    "answer": "Strong, Soft, Weak, and Phantom References.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "107. How can we reference an unreferenced object again?",
    "answer": "Generally not possible, but PhantomReferences offer notification.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "108. What kind of process is the Garbage collector thread?",
    "answer": "A low-priority daemon thread.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "109. What is the purpose of the Runtime class?",
    "answer": "Provides access to the Java runtime environment.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "110. How can we invoke an external process in Java?",
    "answer": "Using `Runtime.getRuntime().exec()`.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "111. What are the uses of Runtime class?",
    "answer": "Process execution, memory management, library loading.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "112. What is a Nested class?",
    "answer": "A class defined inside another class.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "113. How many types of Nested classes are in Java?",
    "answer": "Two: static nested classes and inner classes.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "114. Why do we use Nested Classes?",
    "answer": "Encapsulation, organization, access to enclosing class.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "115. What is the difference between a Nested class and an Inner class in Java?",
    "answer": "Nested (static) lacks implicit access. Inner (non-static) has it.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "116. What is a Nested interface?",
    "answer": "An interface defined inside a class or interface.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "117. How can we access the non-final local variable, inside a Local Inner class?",
    "answer": "It must be effectively final (value doesn't change).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "118. Can an Interface be defined in a Class?",
    "answer": "Yes.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "119. Do we have to explicitly mark a Nested Interface public static?",
    "answer": "Implicitly static; requires access modifier (e.g., public).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "120. Why do we use Static Nested interface in Java?",
    "answer": "Namespace control and organization.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "121. What is the meaning of Immutable in the context of String class in Java?",
    "answer": "Value cannot be changed after creation.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "122. Why a String object is considered immutable in java?",
    "answer": "Security, caching, thread safety.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "123. How many objects does following code create?",
    "answer": "Requires code snippet to answer accurately.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "124. How many ways are there in Java to create a String object?",
    "answer": "Literal or `new String()`.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "125. How many objects does following code create?",
    "answer": "Requires code snippet to answer accurately.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "126. What is String interning?",
    "answer": "Storing one copy of each unique literal in String pool.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "127. Why Java uses String literal concept?",
    "answer": "Memory efficiency (interning).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "128. What is the basic difference between a String and StringBuffer object?",
    "answer": "`String` is immutable; `StringBuffer` is mutable.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "129. How will you create an immutable class in Java?",
    "answer": "final class, private final fields, no setters, deep copy.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "130. What is the use of toString() method in java ?",
    "answer": "Returns a String representation of the object.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "131. Arrange the three classes String, StringBuffer and StringBuilder in the order of efficiency for String processing operations?",
    "answer": "StringBuilder > StringBuffer > String.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "132. What is Exception Handling in Java?",
    "answer": "Handles runtime errors to prevent crashes.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "133. In Java, what are the differences between a Checked and Unchecked?",
    "answer": "Checked: must be caught/declared. Unchecked: not enforced.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "134. What is the base class for Error and Exception classes in Java?",
    "answer": "`Throwable`.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "135. What is a finally block in Java?",
    "answer": "Always executes, regardless of exceptions.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "136. What is the use of finally block in Java?",
    "answer": "Resource cleanup (close files, etc.).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "137. Can we create a finally block without creating a catch block?",
    "answer": "Yes, `try-finally` is valid.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "138. Do we have to always put a catch block after a try block?",
    "answer": "No, `try-finally` is valid.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "139. In what scenarios, a finally block will not be executed?",
    "answer": "System.exit() or JVM crash.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "140. Can we re-throw an Exception in Java?",
    "answer": "Yes.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "141. What is the difference between throw and throws in Java?",
    "answer": "`throw`: throws an exception. `throws`: declares an exception.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "142. What is the concept of Exception Propagation?",
    "answer": "Exceptions propagate up the call stack until handled.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "143. When we override a method in a Child class, can we throw an additional Exception that is not thrown by the Parent class method?",
    "answer": "Yes, if it's an unchecked exception. Checked exception must be a subtype or absent.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "144. How Multi-threading works in Java?",
    "answer": "Multiple threads execute concurrently within a single process.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "145. What are the advantages of Multithreading?",
    "answer": "Improved performance, responsiveness, resource utilization.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "146. What are the disadvantages of Multithreading?",
    "answer": "Complexity, synchronization issues, potential for deadlocks.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "147. What is a Thread in Java?",
    "answer": "A lightweight process that can execute concurrently.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "148. What is a Thread\u2019s priority and how it is used in scheduling?",
    "answer": "Hint to scheduler; higher priority gets preference (not guaranteed).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "149. What are the differences between Pre-emptive Scheduling Scheduler and Time Slicing Scheduler?",
    "answer": "Pre-emptive: OS interrupts. Time-slicing: Each thread gets a time slice.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "150. Is it possible to call run() method instead of start() on a thread in Java?",
    "answer": "Yes, but it won't create a new thread; it'll run in the current thread.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "151. How will you make a user thread into daemon thread if it has already started?",
    "answer": "Cannot be done after the thread has started.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "152. Can we start a thread two times in Java?",
    "answer": "No, it throws IllegalThreadStateException.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "153. In what scenarios can we interrupt a thread?",
    "answer": "When it's sleeping, waiting, or blocked on I/O.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "154. In Java, is it possible to lock an object for exclusive use by a thread?",
    "answer": "Yes, using `synchronized` keyword or Lock objects.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "155. How notify() method is different from notifyAll() method?",
    "answer": "`notify()` wakes up one waiting thread. `notifyAll()` wakes up all waiting threads.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "156. What are the differences between the two data structures: a Vector and an ArrayList?",
    "answer": "Vector is synchronized (thread-safe), ArrayList is not.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "157. What are the differences between Collection and Collections in Java?",
    "answer": "Collection: Interface. Collections: Utility class.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "158. In which scenario, LinkedList is better than ArrayList in Java?",
    "answer": "Frequent insertions/deletions in the middle of the list.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "159. What are the differences between a List and Set collection in Java?",
    "answer": "List: Ordered, allows duplicates. Set: Unordered, no duplicates.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "160. What are the differences between a HashSet and TreeSet collection in Java?",
    "answer": "HashSet: Unordered, uses hashing. TreeSet: Sorted, uses a tree.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "161. In Java, how will you decide when to use a List, Set or a Map collection?",
    "answer": "List: Ordered, duplicates allowed. Set: Unique elements. Map: Key-value pairs.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "162. What are the differences between a HashMap and a Hashtable in Java?",
    "answer": "HashMap: Not synchronized, allows null keys/values. Hashtable: Synchronized, no nulls.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "163. What are the differences between a HashMap and a TreeMap?",
    "answer": "HashMap: Unordered. TreeMap: Sorted by key.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "164. What are the differences between Comparable and Comparator?",
    "answer": "Comparable: Implemented by the class itself (natural ordering). Comparator: Separate class (custom ordering).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "165. In Java, what is the purpose of Properties file?",
    "answer": "Store configuration data as key-value pairs.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "166. What is the reason for overriding equals() method?",
    "answer": "To define object equality based on content, not just reference.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "167. How does hashCode() method work in Java?",
    "answer": "Returns an integer hash code value for an object.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "168. Is it a good idea to use Generics in collections?",
    "answer": "Yes, for type safety and to avoid ClassCastExceptions.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "169. What are Wrapper classes in Java?",
    "answer": "Classes that wrap primitive types (Integer, Double, etc.).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "170. What is the purpose of native method in Java?",
    "answer": "To call code written in other languages (C, C++).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "171. What is System class?",
    "answer": "Provides access to system resources (standard input/output, etc.).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "172. What is System, out and println in System.out.println method call?",
    "answer": "System: Class. out: static member of type PrintStream. println: method of PrintStream.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "173. What is the other name of Shallow Copy in Java?",
    "answer": "Bitwise copy.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "174. What is the difference between Shallow Copy and Deep Copy in Java?",
    "answer": "Shallow: Copies references. Deep: Copies objects themselves.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "175. What is a Singleton class?",
    "answer": "Only one instance can be created.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "176. What is the difference between Singleton class and Static class?",
    "answer": "Singleton: Instance can be accessed. Static: Only static members; no instances.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "177. What is the difference between Collection and Collections Framework in Java?",
    "answer": "Collection: Interface. Collections Framework: Set of interfaces/classes for collections.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "178. What are the main benefits of Collections Framework in Java?",
    "answer": "Code reuse, performance, reduced development effort.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "179. What is the root interface of Collection hierarchy in Java?",
    "answer": "`Collection`.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "180. What are the main differences between Collection and Collections?",
    "answer": "Collection: Interface. Collections: Utility class.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "181. What are the Thread-safe classes in Java Collections framework?",
    "answer": "Vector, Hashtable, ConcurrentHashMap, etc.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "182. How will you efficiently remove elements while iterating a Collection?",
    "answer": "Using Iterator.remove().",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "183. How will you convert a List into an array of integers like- int[]?",
    "answer": "Using `List.toArray(new Integer[0])` and then manually unboxing.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "184. How will you convert an array of primitive integers int[] to a List collection?",
    "answer": "Using `Arrays.asList()` with Integer wrapper objects or Java 8 streams.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "185. How will you run a filter on a Collection?",
    "answer": "Using Java 8 streams and the `filter()` method.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "186. How will you convert a List to a Set?",
    "answer": "Create a new Set and pass the List to the constructor (e.g., `new HashSet<>(list)`).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "187. How will you remove duplicate elements from an ArrayList?",
    "answer": "Convert to a Set and back to an ArrayList.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "188. How can you maintain a Collection with elements in Sorted order?",
    "answer": "Use a TreeSet or a sorted List (e.g., `Collections.sort()`).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "189. What is the difference between Collections.emptyList() and creating new instance of Collection?",
    "answer": "`Collections.emptyList()` returns an immutable, pre-existing empty list, avoiding object creation.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "190. How will you copy elements from a Source List to another list?",
    "answer": "Using `List.addAll()` or iterating and adding elements.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "191. What are the Java Collection classes that implement List interface?",
    "answer": "ArrayList, LinkedList, Vector.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "192. What are the Java Collection classes that implement Set interface?",
    "answer": "HashSet, TreeSet, LinkedHashSet.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "193. What is the difference between an Iterator and ListIterator in Java?",
    "answer": "Iterator: Forward iteration only. ListIterator: Bidirectional iteration, add/remove elements.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "194. What is the difference between Iterator and Enumeration?",
    "answer": "Iterator: Remove elements during iteration. Enumeration: Read-only.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "195. What is the difference between an ArrayList and a LinkedList data structure?",
    "answer": "ArrayList: Array-based, fast access. LinkedList: Node-based, fast insertions/deletions.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "196. What is the difference between a Set and a Map in Java?",
    "answer": "Set: Stores unique elements. Map: Stores key-value pairs.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "197. What is the use of a Dictionary class?",
    "answer": "Abstract class for key-value pairs (legacy; use Map instead).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "198. What is the default size of load factor in a HashMap collection in Java?",
    "answer": "Default load factor is 0.75.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "199. What is the significance of load factor in a HashMap in Java?",
    "answer": "Determines when the HashMap's capacity is increased (affects performance).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "200. What are the major differences between a HashSet and a HashMap?",
    "answer": "HashSet: Stores objects, no duplicates. HashMap: Stores key-value pairs. HashSet uses HashMap internally.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "201.What are the similarities between a HashSet and a HashMap in Java?",
    "answer": "Both use a hash table for storage, providing fast lookups, and neither guarantees element order.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "202.What is the reason for overriding equals() method?",
    "answer": "To define object equality based on content rather than memory address, especially for use in collections.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "203.How can we synchronize the elements of a List, a Set or a Map?",
    "answer": "Using `Collections.synchronizedList()`, `Collections.synchronizedSet()`, and `Collections.synchronizedMap()` methods.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "204.What is Hash Collision? How Java handles hash-collision in HashMap?",
    "answer": "Hash Collision: When two different keys produce the same hash code. Java uses separate chaining (linked lists or trees) to store entries with the same hash code.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "205.What are the Hash Collision resolution techniques?",
    "answer": "Separate chaining (linked lists/trees), open addressing (probing).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "206.What is the difference between Queue and Stack data structures?",
    "answer": "Queue: FIFO (First-In, First-Out). Stack: LIFO (Last-In, First-Out).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "207.What is an Iterator in Java?",
    "answer": "An interface that provides a way to access elements of a collection sequentially.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "208.What is the difference between Iterator and Enumeration in Java?",
    "answer": "Iterator: Supports removing elements during iteration. Enumeration: Read-only (no remove).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "209.What is the design pattern used in the implementation of Enumeration in Java?",
    "answer": "Iterator pattern.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "210.Which methods do we need to override to use an object as key in a HashMap?",
    "answer": "`equals()` and `hashCode()`.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "211.How will you reverse a List in Java?",
    "answer": "Using `Collections.reverse()`.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "212.How will you convert an array of String objects into a List?",
    "answer": "Using `Arrays.asList()`.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "213.What is the difference between peek(), poll() and remove() methods of Queue interface in java?",
    "answer": "`peek()`: Retrieves, doesn't remove, returns null if empty. `poll()`: Retrieves, removes, returns null if empty. `remove()`: Retrieves, removes, throws exception if empty.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "214.What is the difference between Array and ArrayList in Java?",
    "answer": "Array: Fixed size. ArrayList: Dynamic size, part of Collections framework.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "215.How will you insert, delete and retrieve elements from a HashMap collection in Java?",
    "answer": "Insert: `put()`. Delete: `remove()`. Retrieve: `get()`.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "216.What are the main differences between HashMap and ConcurrentHashMap in Java?",
    "answer": "HashMap: Not synchronized. ConcurrentHashMap: Thread-safe, concurrent access.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "217.What is the increasing order of performance for following collection classes in Java?",
    "answer": "Requires the list of collection classes to answer specifically. Generally, synchronized collections are slower than unsynchronized ones.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "218.Why does Map interface not extend Collection interface in Java?",
    "answer": "Map stores key-value pairs, Collection stores single elements. Different fundamental concepts.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "219.What are the different ways to iterate elements of a list in Java?",
    "answer": "For loop, enhanced for loop, Iterator, ListIterator, streams.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "220.What is CopyOnWriteArrayList? How it is different from ArrayList in Java?",
    "answer": "Thread-safe; creates a new copy on each modification, avoiding concurrent modification exceptions.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "221.How remove() method is implemented in a HashMap?",
    "answer": "Calculates hash code of the key, finds the bucket, removes the entry from the linked list or tree at that bucket.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "222.What is BlockingQueue in Java Collections?",
    "answer": "A queue that blocks when trying to enqueue to a full queue or dequeue from an empty queue.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "223.How is TreeMap class implemented in Java?",
    "answer": "Using a red-black tree, providing sorted key order.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "224.What is the difference between Fail-fast and Fail-safe iterator in Java?",
    "answer": "Fail-fast: Throws ConcurrentModificationException if collection is modified during iteration. Fail-safe: Operates on a copy of the collection, avoiding the exception.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "225.How does ConcurrentHashMap work in Java?",
    "answer": "Uses segments (buckets) with locks, allowing concurrent access to different parts of the map.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "226.What is the importance of hashCode() and equals() methods?",
    "answer": "Essential for using objects as keys in HashMaps/HashSets; `equals()` defines equality, `hashCode()` provides a hash code for efficient storage/retrieval.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "227.What is the contract of hashCode() and equals() methods in Java?",
    "answer": "If `equals()` returns true, `hashCode()` must return the same value. If `equals()` returns false, `hashCode()` should return different values (ideally).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "228.What is an EnumSet in Java?",
    "answer": "A specialized Set implementation for enums, providing high performance.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "229.What are the main Concurrent Collection classes in Java?",
    "answer": "ConcurrentHashMap, CopyOnWriteArrayList, BlockingQueue, etc.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "230.How will you convert a Collection to SynchronizedCollection in Java?",
    "answer": "Using `Collections.synchronizedCollection()`.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "231.How IdentityHashMap is different from a regular Map in Java?",
    "answer": "IdentityHashMap uses reference equality (==) instead of `equals()` for key comparison.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "232.What is the main use of IdentityHashMap?",
    "answer": "When you need to ensure that keys are considered equal only if they are the *same* object instance.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "233.How can we improve the performance of IdentityHashMap?",
    "answer": "By ensuring keys have different identities (different object instances).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "234.Is IdentityHashMap thread-safe?",
    "answer": "No.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "235.What is a WeakHashMap in Java?",
    "answer": "A Map that allows entries to be garbage collected if the key is no longer strongly referenced.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "236.How can you make a Collection class read Only in Java?",
    "answer": "Using `Collections.unmodifiableList()`, `Collections.unmodifiableSet()`, etc.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "237.When is UnsupportedOperationException thrown in Java?",
    "answer": "When an operation is not supported by a particular collection implementation (e.g., adding to an unmodifiable list).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "238.Let say there is a Customer class. We add objects of Customer class to an ArrayList. How can we sort the Customer objects in ArrayList by using customer firstName attribute of Customer class?",
    "answer": "Implement `Comparable` in Customer or use a `Comparator` with `Collections.sort()`.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "239.What is the difference between Synchronized Collection and Concurrent Collection?",
    "answer": "Synchronized Collection: Single lock for entire collection, low concurrency. Concurrent Collection: Fine-grained locking, higher concurrency.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "240.What is the scenario to use ConcurrentHashMap in Java?",
    "answer": "Multi-threaded environments requiring high concurrency.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "241.How will you create an empty Map in Java?",
    "answer": "Using `new HashMap<>()`, `new TreeMap<>()`, etc.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "242.What is the difference between remove() method of Collection and remove() method of Iterator?",
    "answer": "Collection.remove(): Removes by value. Iterator.remove(): Removes the last element returned by the iterator.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "243.Between an Array and ArrayList, which one is the preferred collection for storing objects?",
    "answer": "ArrayList is generally preferred for dynamic size and functionality, unless size is fixed and performance critical.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "244.Is it possible to replace Hashtable with ConcurrentHashMap in Java?",
    "answer": "Yes, ConcurrentHashMap provides better concurrency and performance.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "245.How CopyOnWriteArrayList class is different from ArrayList and Vector classes?",
    "answer": "CopyOnWriteArrayList is thread-safe using copy-on-write; ArrayList and Vector require external synchronization or are only single-threaded.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "246.Why ListIterator has add() method but Iterator does not have?",
    "answer": "ListIterator supports bidirectional traversal and element insertion at the current position, which Iterator doesn't.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "247.Why do we sometime get ConcurrentModificationException during iteration?",
    "answer": "Collection is modified during iteration without using the Iterator's remove() method (fail-fast behavior).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "248.How will you convert a Map to a List in Java?",
    "answer": "Get the key set or value collection and create a List from it.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "249.How can we create a Map with reverse view and lookup in Java?",
    "answer": "Use a `TreeMap` and `NavigableMap.descendingMap()` for a reverse view, or create a separate reverse lookup map.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "250.How will you create a shallow copy of a Map?",
    "answer": "Using the copy constructor: `new HashMap<>(originalMap)`.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "251.Why we cannot create a generic array in Java?",
    "answer": "Type erasure prevents the JVM from knowing the specific type of the generic array at runtime, leading to potential type safety issues.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "252.What is a PriorityQueue in Java?",
    "answer": "A queue that orders elements based on priority (natural ordering or Comparator).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "253.What are the important points to remember while using Java Collections Framework?",
    "answer": "Choose appropriate collection type, understand thread-safety, use generics for type safety, consider performance implications.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "254.How can we pass a Collection as an argument to a method and ensure that method will not be able to modify it?",
    "answer": "Pass an unmodifiable view of the collection using `Collections.unmodifiableCollection()`.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "255.Can you explain how HashMap works in Java?",
    "answer": "HashMap uses an array of buckets. Keys are hashed to find the bucket. Collisions are resolved using linked lists or trees. `equals()` is used to compare keys in a bucket.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "256.Can you explain how HashSet is implemented in Java?",
    "answer": "HashSet is implemented using a HashMap. The elements are stored as keys in the HashMap, with a dummy value associated with each key.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "257.What is a NavigableMap in Java?",
    "answer": "A sorted Map that provides methods for navigating its entries (e.g., floorKey, ceilingKey).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "258.What is the difference between descendingKeySet() and descendingMap() methods of NavigableMap?",
    "answer": "`descendingKeySet()` returns a reverse-ordered `NavigableSet` of keys. `descendingMap()` returns a reverse-ordered `NavigableMap`.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "259.What is the advantage of NavigableMap over Map?",
    "answer": "Provides methods for navigating the map in sorted order, finding closest matches, etc.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "260.What is the difference between headMap(), tailMap() and subMap() methods of NavigableMap?",
    "answer": "`headMap()`: Returns a view of the map with keys less than the specified key. `tailMap()`: Returns a view with keys greater than or equal to the specified key. `subMap()`: Returns a view with keys within a specified range.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "261.How will you sort objects by Natural order in a Java List?",
    "answer": "Implement the `Comparable` interface and use `Collections.sort()`.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "262.How can we get a Stream from a List in Java?",
    "answer": "Using `List.stream()`.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "263.Can we get a Map from a Stream in Java?",
    "answer": "Yes, using `Stream.collect(Collectors.toMap())`.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "264.What are the popular implementations of Deque in Java?",
    "answer": "ArrayDeque, LinkedList.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "265.What is a Thread in Java?",
    "answer": "A lightweight process that can execute concurrently.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "266.What is the priority of a Thread and how it is used in scheduling?",
    "answer": "Hint to scheduler; higher priority gets preference (not guaranteed).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "267.What is the default priority of a thread in Java?",
    "answer": "NORM_PRIORITY (5).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "268.What are the three different priorities that can be set on a Thread in Java?",
    "answer": "MIN_PRIORITY (1), NORM_PRIORITY (5), MAX_PRIORITY (10).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "269.What is the purpose of join() method in Thread class?",
    "answer": "Waits for a thread to die (complete its execution).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "270.What is the fundamental difference between wait() and sleep() methods?",
    "answer": "`wait()` releases the lock; `sleep()` does not.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "271.Is it possible to call run() method instead of start() on a thread in Java?",
    "answer": "Yes, but it won't create a new thread; it'll run in the current thread.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "272.What is a daemon thread in Java?",
    "answer": "A low-priority thread that runs in the background (e.g., garbage collector).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "273.How can we make a regular thread Daemon thread in Java?",
    "answer": "Call `thread.setDaemon(true)` before starting the thread.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "274.How will you make a user thread into daemon thread if it has already started?",
    "answer": "Cannot be done after the thread has started.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "275.Can we start a thread two times in Java?",
    "answer": "No, it throws IllegalThreadStateException.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "276.What is a Shutdown hook in Java?",
    "answer": "A thread that is executed when the JVM is shutting down.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "277.What is synchronization in Java?",
    "answer": "Mechanism to control access to shared resources by multiple threads.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "278.What is the purpose of Synchronized block in Java?",
    "answer": "To lock a specific block of code for exclusive access by one thread.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "279.What is static synchronization?",
    "answer": "Synchronizing on the class object itself (locking all instances).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "280.What is a Deadlock situation?",
    "answer": "Two or more threads are blocked indefinitely, waiting for each other.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "281.What is the meaning of concurrency?",
    "answer": "Multiple tasks making progress seemingly at the same time.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "282.What is the main difference between process and thread?",
    "answer": "Process: Independent program with its own memory space. Thread: Lightweight process within a process, sharing memory.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "283.What is a process and thread in the context of Java?",
    "answer": "Process: A running JVM. Thread: A unit of execution within the JVM.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "284.What is a Scheduler?",
    "answer": "Component that determines which thread runs at a given time.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "285.What is the minimum number of Threads in a Java program?",
    "answer": "At least one (the main thread).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "286.What are the properties of a Java thread?",
    "answer": "ID, name, priority, state, daemon status, thread group.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "287.What are the different states of a Thread in Java?",
    "answer": "NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITING, TERMINATED.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "288.How will you set the priority of a thread in Java?",
    "answer": "Using `thread.setPriority()`.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "289.What is the purpose of Thread Groups in Java?",
    "answer": "Group threads for management (deprecated).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "290.Why we should not stop a thread by calling its stop() method?",
    "answer": "Unsafe; can leave resources in an inconsistent state.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "291.How will you create a Thread in Java?",
    "answer": "Implement `Runnable` or extend `Thread` class.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "292.How can we stop a thread in the middle of execution in Java?",
    "answer": "Using interruption (set interrupted flag).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "293.How do you access the current thread in a Java program?",
    "answer": "Using `Thread.currentThread()`.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "294.What is Busy waiting in Multi-threading?",
    "answer": "Thread repeatedly checks a condition, consuming CPU cycles.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "295.How can we prevent busy waiting in Java?",
    "answer": "Using `wait()` and `notify()` mechanisms.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "296.Can we use Thread.sleep() method for real-time processing in Java?",
    "answer": "No, `sleep()` is not precise enough for real-time processing.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "297.Can we wake up a thread that has been put to sleep by using Thread.sleep() method?",
    "answer": "Yes, by calling `thread.interrupt()`.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "298.What are the two ways to check if a Thread has been interrupted?",
    "answer": "`Thread.interrupted()` (clears the flag) and `Thread.currentThread().isInterrupted()` (doesn't clear).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "299.How can we make sure that Parent thread waits for termination of Child thread?",
    "answer": "Using `childThread.join()`.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "300.How will you handle InterruptedException in Java?",
    "answer": "Catch it, restore the interrupt status (`Thread.currentThread().interrupt()`) and potentially re-throw or handle.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "301.Which intrinsic lock is acquired by a synchronized method in Java?",
    "answer": "The lock of the object on which the synchronized method is called (or the class object for static synchronized methods).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "302.Can we mark a constructor as synchronized in Java?",
    "answer": "No, constructors cannot be synchronized. Synchronization applies to object access after creation.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "303.Can we use primitive values for intrinsic locks?",
    "answer": "No, intrinsic locks require object references. Use wrapper classes (Integer, etc.) but be aware of pooling.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "304.Do we have re-entrant property in intrinsic locks?",
    "answer": "Yes, a thread that already holds a lock can re-enter a synchronized block or method protected by the same lock.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "305.What is an atomic operation?",
    "answer": "An operation that completes indivisibly; it cannot be interrupted or broken down into smaller steps.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "306.Can we consider the statement i++ as an atomic operation in Java?",
    "answer": "No, it involves read, increment, and write, which are not atomic. Use AtomicInteger for thread-safe incrementing.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "307.What are the Atomic operations in Java?",
    "answer": "Reads and writes of primitive variables (except `long` and `double` unless declared `volatile`), and operations provided by `java.util.concurrent.atomic` classes.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "308.Can you check if following code is thread-safe?",
    "answer": "Requires the code snippet to determine thread safety. Consider shared mutable state, synchronization, and potential race conditions.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "309.What are the minimum requirements for a Deadlock situation in a program?",
    "answer": "Mutual exclusion, hold and wait, no preemption, circular wait.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "310.How can we prevent a Deadlock?",
    "answer": "Avoid circular wait (establish resource ordering), eliminate hold and wait (request all resources at once), allow preemption, or avoid mutual exclusion where possible.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "311.How can we detect a Deadlock situation?",
    "answer": "Thread dump analysis, monitoring tools, or deadlock detection mechanisms provided by the JVM.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "312.What is a Livelock?",
    "answer": "Threads repeatedly change state in response to each other, preventing progress but not blocking (like a polite deadlock).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "313.What is Thread starvation?",
    "answer": "A thread is perpetually denied access to a resource and cannot make progress.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "314.How can a synchronized block cause Thread starvation in Java?",
    "answer": "If the scheduler consistently favors certain threads, other threads might be repeatedly blocked from entering the synchronized block.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "315.What is a Race condition?",
    "answer": "Outcome depends on the unpredictable order of execution of multiple threads accessing shared resources.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "316.What is a Fair lock in multi-threading?",
    "answer": "A lock that grants access to the longest-waiting thread first, preventing starvation (e.g., `ReentrantLock(true)`).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "317.Which two methods of Object class can be used to implement a Producer Consumer scenario?",
    "answer": "`wait()` and `notify()` (or `notifyAll()`).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "318.How JVM determines which thread should wake up on notify()?",
    "answer": "Arbitrarily chooses one waiting thread (unless using a fair lock or other explicit mechanism).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "319.Check if following code is thread-safe for retrieving an integer value from a Queue?",
    "answer": "Requires the code snippet to determine thread safety. Consider concurrent access, synchronization, and potential race conditions.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "320.How can we check if a thread has a monitor lock on a given object?",
    "answer": "There isn't a direct public API to check this. Thread dump analysis can help diagnose lock contention.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "321.What is the use of yield() method in Thread class?",
    "answer": "Suggests that the current thread cede its execution time to other threads (hint to the scheduler).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "322.What is an important point to consider while passing an object from one thread to another thread?",
    "answer": "Ensure thread safety: The object must be immutable or properly synchronized to prevent race conditions.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "323.What are the rules for creating Immutable Objects?",
    "answer": "Final class, private final fields, no setters, deep copy in constructor, defensive copying in getters if mutable fields are unavoidable.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "324.What is the use of ThreadLocal class?",
    "answer": "Creates thread-local variables; each thread has its own independent copy.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "325.What are the scenarios suitable for using ThreadLocal class?",
    "answer": "Storing per-thread context information (e.g., transaction ID, user ID).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "326.How will you improve the performance of an application by multi-threading?",
    "answer": "Identify parallelizable tasks, minimize lock contention, use appropriate thread pool sizes, avoid I/O bottlenecks.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "327.What is scalability in a Software program?",
    "answer": "The ability of a system to handle increasing workload by adding resources.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "328.How will you calculate the maximum speed up of an application by using multiple processors?",
    "answer": "Amdahl's Law: Speedup <= 1 / (S + (1-S)/N), where S is the serial portion and N is the number of processors.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "329.What is Lock contention in multi-threading?",
    "answer": "Multiple threads trying to acquire the same lock, causing delays and reduced performance.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "330.What are the techniques to reduce Lock contention?",
    "answer": "Reduce lock scope, use fine-grained locks, lock splitting, lock striping, use concurrent data structures, avoid holding locks for long operations.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "331.What technique can be used in following code to reduce Lock contention?",
    "answer": "Requires the code snippet. Potential techniques: lock splitting, lock striping, or using concurrent collections.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "332.What is Lock splitting technique?",
    "answer": "Replacing a single lock with multiple locks, each protecting a different part of the shared resource.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "333.Which technique is used in ReadWriteLock class for reducing Lock contention?",
    "answer": "Separating read and write operations, allowing multiple readers or a single writer.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "334.What is Lock striping?",
    "answer": "Using an array of locks, each protecting a different part of the shared data (similar to segments in ConcurrentHashMap).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "335.What is a CAS operation?",
    "answer": "Compare-and-swap: Atomically compares a memory location to a given value and, if they are the same, replaces the contents of that memory location with a new given value.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "336.Which Java classes use CAS operation?",
    "answer": "`java.util.concurrent.atomic` classes (AtomicInteger, AtomicLong, etc.).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "337.Is it always possible to improve performance by object pooling in a multi-threading application?",
    "answer": "No. Object creation might be fast enough, and managing the pool can introduce overhead and contention.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "338.How can techniques used for performance improvement in a single thread application may degrade the performance in a multi-threading application?",
    "answer": "Caching might introduce inconsistency issues, and aggressive optimization might increase lock contention.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "339.What is the relation between Executor and ExecutorService interface?",
    "answer": "ExecutorService extends Executor, adding methods for managing the lifecycle of the executor and submitting Callable tasks.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "340.What will happen on calling submit() method of an ExecutorService instance whose queue is already full?",
    "answer": "It depends on the RejectedExecutionHandler. It might throw a RejectedExecutionException, block, or discard the task.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "341.What is a ScheduledExecutorService?",
    "answer": "An ExecutorService that can schedule tasks to run after a delay or periodically.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "342.How will you create a Thread pool in Java?",
    "answer": "Using `Executors.newFixedThreadPool()`, `Executors.newCachedThreadPool()`, etc., or by creating a `ThreadPoolExecutor` directly.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "343.What is the main difference between Runnable and Callable interface?",
    "answer": "Runnable: `run()` method, doesn't return a value, can't throw checked exceptions. Callable: `call()` method, returns a value, can throw checked exceptions.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "344.What are the uses of Future interface in Java?",
    "answer": "Represents the result of an asynchronous computation; allows checking if the computation is complete, getting the result, and canceling the task.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "345.What is the difference in concurrency in HashMap and in Hashtable?",
    "answer": "HashMap is not thread-safe; Hashtable is thread-safe (synchronized at the method level, leading to lower concurrency).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "346.How will you create synchronized instance of List or Map Collection?",
    "answer": "Using `Collections.synchronizedList()` and `Collections.synchronizedMap()`.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "347.What is a Semaphore in Java?",
    "answer": "Controls access to a shared resource by maintaining a count of permits.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "348.What is a CountDownLatch in Java?",
    "answer": "A synchronization aid that allows one or more threads to wait until a count reaches zero.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "349.What is the difference between CountDownLatch and CyclicBarrier?",
    "answer": "CountDownLatch: One-time event. CyclicBarrier: Can be reused after the count reaches zero.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "350.What are the scenarios suitable for using Fork/Join framework?",
    "answer": "Problems that can be divided into smaller subproblems and solved recursively (e.g., parallel sorting, image processing).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "351.What is the difference between RecursiveTask and RecursiveAction class?",
    "answer": "RecursiveTask: Returns a result. RecursiveAction: Doesn't return a result (void).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "352.In Java 8, can we process stream operations with a Thread pool?",
    "answer": "Yes, using `parallelStream()` or specifying an ExecutorService for custom thread pool management.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "353.What are the scenarios to use parallel stream in Java 8?",
    "answer": "CPU-bound operations on large datasets where order is not critical and the cost of parallelization is less than the gain from parallelism.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "354.How Stack and Heap work in Java multi-threading environment?",
    "answer": "Each thread has its own stack. The heap is shared between all threads.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "355.How can we take Thread dump in Java?",
    "answer": "Using jstack command, JConsole, or programmatically via ThreadMXBean.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "356.Which parameter can be used to control stack size of a thread in Java?",
    "answer": "-Xss VM option.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "357.There are two threads T1 and T2? How will you ensure that these threads run in sequence T1, T2 in Java?",
    "answer": "Use `join()` method. T2 calls `T1.join()` to wait for T1 to complete before starting.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "358.What are the new features released in Java 8?",
    "answer": "Lambda expressions, streams, default methods in interfaces, new Date/Time API, etc.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "359.What are the main benefits of new features introduced in Java 8?",
    "answer": "Improved code readability, conciseness, and support for functional programming and parallel processing.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "360.What is a Lambda expression in Java 8?",
    "answer": "An anonymous function (a block of code that can be passed around and executed).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "361.What are the three main parts of a Lambda expression in Java?",
    "answer": "Parameter list, arrow token (`->`), and body.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "362.What is the data type of a Lambda expression?",
    "answer": "It's a functional interface (an interface with a single abstract method).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "363.What is the meaning of following lambda expression?",
    "answer": "Requires the lambda expression to explain its meaning.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "364.Why did Oracle release a new version of Java like Java 8?",
    "answer": "To modernize the language, improve developer productivity, and enable better support for multicore processors.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "365.What are the advantages of a lambda expression?",
    "answer": "Concise code, functional programming style, improved readability, and easier parallelization.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "366.What is a Functional interface in Java 8?",
    "answer": "An interface with a single abstract method.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "367.What is a Single Abstract Method (SAM) interface in Java 8?",
    "answer": "Synonymous with Functional Interface: An interface with one abstract method.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "368.How can we define a Functional interface in Java 8?",
    "answer": "By ensuring it has only one abstract method (optionally using `@FunctionalInterface` annotation).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "369.Why do we need Functional interface in Java?",
    "answer": "To use lambda expressions (lambdas implement functional interfaces).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "370.Is it mandatory to use @FunctionalInterface annotation to define a Functional interface in Java 8?",
    "answer": "No, but it's good practice; the compiler will verify that it has only one abstract method.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "371.What are the differences between Collection and Stream API in Java 8?",
    "answer": "Collection: Stores data. Stream: Processes data. Streams are lazy and don't modify the source.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "372.What are the main uses of Stream API in Java 8?",
    "answer": "Filtering, mapping, reducing, and collecting data from collections.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "373.What are the differences between Intermediate and Terminal Operations in Java 8 Streams?",
    "answer": "Intermediate: Transform the stream, return a new stream. Terminal: Produce a result or side effect, end the stream.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "374.What is a Spliterator in Java 8?",
    "answer": "An interface for traversing and partitioning a sequence of elements, enabling parallel processing.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "375.What are the differences between Iterator and Spliterator in Java 8?",
    "answer": "Iterator: Sequential traversal. Spliterator: Supports parallel traversal and splitting.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "376.What is Type Inference in Java 8?",
    "answer": "The compiler automatically deduces the type of a variable or expression.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "377.Does Java 7 support Type Inference?",
    "answer": "Yes, but limited (e.g., diamond operator for generic types).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "378.How does Internal Iteration work in Java 8?",
    "answer": "The client provides the operation to perform, and the library controls the iteration (e.g., streams).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "379.What are the main differences between Internal and External Iterator?",
    "answer": "Internal: Library controls iteration. External: Client controls iteration.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "380.What are the main advantages of Internal Iterator over External Iterator in Java 8?",
    "answer": "Easier parallelization, more efficient due to library optimizations.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "381.What are the applications in which we should use Internal Iteration?",
    "answer": "Data processing, filtering, mapping, and reducing operations.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "382.What is the main disadvantage of Internal Iteration over External Iteration?",
    "answer": "Less control over the iteration process.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "383.Can we provide implementation of a method in a Java Interface?",
    "answer": "Yes, using default methods (since Java 8).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "384.What is a Default Method in an Interface?",
    "answer": "A method with a default implementation in an interface.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "385.Why do we need Default method in a Java 8 Interface?",
    "answer": "To add new methods to interfaces without breaking existing implementations.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "386.What is the purpose of a Static method in an Interface in Java 8?",
    "answer": "Utility methods related to the interface (not inherited).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "387.What are the core ideas behind the Date/Time API of Java 8?",
    "answer": "Immutability, thread safety, and a clear separation of concerns.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "388.What are the advantages of new Date and Time API in Java 8 over old Date API?",
    "answer": "Immutability, thread safety, better design, and more comprehensive functionality.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "389.What are the main differences between legacy Date/Time API in Java and Date/Time API of Java 8?",
    "answer": "Legacy API: Mutable, not thread-safe, poor design. Java 8 API: Immutable, thread-safe, better design.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "390.How can we get duration between two dates or time in Java 8?",
    "answer": "Using `Duration.between()` or `Period.between()`.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "391.What is the new method family introduced in Java 8 for processing of Arrays on multi core machines?",
    "answer": "Parallel prefix (scan) operations via `Arrays.parallelPrefix()`",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "392.How does Java 8 solve Diamond problem of Multiple Inheritance?",
    "answer": "Classes can implement multiple interfaces with default methods. If there's a conflict, the class must override the method.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "393.What are the differences between Predicate, Supplier and Consumer in Java 8?",
    "answer": "Predicate: Takes an argument, returns a boolean. Supplier: Takes no arguments, returns a value. Consumer: Takes an argument, returns nothing (void).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "394.Is it possible to have default method definition in an interface without marking it with default keyword?",
    "answer": "No, `default` keyword is required.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "395.Can we create a class that implements two Interfaces with default methods of same name and signature?",
    "answer": "Yes, but the class must override the conflicting default method to resolve the ambiguity.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "396.How Java 8 supports Multiple Inheritance?",
    "answer": "Through interfaces with default methods, but with conflict resolution rules.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "397.In case we create a class that extends a base class and implements an interface. If both base class and interface have a default method with same name and arguments, then which definition will be picked by JVM?",
    "answer": "The class's version (the base class method) takes precedence over the interface's default method.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "398.If we create same method and define it in a class , in its parent class and in an interface implemented by the class, then definition will be invoked if we access it using the reference of Interface and the object of class?",
    "answer": "Using the interface reference, the interface's default method is *not* invoked. The class's or parent class's definition takes precedence.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "399.Can we access a static method of an interface by using reference of the interface?",
    "answer": "No, static methods in interfaces must be accessed through the interface name itself (e.g., `InterfaceName.staticMethod()`).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "400.How can you get the name of Parameter in Java by using reflection?",
    "answer": "With Java 8 and the `-parameters` compiler flag, use `Parameter.getName()`.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "401.What is Optional in Java 8?",
    "answer": "A container object that may or may not contain a non-null value, addressing null pointer exceptions.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "402.What are the uses of Optional?",
    "answer": "Handling null values gracefully, avoiding NullPointerExceptions, improving code readability.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "403.Which method in Optional provides the fallback mechanism in case of null value?",
    "answer": "`orElse()` or `orElseGet()`.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "404.How can we get current time by using Date/Time API of Java 8?",
    "answer": "Using `LocalTime.now()`.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "405.Is it possible to define a static method in an Interface?",
    "answer": "Yes (since Java 8).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "406.How can we analyze the dependencies in Java classes and packages?",
    "answer": "Using tools like JDepend, or the jdeps command-line tool.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "407.What are the new JVM arguments introduced by Java 8?",
    "answer": "Examples: `-XX:+UseG1GC` (G1 garbage collector), `-XX:MetaspaceSize`, `-XX:MaxMetaspaceSize`.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "408.What are the popular annotations introduced in Java 8?",
    "answer": "`@FunctionalInterface`, `@Repeatable`, `@TypeAnnotations`.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "409.What is a StringJoiner in Java 8?",
    "answer": "A utility class to construct a sequence of characters separated by a delimiter.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "410.What is the type of a Lambda expression in Java 8?",
    "answer": "A functional interface.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "411. What is the target type of a lambda expression ?",
    "answer": "The functional interface it implements.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "412.What are the main differences between an interface with default method and an abstract class in Java 8?",
    "answer": "A class can implement multiple interfaces, but only extend one abstract class. Interfaces cannot have state (instance variables).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "413.Is there any difference between a = a + b and a += b expressions?",
    "answer": "a += b implicitly casts the result to the type of a, whereas a = a + b requires explicit casting if the types are different and can be wider after addition",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "414.What does the expression 1.0 / 0.0 return? Will there be any compilation error?",
    "answer": "Returns `Infinity`. No compilation error.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "415.Can we use multiple main methods in multiple classes?",
    "answer": "Yes, each class can have its own main method.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "416.Does Java allow you to override a private or static method?",
    "answer": "No, private methods are not visible and cannot be overridden. Static methods can be hidden, but not overridden.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "417.What happens when you put a key object in a HashMap that is already present?",
    "answer": "The old value is replaced with the new value, and the new value is returned.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "418.How can you make sure that N threads can access N resources without deadlock?",
    "answer": "Establish a resource ordering and ensure all threads acquire resources in that order.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "419.How can you determine if JVM is 32-bit or 64-bit from Java Program?",
    "answer": "Check the `sun.arch.data.model` system property.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "420.What is the right data type to represent Money (like Dollar/Pound) in Java?",
    "answer": "`BigDecimal` (for precision) or `int`/`long` representing cents/pence (with careful handling).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "421.How can you do multiple inheritances in Java?",
    "answer": "Using interfaces (implementing multiple interfaces).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "422.Is ++ operation thread-safe in Java?",
    "answer": "No, it's not atomic. Use AtomicInteger for thread-safe incrementing.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "423.How can you access a non-static variable from the static context?",
    "answer": "By creating an instance of the class.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "424.Let say there is a method that throws NullPointerException in the superclass. Can we override it with a method that throws RuntimeException?",
    "answer": "Yes, you can throw a broader unchecked exception.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "425.How can you mark an array volatile in Java?",
    "answer": "You can't directly mark an array `volatile`. However, you can make the *reference* to the array `volatile`, which guarantees visibility of array *reference* but not the individual elements.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "426.What is a thread local variable in Java?",
    "answer": "A variable where each thread has its own independent copy.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "427.What is the difference between sleep() and wait() methods in Java?",
    "answer": "`sleep()`: Pauses execution without releasing the lock. `wait()`: Releases the lock and waits until notified.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "428.Can you create an Immutable object that contains a mutable object?",
    "answer": "Yes, but you must perform defensive copying to prevent external modification of the mutable object.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "429.How can you convert an Array of bytes to String?",
    "answer": "Using `new String(byte[], Charset)`.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "430.What is difference between CyclicBarrier and CountDownLatch class?",
    "answer": "CountDownLatch: One-time event. CyclicBarrier: Reusable after count reaches zero.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "431.What is the difference between StringBuffer and StringBuilder?",
    "answer": "StringBuffer is synchronized (thread-safe), StringBuilder is not.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "432.Which class contains clone method? Cloneable or Object class?",
    "answer": "Object class. Cloneable is a marker interface.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "433.How will you take thread dump in Java?",
    "answer": "Using jstack command, JConsole, or ThreadMXBean.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "434.Can you cast an int variable into a byte variable? What happens if the value of int is larger than byte?",
    "answer": "Yes. The value is truncated (only the least significant 8 bits are retained).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "435.In Java, can we store a double value in a long variable without explicit casting?",
    "answer": "No, explicit casting is required (and you'll lose the fractional part).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "436.What will this return 5*0.1 == 0.5? true or false?",
    "answer": "Likely false due to floating-point imprecision.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "437.Out of an int and Integer, which one takes more memory?",
    "answer": "Integer (wrapper object) takes more memory due to object overhead.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "438.Can we use String in the switch case statement in Java?",
    "answer": "Yes (since Java 7).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "439.Can we use multiple main methods in same class?",
    "answer": "Yes, they can be overloaded, but only `public static void main(String[] args)` is the entry point.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "440.When creating an abstract class, is it a good idea to call abstract methods inside its constructor?",
    "answer": "Generally not a good idea. The subclass might not be fully initialized when the abstract method is called.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "441.How can you do constructor chaining in Java?",
    "answer": "Using `this()` to call another constructor in the same class.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "442.How can we find the memory usage of JVM from Java code?",
    "answer": "Using `Runtime.getRuntime().totalMemory()`, `freeMemory()`, and `maxMemory()`.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "443.What is the difference between x == y and x.equals(y) expressions in Java?",
    "answer": "`==`: Compares object references (or primitive values). `equals()`: Compares object content (as defined by the class).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "444. How can you guarantee that the garbage collection takes place?",
    "answer": "You cannot guarantee garbage collection; it's controlled by the JVM. You can *request* it with `System.gc()`, but it's not guaranteed.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "445.What is the relation between x.hashCode() method and x.equals(y) method of Object class?",
    "answer": "If x.equals(y) is true, then x.hashCode() must be equal to y.hashCode().",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "446.What is a compile time constant in Java?",
    "answer": "A variable whose value is known at compile time (e.g., `final int x = 10`).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "447.Explain the difference between fail-fast and fail-safe iterators?",
    "answer": "Fail-fast: Throws ConcurrentModificationException. Fail-safe: Operates on a copy.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "448. You have a character array and a String. Which one is more secure to store sensitive data (like password, date of birth, etc.)?",
    "answer": "Character array. String is immutable and can linger in memory. Character array can be overwritten after use.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "449.Why do you use volatile keyword in Java?",
    "answer": "To ensure visibility of variable changes across threads (prevents caching issues).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "450.What is the difference between poll() and remove() methods of Queue in Java?",
    "answer": "`poll()`: Returns null if empty. `remove()`: Throws exception if empty.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "451.Can you catch an exception thrown by another thread in Java?",
    "answer": "Generally no. Exceptions are handled within the thread they occur.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "452.How do you decide which type of Inner Class \u2013 Static or Non-Static to use in Java?",
    "answer": "If the inner class needs access to the enclosing class's instance members, use non-static (inner). Otherwise, use static.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "453.What are the different types of Classloaders in Java?",
    "answer": "Bootstrap, Extension, Application (System).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "454.What are the situations in which you choose HashSet or TreeSet?",
    "answer": "HashSet: Fast, unordered. TreeSet: Sorted.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "455.What is the use of method references in Java?",
    "answer": "A shorthand for lambda expressions that call an existing method.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "456.Do you think Java Enums are more powerful than integer constants?",
    "answer": "Yes. Enums provide type safety, can have methods and fields, and are more readable.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "457.Why do we use static initializers in Java?",
    "answer": "To initialize static variables with complex logic.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "458.Your client is complaining that your code is throwing NoClassDefFoundError or NoSuchMethodError, even though you are able to compile your code without error and method exists in your code. What could be the reason behind this?",
    "answer": "Class is missing at runtime (classpath issue) or incompatible library versions.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "459.How can you check if a String is a number by using regular expression?",
    "answer": "Using `String.matches(\"-?\\d+(\\.\\d+)?\")` (for integers and decimals).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "460.What is the difference between the expressions String s = \"Temporary\" and String s = new String(\"Temporary \")? Which one is better and more efficient?",
    "answer": "`String s = \"Temporary\"` uses String interning (more efficient). `String s = new String(\"Temporary \")` creates a new object, even if the same literal exists.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "461.In Java, can two equal objects have the different hash code?",
    "answer": "No. If `x.equals(y)` is true, then `x.hashCode()` *must* be equal to `y.hashCode()`.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "462.How can we print an Array in Java?",
    "answer": "Using `Arrays.toString()` or `Arrays.deepToString()` (for multi-dimensional arrays).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "463.Is it ok to use random numbers in the implementation of hashcode() method in Java?",
    "answer": "No. Hash code must be consistent for equal objects.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "464.Between two types of dependency injections, constructor injection and setter dependency injection, which one is better?",
    "answer": "Constructor injection promotes immutability and required dependencies.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "465.What is the difference between DOM and SAX parser in Java?",
    "answer": "DOM: Loads entire XML into memory. SAX: Event-based, processes XML sequentially (less memory).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "466.Between Enumeration and Iterator, which one has better performance in Java?",
    "answer": "Iterator (more modern and flexible; performance differences are usually negligible).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "467.What is the difference between pass by reference and pass by value?",
    "answer": "Pass by value: Copies the value. Pass by reference: Passes a reference to the original data.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "468.What are the different ways to sort a collection in Java?",
    "answer": "`Collections.sort()`, `Stream.sorted()`, implementing `Comparable` or using a `Comparator`.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "469.Why Collection interface doesn\u2019t extend Cloneable and Serializable interfaces?",
    "answer": "Cloneable and Serializable are specific to object implementation. All collections don't need to support these operations.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "470.What is the difference between a process and a thread in Java?",
    "answer": "Process: Independent program. Thread: Unit of execution within a process.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "471.What are the benefits of using an unordered array over an ordered array?",
    "answer": "Faster insertion (no need to maintain order) if order is not required",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "472.Between HashSet and TreeSet collections in Java, which one is better?",
    "answer": "Depends on requirements. HashSet is faster for add/remove/contains operations; TreeSet keeps elements sorted.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "473.When does JVM call the finalize() method?",
    "answer": "Just before garbage collecting an object (unpredictable and discouraged).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "474.When would you use Serial Garabage collector or Throughput Garbage collector in Java?",
    "answer": "Serial GC: Single-threaded, good for small heaps or single-processor machines. Throughput GC: Multithreaded, aims for high throughput (less pause time sensitivity).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "475.In Java, if you set an object reference to null, will the Garbage Collector immediately free the memory held by that object?",
    "answer": "No, it just makes the object eligible for garbage collection when it's determined to be unreachable.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "476.How can you make an Object eligible for Garbage collection in Java?",
    "answer": "Remove all reachable references to the object (set them to null, etc.).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "477.When do you use Exception or Error in Java? What is the difference between these two?",
    "answer": "Exception: Recoverable conditions. Error: Unrecoverable conditions (e.g., OutOfMemoryError).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "478.What is the advantage of PreparedStatement over Statement class in Java?",
    "answer": "PreparedStatement: Prepared statement, prevents SQL injection, can be more efficient for repeated queries.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "479.In Java, what is the difference between throw and throws keywords?",
    "answer": "throw: used to throw an exception. throws: used in method signature to declare exception.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "480.What happens to the Exception object after the exception handling is done?",
    "answer": "The Exception object becomes eligible for garbage collection.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "481.How do you find which client machine is sending request to your servlet in Java?",
    "answer": "Using `request.getRemoteAddr()`.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "482.What is the difference between a Cookie and a Session object in Java?",
    "answer": "Cookie: Stored on client-side. Session: Stored on server-side.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "483.Which protocol does Browser and Servlet use to communicate with each other?",
    "answer": "HTTP (Hypertext Transfer Protocol).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "484. What is HTTP Tunneling?",
    "answer": "Using HTTP to encapsulate other protocols that might be blocked by firewalls.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "485.Why do we use JSP instead of Servlet in Java?",
    "answer": "JSP simplifies view creation (HTML with Java code), easier to maintain.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "486.Is empty \u2018.java\u2019 file name a valid source file name in Java?",
    "answer": "Yes, it is a valid but useless file.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "487.How do you implement Servlet Chaining in Java?",
    "answer": "Using `RequestDispatcher.forward()` or `include()` to pass requests between servlets.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "488.Can you instantiate this class?",
    "answer": "Requires seeing the class definition to answer.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "489.Why Java does not support operator overloading?",
    "answer": "Simplicity and avoiding ambiguity and complexity.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "490.Why String class is Immutable or Final in Java?",
    "answer": "Security, caching, thread safety.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "491.What is the difference between sendRedirect and forward methods?",
    "answer": "sendRedirect: client-side redirect, new request. forward: server-side, same request.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "492.How do you fix your Serializable class, if it contains a member that is not serializable?",
    "answer": "Mark the member as `transient` or implement `Externalizable`.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "493.What is the use of run time polymorphism in Java?",
    "answer": "Allows treating objects of different classes uniformly, promoting flexibility and extensibility.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "494.What are the rules of method overloading and method overriding in Java?",
    "answer": "Overloading: Same name, different parameters. Overriding: Same signature, subclass.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "495.What is the difference between a class and an object in Java?",
    "answer": "Class: Blueprint. Object: Instance of a class.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "496.Can we create an abstract class that extends another abstract class?",
    "answer": "Yes.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "497.Why do you use Upcasting or Downcasting in Java ?",
    "answer": "Upcasting: Generalizing the type. Downcasting: Specializing the type.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "498.What is the reason to organize classes and interfaces in a package in Java?",
    "answer": "Namespace management and code organization.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "499.What is information hiding in Java?",
    "answer": "Restricting access to internal implementation details (using access modifiers).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "500.Why does Java provide default constructor?",
    "answer": "If no constructors are defined, the compiler creates a no-arg default constructor for object creation.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "501.What is the difference between super and this keywords in Java?",
    "answer": "`this`: Refers to the current object. `super`: Refers to the superclass.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "502.What is the advantage of using Unicode characters in Java?",
    "answer": "Supports a wide range of characters from different languages.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "503.Can you override an overloaded method in Java?",
    "answer": "Yes.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "504.How can we change the heap size of a JVM?",
    "answer": "Using `-Xms` (initial heap size) and `-Xmx` (maximum heap size) JVM options.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "505.Why should you define a default constructor in Java?",
    "answer": "To allow object creation without arguments, particularly if other constructors are defined.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "506.How will you make an Object Immutable in Java?",
    "answer": "Final class, private final fields, no setters, deep copy in constructor, defensive copying in getters.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "507.How can you prevent SQL Injection in Java Code?",
    "answer": "Using PreparedStatement with parameterized queries.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "508.Which two methods should be always implemented by HashMap key Object?",
    "answer": "`equals()` and `hashCode()`.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "509.Why an Object used as Key in HashMap should be Immutable?",
    "answer": "To ensure consistent hash code, preventing data corruption in the HashMap.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "510.How can we share an object between multiple threads?",
    "answer": "Using thread-safe data structures or proper synchronization mechanisms.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "511. How can you determine if your program has a deadlock?",
    "answer": "Thread dump analysis (look for blocked threads waiting for each other).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "512.What are the implicit objects in JSP?",
    "answer": "request, response, session, application, out, page, pageContext, config, exception.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "513.How will you extend JSP code?",
    "answer": "Using custom tags, tag libraries, or including Java code snippets.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "514.How will you handle runtime exceptions in JSP?",
    "answer": "Using `<%@ page errorPage=\"error.jsp\" %>` directive and defining an error page.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "515.How will you prevent multiple submits of a page that come by clicking refresh button multiple times?",
    "answer": "Using the Post-Redirect-Get (PRG) pattern (redirect after processing the form).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "516.How will you implement a thread safe JSP page?",
    "answer": "Minimize use of instance variables, use synchronized blocks/methods when needed.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "517.How will you include a static file in a JSP page?",
    "answer": "Using `<%@ include file=\"header.html\" %>` directive.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "518.What are the lifecycle methods of a JSP?",
    "answer": "`jspInit()`, `_jspService()`, `jspDestroy()`.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "519.What are the advantages of using JSP in web architecture?",
    "answer": "Separation of concerns (presentation from logic), easy development, and reusable components.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "520.What is the advantage of JSP over Javascript?",
    "answer": "JSP executes on the server-side (secure, database access), Javascript on client-side (UI interactions).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "521.What is the Lifecycle of JSP?",
    "answer": "Translation, compilation, class loading, instantiation, request processing, destruction.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "522.What is a JSP expression?",
    "answer": "A scriptlet that evaluates to a value (e.g., `<%= variable %>`).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "523.What are the different types of directive tags in JSP?",
    "answer": "page, include, taglib.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "524.What is session attribute in JSP?",
    "answer": "Data stored in the session object, accessible across multiple requests from the same user.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "525.What are the different scopes of a JSP object?",
    "answer": "page, request, session, application.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "526.What is pageContext in JSP?",
    "answer": "Provides access to all scopes and other page attributes.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "527.What is the use of jsp:useBean in JSP?",
    "answer": "Declares and creates (or reuses) a JavaBean instance.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "528.What is difference between include Directive and include Action of JSP?",
    "answer": "Directive: Static include (at translation time). Action: Dynamic include (at runtime).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "529.How will you use other Java files of your application in JSP code?",
    "answer": "Import the classes and use them as regular Java objects.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "530.How will you use an existing class and extend it to use in the JSP?",
    "answer": "Use `<%@ page extends=\"MyClass\" %>` directive.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "531.Why _jspService method starts with _ symbol in JSP?",
    "answer": "Indicates that it is a generated method, not intended for direct modification.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "532.Why do we use tag library in JSP?",
    "answer": "To encapsulate reusable logic and presentation components.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "533.What is the different type of tag library groups in JSTL?",
    "answer": "Core, XML, Formatting, SQL, Functions.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "534.How will you pass information from one JSP to another JSP?",
    "answer": "Using request attributes, session attributes, or URL parameters.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "535.How will you call a stored procedure from JSP?",
    "answer": "Using JDBC and the `CallableStatement` interface.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "536.Can we override _jspService() method in JSP?",
    "answer": "No, it's generated by the JSP container.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "537.What is a directive in JSP?",
    "answer": "Instructions to the JSP container (e.g., page, include, taglib).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "538.How will you implement Session tracking in JSP?",
    "answer": "Using the implicit `session` object or by setting cookies.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "539.How do you debug code in JSP?",
    "answer": "Using logging, browser developer tools, or remote debugging.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "540.How will you implement error page in JSP?",
    "answer": "Using `<%@ page errorPage=\"error.jsp\" %>` directive.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "541.How will you send XML data from a JSP?",
    "answer": "Set the `Content-Type` header to `application/xml` and write XML data to the response.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "542.What happens when we request for a JSP page from web browser?",
    "answer": "JSP container translates, compiles, and executes the JSP, sending HTML to the browser.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "543.How will you implement Auto Refresh of page in JSP?",
    "answer": "Using `<meta http-equiv=\"refresh\" content=\"5\">` in the HTML header.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "544.What are the important status codes in HTTP?",
    "answer": "200 (OK), 301 (Moved Permanently), 400 (Bad Request), 404 (Not Found), 500 (Internal Server Error).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "545.What is the meaning of Accept attribute in HTTP header?",
    "answer": "Indicates the content types the client is willing to receive.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "546.What is the difference between Expression and Scriptlet in JSP?",
    "answer": "Expression: Outputs a value (`<%= %>`). Scriptlet: Executes Java code (`<% %>`).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "547.How will you delete a Cookie in JSP?",
    "answer": "Set the cookie's maxAge to 0.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "548.How will you use a Cookie in JSP?",
    "answer": "Retrieve it from the `request.getCookies()` array.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "549.What is the main difference between a Session and Cookie in JSP?",
    "answer": "Session: Server-side, more secure. Cookie: Client-side, less secure.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "550.How will you prevent creation of session in JSP?",
    "answer": "Using `<%@ page session=\"false\" %>` directive.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "551.What is an output comment in JSP?",
    "answer": "Comments that are sent to the client (visible in the HTML source)  `<!-- comment -->`.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "552.How will you prevent caching of HTML output by web browser in JSP?",
    "answer": "Set HTTP headers: `response.setHeader(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");`",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "553.How will you redirect request to another page in browser in JSP code?",
    "answer": "Using `response.sendRedirect(\"newPage.jsp\")`.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "554.What is the difference between sendRedirect and forward in a JSP?",
    "answer": "`sendRedirect()`: client-side redirect, new request. `forward()`: server-side, same request.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "555.What is the use of config implicit object in JSP?",
    "answer": "Provides access to servlet configuration information.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "556.What is the difference between init-param and context-param?",
    "answer": "`init-param`: Servlet-specific configuration. `context-param`: Application-wide configuration.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "557.What is the purpose of RequestDispatcher?",
    "answer": "To forward or include requests to other resources (servlets, JSPs, HTML files).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "558.How can be read data from a Form in a JSP?",
    "answer": "Using `request.getParameter()` methods.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "559.What is a filter in JSP?",
    "answer": "Component that intercepts requests and responses to perform preprocessing or postprocessing.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "560.How can you upload a large file in JSP?",
    "answer": "Using a library like Apache Commons FileUpload.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "561.In which scenario, Container initializes multiple JSP/Servlet objects?",
    "answer": "When using the `SingleThreadModel` interface (deprecated) or for session management, and load balancing.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "562.When will you use Strategy Design Pattern in Java?",
    "answer": "When you have multiple algorithms for a specific task and want to choose one at runtime.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "563.What is Observer design pattern?",
    "answer": "Defines a one-to-many dependency between objects, so that when one object changes state, all its dependents are notified and updated automatically.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "564.What are the examples of Observer design pattern in JDK?",
    "answer": "java.util.EventListener and its implementations, java.beans.PropertyChangeListener.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "565.How Strategy design pattern is different from State design pattern in Java?",
    "answer": "Strategy: Chooses algorithm at runtime. State: Object changes its behavior based on its internal state.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "566.Can you explain Decorator design pattern with an example in Java?",
    "answer": "Attaches additional responsibilities to an object dynamically. Example: wrapping an InputStream with a BufferedInputStream.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "567.What is a good scenario for using Composite design Pattern in Java?",
    "answer": "Representing part-whole hierarchies (e.g., a file system with directories and files).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "568.Have you used Singleton design pattern in your Java project?",
    "answer": "Yes, [describe your experience and use case].",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "569.What are the main uses of Singleton design pattern in Java project?",
    "answer": "Centralized configuration, logging, thread pool management, caching.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "570.Why java.lang.Runtime is a Singleton in Java?",
    "answer": "To provide a single point of access to the JVM runtime environment.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "571.What is the way to implement a thread-safe Singleton design pattern in Java?",
    "answer": "Double-checked locking, enum singleton, or using a static inner class.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "572.What are the examples of Singleton design pattern in JDK?",
    "answer": "`java.lang.Runtime`, `java.lang.System`.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "573.What is Template Method design pattern in Java?",
    "answer": "Defines the skeleton of an algorithm in a base class, allowing subclasses to implement specific steps without changing the overall structure.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "574.What are the examples of Template method design pattern in JDK?",
    "answer": "InputStream and its subclasses (e.g., FileInputStream).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "575.Can you tell some examples of Factory Method design pattern implementation in Java?",
    "answer": "`java.util.Calendar.getInstance()`, `java.text.NumberFormat.getInstance()`.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "576.What is the benefit we get by using static factory method to create object?",
    "answer": "More control over object creation, can return cached objects, can return subclasses.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "577.What are the examples of Builder design pattern in JDK?",
    "answer": "`StringBuilder`, `DocumentBuilder`.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "579.What are the examples of Decorator design pattern in JDK?",
    "answer": "`java.io.BufferedInputStream`, `java.io.BufferedReader`",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "580.What are the examples of Proxy design pattern in JDK?",
    "answer": "RMI (Remote Method Invocation), JPA providers.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "581.What are the examples of Chain of Responsibility design pattern in JDK?",
    "answer": "`java.util.logging.Logger`",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "582.What are the main uses of Command design pattern?",
    "answer": "Encapsulating a request as an object, supporting undo/redo, queuing requests.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "583.What are the examples of Command design pattern in JDK?",
    "answer": "`javax.swing.Action`",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "584.What are the examples of Interpreter design pattern in JDK?",
    "answer": "`java.util.regex.Pattern`",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "585.What are the examples of Mediator design pattern in JDK?",
    "answer": "`java.util.Timer`",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "586.What are the examples of Strategy design pattern in JDK?",
    "answer": "`java.util.Comparator`, `java.nio.charset.Charset`",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "587.What are the examples of Visitor design pattern in JDK?",
    "answer": "Not directly present in core JDK but used in compiler implementations, some IDE functionalities",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "588.How Decorator design pattern is different from Proxy pattern?",
    "answer": "Decorator adds responsibilities; Proxy controls access.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "589.What are the different scenarios to use Setter and Constructor based injection in Dependency Injection (DI) design pattern?",
    "answer": "Constructor: Required dependencies, immutability. Setter: Optional dependencies, flexibility.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "590.What are the different scenarios for using Proxy design pattern?",
    "answer": "Remote proxies (RMI), virtual proxies (lazy loading), protection proxies (access control).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "591.What is the main difference between Adapter and Proxy design pattern?",
    "answer": "Adapter: Changes interface. Proxy: Controls access to the original object.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "592.When will you use Adapter design pattern in Java?",
    "answer": "When you need to use an existing class with an incompatible interface.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "593.What are the examples of Adapter design pattern in JDK?",
    "answer": "`java.io.InputStreamReader`, `java.io.OutputStreamWriter`",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "594.What is the difference between Factory and Abstract Factory design pattern?",
    "answer": "Factory: Creates objects of a single type. Abstract Factory: Creates families of related objects.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "595.What is Open/closed design principle in Software engineering?",
    "answer": "Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "596.What is SOLID design principle?",
    "answer": "Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "597.What is Builder design pattern?",
    "answer": "Separates the construction of a complex object from its representation, allowing the same construction process to create different representations.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "598.What are the different categories of Design Patterns used in Object Oriented Design?",
    "answer": "Creational, Structural, Behavioral.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "599.What is the design pattern suitable to access elements of a Collection?",
    "answer": "Iterator pattern.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "600.How can we implement Producer Consumer design pattern in Java?",
    "answer": "Using `wait()`, `notify()`, or `notifyAll()` methods and a shared queue.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "601.What design pattern is suitable to add new features to an existing object?",
    "answer": "Decorator pattern.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "602.Which design pattern can be used when to decouple abstraction from the implementation?",
    "answer": "Bridge pattern.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "603.Which is the design pattern used in Android applications?",
    "answer": "Many patterns are used, including MVC, MVP, and MVVM, as well as Singleton, Factory, and Observer.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "604.How can we prevent users from creating more than one instance of singleton object by using clone() method?",
    "answer": "Override the `clone()` method and throw a `CloneNotSupportedException`.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "605.What is the use of Interceptor design pattern?",
    "answer": "To intercept and process requests or responses, adding cross-cutting concerns like logging, authentication, or validation.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "606.What are the Architectural patterns that you have used?",
    "answer": "Examples: MVC, Microservices, Layered architecture.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "607.What are the popular uses of Fa\u00e7ade design pattern?",
    "answer": "Providing a simplified interface to a complex subsystem, hiding the complexity from the client.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "608.What is the difference between Builder design pattern and Factory design pattern?",
    "answer": "Builder: Constructs complex objects step-by-step. Factory: Creates objects without exposing the creation logic.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "609.What is Memento design pattern?",
    "answer": "Captures and externalizes an object's internal state, allowing the object to be restored to this state later.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "610.What is an AntiPattern?",
    "answer": "A commonly used but ineffective or counterproductive solution to a problem.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "611. What is a Data Access Object (DAO) design pattern?",
    "answer": "Abstracts the data access layer, separating the application logic from the database implementation.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "612.What is Spring framework?",
    "answer": "A comprehensive Java framework for building enterprise applications.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "613.What are the benefits of Spring framework in software development?",
    "answer": "Simplified development, dependency injection, aspect-oriented programming, transaction management, and testing support.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "614.What are the modules in Core Container of Spring framework?",
    "answer": "Core, Beans, Context, Expression Language (SpEL).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "615.What are the modules in Data Access/Integration layer of Spring framework?",
    "answer": "JDBC, ORM, JMS, Transactions.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "616.What are the modules in Web layer of Spring framework?",
    "answer": "Web, Web MVC, WebSocket, WebFlux.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "617.What is the main use of Core Container module in Spring framework?",
    "answer": "Provides fundamental functionality like dependency injection and inversion of control.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "618.What kind of testing can be done in Spring Test Module?",
    "answer": "Unit testing, integration testing, and mocking.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "619.What is the use of BeanFactory in Spring framework?",
    "answer": "Provides a basic IoC container for managing beans.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "620.Which is the most popular implementation of BeanFactory in Spring?",
    "answer": "ApplicationContext (which extends BeanFactory).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "621.What is XMLBeanFactory in Spring framework?",
    "answer": "A BeanFactory implementation that reads bean definitions from an XML file (deprecated; use ApplicationContext).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "622.What are the uses of AOP module in Spring framework?",
    "answer": "Implementing cross-cutting concerns like logging, security, and transaction management.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "623.What are the benefits of JDBC abstraction layer module in Spring framework?",
    "answer": "Simplified JDBC coding, exception handling, and resource management.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "624.How does Spring support Object Relational Mapping (ORM) integration?",
    "answer": "Provides integration with Hibernate, JPA, JDO, etc.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "625.How does Web module work in Spring framework?",
    "answer": "Provides support for building web applications (handling requests, responses, etc.).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "626.What are the main uses of Spring MVC module?",
    "answer": "Building web applications following the Model-View-Controller design pattern.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "627.What is the purpose of Spring configuration file?",
    "answer": "Defines the beans, their dependencies, and other configuration settings for the application.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "628.What is the purpose of Spring IoC container?",
    "answer": "Manages the lifecycle of beans and injects dependencies.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "629.What is the main benefit of Inversion of Control (IOC) principle?",
    "answer": "Decouples components, making the application more modular, testable, and maintainable.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "630.Does IOC containers support Eager Instantiation or Lazy loading of beans?",
    "answer": "Both eager instantiation (default) and lazy loading are supported.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "631.What are the benefits of ApplicationContext in Spring?",
    "answer": "Extends BeanFactory, adding features like AOP integration, message source support, and web application context.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "632.How will you implement ApplicationContext in Spring framework?",
    "answer": "Using implementations like `ClassPathXmlApplicationContext` or `AnnotationConfigApplicationContext`.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "633.Explain the difference between ApplicationContext and BeanFactory in Spring?",
    "answer": "ApplicationContext is a more complete and feature-rich container that extends BeanFactory.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "634.Between ApplicationContext and BeanFactory which one is preferable to use in Spring?",
    "answer": "ApplicationContext is generally preferred due to its extended features.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "635.What are the main components of a typical Spring based application?",
    "answer": "Beans, configuration files (XML or annotations), and the IoC container.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "636.Explain Dependency Injection (DI) concept in Spring framework?",
    "answer": "The container provides dependencies to beans, rather than the beans creating or looking them up themselves.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "637.What are the different roles in Dependency Injection (DI)?",
    "answer": "Service object, client, and injector (the Spring container).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "638.Spring framework provides what kinds of Dependency Injection mechanism?",
    "answer": "Constructor-based and setter-based injection.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "639.In Spring framework, which Dependency Injection is better? Constructor-based DI or Setter-based DI?",
    "answer": "Constructor-based DI is generally preferred for required dependencies (promotes immutability).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "640.What are the advantages of Dependency Injection (DI)?",
    "answer": "Decoupling, testability, reusability, and maintainability.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "641.What are the disadvantages of Dependency Injection (DI)?",
    "answer": "Increased complexity, potential for runtime errors (if dependencies are not configured correctly).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "642.What is a Spring Bean?",
    "answer": "An object managed by the Spring IoC container.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "643.What does the definition of a Spring Bean contain?",
    "answer": "Class name, scope, lifecycle methods, dependencies, and other configuration settings.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "644.What are the different ways to provide configuration metadata to a Spring Container?",
    "answer": "XML configuration files, annotation-based configuration, and Java-based configuration.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "645.What are the different scopes of a Bean supported by Spring?",
    "answer": "singleton, prototype, request, session, application, websocket, global session (in portlet contexts).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "646.How will you define the scope of a bean in Spring?",
    "answer": "Using the `scope` attribute in XML configuration or the `@Scope` annotation.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "647.Is it safe to assume that a Singleton bean is thread safe in Spring Framework?",
    "answer": "No. Singleton scope just means there is one instance per container. Thread safety depends on the bean's implementation.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "648.What are the design-patterns used in Spring framework?",
    "answer": "Factory, Singleton, Prototype, Proxy, Template Method, Front Controller, and more.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "649.What is the lifecycle of a Bean in Spring framework?",
    "answer": "Instantiation, population of properties, initialization (init methods), ready for use, destruction (destroy methods).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "650.What are the two main groups of methods in a Bean\u2019s lifecycle?",
    "answer": "Initialization methods and destruction methods.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "651.Can we override main lifecycle methods of a Bean in Spring?",
    "answer": "No, but you can implement initialization and destruction callbacks.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "652.What are Inner beans in Spring?",
    "answer": "Beans defined within the scope of another bean (anonymous and only accessible within that bean).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "653.How can we inject a Java Collection in Spring framework?",
    "answer": "Using the `<list>`, `<set>`, `<map>`, and `<props>` elements in XML configuration or using annotations like `@Autowired` with appropriate collection types.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "654.What is Bean wiring in Spring?",
    "answer": "Configuring the dependencies between beans in the Spring container.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "655.What is Autowiring in Spring?",
    "answer": "Spring automatically resolving and injecting dependencies based on type or name.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "656.What are the different modes of Autowiring supported by Spring?",
    "answer": "no, byName, byType, constructor, autodetect (deprecated).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "657.What are the cases in which Autowiring may not work in Spring framework?",
    "answer": "Ambiguous dependencies (multiple beans of the same type), no matching bean found.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "658.Is it allowed to inject null or empty String values in Spring?",
    "answer": "Yes, but you might need to configure how null values are handled (e.g., using `@Value` annotation with a default value).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "659.What is a Java-based Configuration in Spring?",
    "answer": "Using Java code and annotations (e.g., `@Configuration`, `@Bean`) to define Spring configuration.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "660.What is the purpose of @Configuration annotation?",
    "answer": "Indicates that a class is a source of bean definitions.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "661.What is the difference between Full @Configuration and 'lite' @Beans mode?",
    "answer": "Full `@Configuration` supports inter-bean dependencies and proxying. 'lite' `@Bean` methods don't support these advanced features.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "662.In Spring framework, what is Annotation-based container configuration?",
    "answer": "Using annotations (e.g., `@Component`, `@Autowired`) to configure beans and dependencies instead of XML.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "663.How will you switch on Annotation based wiring in Spring?",
    "answer": "Using `<context:annotation-config/>` in XML configuration or using `@EnableAspectJAutoProxy` in Java configuration.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "664.What is @Autowired annotation?",
    "answer": "Used to automatically inject dependencies into a bean.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "665.What is @Required annotation?",
    "answer": "Indicates that a bean property must be set (deprecated in favor of constructor injection).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "666.What are the two ways to enable RequiredAnnotationBeanPostProcessor in Spring?",
    "answer": "Using `<bean class=\"org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor\"/>` in XML or registering it programmatically.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "667.What is @Qualifier annotation in Spring?",
    "answer": "Used to resolve ambiguity when multiple beans of the same type exist (specifies which bean to inject).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "668.How Spring framework makes JDBC coding easier for developers?",
    "answer": "Provides JdbcTemplate, exception translation, and resource management.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "669.What is the purpose of JdbcTemplate?",
    "answer": "Simplifies JDBC operations (querying, updating, calling stored procedures).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "670.What are the benefits of using Spring DAO?",
    "answer": "Consistent exception handling, simplified JDBC coding, and transaction management.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "671.What are the different ways to use Hibernate in Spring?",
    "answer": "Using HibernateTemplate (deprecated), LocalSessionFactoryBean, or Spring Data JPA.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "672.What types of Object Relational Mapping (ORM) are supported by Spring?",
    "answer": "Hibernate, JPA, JDO, iBATIS/MyBatis.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "673.How will you integrate Spring and Hibernate by using HibernateDaoSupport?",
    "answer": "HibernateDaoSupport is deprecated. Use LocalSessionFactoryBean and inject the SessionFactory.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "674.What are the different types of the Transaction Management supported by Spring framework?",
    "answer": "Programmatic and declarative transaction management.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "675.What are the benefits provided by Spring Framework\u2019s Transaction Management?",
    "answer": "Consistent transaction handling, declarative transaction management, and integration with different transaction managers.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "676.Given a choice between declarative and programmatic Transaction Management, which method will you choose?",
    "answer": "Declarative transaction management is generally preferred for its simplicity and separation of concerns.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "677.What is Aspect Oriented Programming (AOP)",
    "answer": "A programming paradigm that allows modularizing cross-cutting concerns (logging, security, etc.).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "678.What is an Aspect in Spring?",
    "answer": "A module that encapsulates a cross-cutting concern (e.g., logging aspect).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "679.In Spring AOP, what is the main difference between a Concern and a Cross cutting concern?",
    "answer": "Concern: Specific to a module. Cross-cutting concern: Affects multiple modules.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "680.What is a Joinpoint in Spring AOP?",
    "answer": "A point in the execution of an application where an aspect can be applied (e.g., method call).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "681.What is an Advice in Spring AOP?",
    "answer": "The action taken by an aspect at a particular joinpoint (e.g., logging before a method call).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "682.What are the different types of Advice in Spring AOP?",
    "answer": "Before, After, AfterReturning, AfterThrowing, Around.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "683.What is a Pointcut in Spring AOP?",
    "answer": "An expression that defines the joinpoints where an advice should be applied.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "684.What is an Introduction in Spring AOP?",
    "answer": "Adding new interfaces (and their implementations) to existing classes.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "685.What is a Target object in Spring AOP?",
    "answer": "The object being advised by an aspect.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "686.What is a Proxy in Spring AOP?",
    "answer": "An object created by the Spring AOP framework to intercept method calls and apply advice.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "687.What are the different types of AutoProxy creators in Spring?",
    "answer": "BeanNameAutoProxyCreator, DefaultAdvisorAutoProxyCreator, AspectJAwareAdvisorAutoProxyCreator.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "688.What is Weaving in Spring AOP?",
    "answer": "The process of linking aspects with the application code.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "689.In Spring AOP, Weaving is done at compile time or run time?",
    "answer": "Typically at runtime (using proxies).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "690.What is XML Schema-based Aspect implementation?",
    "answer": "Defining aspects and advice using XML configuration.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "691.What is Annotation-based aspect implementation in Spring AOP?",
    "answer": "Defining aspects and advice using annotations (e.g., `@Aspect`, `@Before`).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "692.How does Spring MVC framework work?",
    "answer": "Request arrives at DispatcherServlet, which dispatches it to a Controller, which processes the request and returns a Model and View, which are then rendered to generate the response.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "693.What is DispatcherServlet?",
    "answer": "The front controller in Spring MVC, responsible for handling all incoming requests.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "694.Can we have more than one DispatcherServlet in Spring MVC?",
    "answer": "Yes, but each DispatcherServlet manages its own context and mappings.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "695.What is WebApplicationContext in Spring MVC?",
    "answer": "An extension of ApplicationContext specific to web applications, providing access to web-related resources.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "696.What is Controller in Spring MVC framework?",
    "answer": "A component that handles requests and prepares the model and view.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "697.What is @RequestMapping annotation in Spring?",
    "answer": "Maps HTTP requests to controller methods.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "698.What are the main features of Spring MVC?",
    "answer": "Model-View-Controller architecture, flexible request mapping, data binding, validation, and view resolution.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "699.What is the difference between a Singleton and Prototype bean in Spring?",
    "answer": "Singleton: One instance per container. Prototype: New instance for each request.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "700.How will you decide which scope- Prototype or Singleton to use for a bean in Spring?",
    "answer": "Singleton: Shared, immutable state. Prototype: Mutable state or when a new instance is required for each use.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "701.What is the difference between Setter and Constructor based Dependency Injection (DI) in Spring framework?",
    "answer": "Constructor DI: Dependencies are injected via the constructor. Setter DI: Dependencies are injected via setter methods.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "702.What are the drawbacks of Setter based Dependency Injection (DI) in Spring?",
    "answer": "Objects can be created in an incomplete state, and dependencies can be changed after object creation (less immutability).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "703.What are the differences between Dependency Injection (DI) and Factory Pattern?",
    "answer": "DI: Dependencies are provided externally. Factory Pattern: Object creates its own dependencies (but abstracts the creation).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "704.In Spring framework, what is the difference between FileSystemResource and ClassPathResource?",
    "answer": "FileSystemResource: Loads resources from the file system. ClassPathResource: Loads resources from the classpath.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "705.Name some popular Spring framework annotations that you use in your project?",
    "answer": "@Component, @Autowired, @Value, @Service, @Repository, @Controller, @RequestMapping, @Configuration, @Bean, @Scope.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "706.How can you upload a file in Spring MVC Application?",
    "answer": "Using `MultipartFile` and handling the request in a controller method.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "707.What are the different types of events provided by Spring framework?",
    "answer": "ContextRefreshedEvent, ContextStartedEvent, ContextStoppedEvent, ContextClosedEvent, RequestHandledEvent.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "708.What is the difference between DispatcherServlet and ContextLoaderListener in Spring?",
    "answer": "DispatcherServlet: Handles web requests. ContextLoaderListener: Loads the root application context.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "709.How will you handle exceptions in Spring MVC Framework?",
    "answer": "Using `@ExceptionHandler` annotation, `HandlerExceptionResolver`, or `@ControllerAdvice`.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "710.What are the best practices of Spring Framework?",
    "answer": "Using constructor injection, avoiding circular dependencies, using annotations over XML configuration, proper exception handling, and testing.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "711. What is Spring Boot?",
    "answer": "A Spring module that simplifies the creation of stand-alone, production-ready Spring-based applications with minimal configuration.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "712.What is Hibernate framework?",
    "answer": "An Object-Relational Mapping (ORM) framework for Java.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "713.What is an Object Relational Mapping (ORM)?",
    "answer": "A technique that maps objects to relational database tables, simplifying data access.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "714.What is the purpose of Configuration Interface in Hibernate?",
    "answer": "To configure Hibernate settings and create a SessionFactory.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "715.What is Object Relational Impedance Mismatch?",
    "answer": "The difficulties that arise when mapping objects to relational database tables due to differences in their paradigms.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "716.What are the main problems of Object Relational Impedance Mismatch?",
    "answer": "Granularity, inheritance, identity, associations, data types.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "717.What are the key characteristics of Hibernate?",
    "answer": "ORM, automatic table generation, caching, transaction management, HQL.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "718.Can you tell us about the core interfaces of Hibernate framework?",
    "answer": "SessionFactory, Session, Transaction, Query, Criteria.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "719.How will you map the columns of a DB table to the properties of a Java class in Hibernate?",
    "answer": "Using mapping files (XML or annotations).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "720.Does Hibernate make it mandatory for a mapping file to have .hbm.xml extension?",
    "answer": "No, it's a convention, not a requirement.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "721.What are the steps for creating a SessionFactory in Hibernate?",
    "answer": "Create a Configuration object, configure Hibernate settings, build SessionFactory.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "722.Why do we use POJO in Hibernate?",
    "answer": "To represent database entities as simple Java objects.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "723.What is Hibernate Query Language (HQL)?",
    "answer": "An object-oriented query language similar to SQL, but operating on objects.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "724.How will you call a stored procedure in Hibernate?",
    "answer": "Using `Session.createSQLQuery()` or `Session.getNamedQuery()` with appropriate configuration.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "725.What is Criteria API in Hibernate?",
    "answer": "A programmatic way to build queries using Java objects instead of HQL.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "726.Why do we use HibernateTemplate?",
    "answer": "Deprecated; formerly used to simplify Hibernate operations and resource management.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "727.How can you see SQL code generated by Hibernate on console?",
    "answer": "Set `hibernate.show_sql` property to `true`.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "728.What are the different types of collections supported by Hibernate?",
    "answer": "List, Set, Map, Bag.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "729.What is the difference between session.save() and session.saveOrUpdate() methods in Hibernate?",
    "answer": "save(): Inserts a new record. saveOrUpdate(): Inserts or updates based on existence of identifier.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "730.What are the advantages of Hibernate framework over JDBC?",
    "answer": "ORM, simplified data access, reduced boilerplate code, caching, and HQL.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "731.How can we get statistics of a SessionFactory in Hibernate?",
    "answer": "Using `SessionFactory.getStatistics()`.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "732.What is the Transient state of an object in Hibernate?",
    "answer": "Not associated with a Session, not in the database.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "733.What is the Detached state of an object in Hibernate?",
    "answer": "Previously associated with a Session, but the Session is now closed or cleared.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "734.What is the use of Dirty Checking in Hibernate?",
    "answer": "Hibernate automatically detects changes to persistent objects and updates the database accordingly.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "735.What is the purpose of Callback interface in Hibernate?",
    "answer": "To intercept lifecycle events (e.g., pre-insert, post-update).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "736.What are the different ORM levels in Hibernate?",
    "answer": "Persistent classes, collections, associations.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "737.What are the different ways to configure a Hibernate application?",
    "answer": "hibernate.cfg.xml file, programmatic configuration (Configuration object), annotations.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "738.What is Query Cache in Hibernate?",
    "answer": "Caches the results of queries, improving performance for repeated queries with the same parameters.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "739.What are the different types of Association mappings supported by Hibernate?",
    "answer": "One-to-one, one-to-many, many-to-one, many-to-many.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "740.What are the different types of Unidirectional Association mappings in Hibernate?",
    "answer": "One-to-one, one-to-many, many-to-one.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "741.What is Unit of Work design pattern?",
    "answer": "Maintains a list of objects affected by a business transaction and coordinates writing out changes.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "742.In Hibernate, how can an object go in Detached state?",
    "answer": "By closing the Session or calling `Session.evict()` or `Session.clear()`.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "743.How will you order the results returned by a Criteria in Hibernate?",
    "answer": "Using `Criteria.addOrder()`.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "744.How does Example criterion work in Hibernate?",
    "answer": "Creates a query based on the non-null properties of a given object.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "745.How does Transaction management work in Hibernate?",
    "answer": "Using the `Transaction` interface to begin, commit, or rollback transactions.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "746.How can we mark an entity/collection as immutable in Hibernate?",
    "answer": "Using `mutable=\"false\"` in the mapping file or `@Immutable` annotation.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "747.What are the different options to retrieve an object from database in Hibernate?",
    "answer": "`Session.get()`, `Session.load()`, `Query`, `Criteria`.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "748.How can we auto-generate primary key in Hibernate?",
    "answer": "Using the `<generator>` element in the mapping file or `@GeneratedValue` annotation.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "749.How will you re-attach an object in Detached state in Hibernate?",
    "answer": "Using `Session.update()`, `Session.merge()`, or `Session.lock()`.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "750.What is the first level of cache in Hibernate?",
    "answer": "The Session cache (in-memory cache within a single Session).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "751.What are the different second level caches available in Hibernate?",
    "answer": "EHCache, Infinispan, Hazelcast, etc.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "752.Which is the default transaction factory in Hibernate?",
    "answer": "`org.hibernate.transaction.JDBCTransactionFactory`.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "753.What are the options to disable second level cache in Hibernate?",
    "answer": "Setting `hibernate.cache.use_second_level_cache` to `false`.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "754.What are the different fetching strategies in Hibernate?",
    "answer": "Immediate (eager), lazy, extra-lazy.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "755.What is the difference between Immediate fetching and Lazy collection fetching?",
    "answer": "Immediate: Data is fetched when the object is loaded. Lazy: Data is fetched only when accessed.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "756.What is \u2018Extra lazy fetching\u2019 in Hibernate?",
    "answer": "Only the size of the collection is fetched initially; individual elements are fetched as needed.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "757.How can we check is a collection is initialized or not under Lazy Initialization strategy?",
    "answer": "Using `Hibernate.isInitialized()`.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "758.What are the different strategies for cache mapping in Hibernate?",
    "answer": "Read-only, nonstrict-read-write, read-write, transactional.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "759.What is the difference between a Set and a Bag in Hibernate?",
    "answer": "Set: Unordered collection, no duplicates. Bag: Unordered collection, allows duplicates.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "760.How can we monitor the performance of Hibernate in an application?",
    "answer": "Using Hibernate statistics, logging, and profiling tools.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "761.How can we check if an Object is in Persistent, Detached or Transient state in Hibernate?",
    "answer": "No direct API. Infer from Session association and database presence.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "762.What is \u2018the inverse side of association\u2019 in a mapping?",
    "answer": "The side of the association that is not responsible for updating the relationship in the database.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "763.What is ORM metadata?",
    "answer": "Information that describes how objects are mapped to database tables (mapping files, annotations).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "764.What is the difference between load() and get() method in Hibernate?",
    "answer": "load(): Returns a proxy, throws exception if not found. get(): Returns null if not found.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "765.When should we use get() method or load() method in Hibernate?",
    "answer": "get(): When you need to know immediately if the object exists. load(): When you're sure the object exists (for performance).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "766.What is a derived property in Hibernate?",
    "answer": "A property whose value is calculated based on other properties or database functions.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "767.How can we use Named Query in Hibernate?",
    "answer": "Define the query in the mapping file or using annotations and then retrieve it using `Session.getNamedQuery()`.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "768.What are the two locking strategies in Hibernate?",
    "answer": "Optimistic and pessimistic locking.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "769.What is the use of version number in Hibernate?",
    "answer": "For optimistic locking, to prevent concurrent updates.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "770.What is the use of session.lock() method in Hibernate?",
    "answer": "To re-associate a detached object with the current Session and acquire a lock on it (pessimistic locking).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "771.What inheritance mapping strategies are supported by Hibernate?",
    "answer": "Table per class hierarchy, table per subclass, table per concrete class.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "772.What is Maven?",
    "answer": "A build automation tool primarily used for Java projects.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "773.What are the main features of Maven?",
    "answer": "Dependency management, build lifecycle, plugin support, repository management.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "774.What areas of a Project can you manage by using Maven?",
    "answer": "Build process, dependencies, reporting, documentation, and deployment.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "775.What are the main advantages of Maven?",
    "answer": "Simplified build process, dependency management, standardization, and extensibility.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "776.Why do we say \u201cMaven uses convention over configuration\u201d?",
    "answer": "Maven provides a default project structure and build lifecycle, reducing the need for explicit configuration.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "777.What are the responsibilities of a Build tool like Maven?",
    "answer": "Compiling code, managing dependencies, running tests, packaging applications, and deploying artifacts.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "778.What are the differences between Ant and Maven?",
    "answer": "Ant: Procedural, requires explicit configuration. Maven: Declarative, uses convention over configuration.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "779.What is MOJO in Maven?",
    "answer": "Maven plain Old Java Object: The basic unit of execution in a Maven plugin.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "780.What is a Repository in Maven?",
    "answer": "A storage location for Maven artifacts (JAR files, POM files, etc.).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "781.What are the different types of repositories in Maven?",
    "answer": "Local, central, and remote repositories.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "782.What is a local repository in Maven?",
    "answer": "A directory on your local machine where Maven stores downloaded artifacts.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "783.What is a central repository in Maven?",
    "answer": "A publicly available repository maintained by the Apache Maven project.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "784.What is a Remote repository in Maven?",
    "answer": "A repository located on a remote server, accessed via HTTP or other protocols.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "785.Why we should not store jars in CVS or any other version control system instead of Maven repository?",
    "answer": "Maven repositories handle dependency management, versioning, and artifact resolution automatically.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "786.Can anyone upload JARS or artifacts to Central Repository?",
    "answer": "No, you need to follow specific guidelines and have appropriate credentials.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "787.What is a POM?",
    "answer": "Project Object Model: An XML file containing information about a Maven project (dependencies, build settings, etc.).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "788.What is Super POM?",
    "answer": "A default POM that all Maven projects inherit from, providing default settings and plugins.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "789.What are the main required elements in POM file?",
    "answer": "modelVersion, groupId, artifactId, version.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "790.What are the phases in Build lifecycle in Maven?",
    "answer": "validate, compile, test, package, verify, install, deploy.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "791.What command will you use to package your Maven project?",
    "answer": "`mvn package`.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "792.What is the format of fully qualified artifact name of a Maven project?",
    "answer": "groupId:artifactId:packaging:version",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "793.What is an Archetype in Maven?",
    "answer": "A template for creating new Maven projects, providing a predefined structure and dependencies.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "794.What is the command in Maven to generate an Archetype?",
    "answer": "`mvn archetype:generate`.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "795.What are the three main build lifecycles of Maven?",
    "answer": "clean, default, site.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "796.What are the main uses of a Maven plugin?",
    "answer": "To extend Maven's functionality by providing custom goals (tasks).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "797.How will you find the version of a plugin being used?",
    "answer": "Check the plugin's configuration in the POM file or use `mvn help:describe -Dplugin=pluginName`.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "798.What are the different types of profile in Maven? Where will you define these profiles?",
    "answer": "Build profiles (for different environments or build configurations). Defined in `pom.xml` or `settings.xml`.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "799.What are the different setting files in Maven? Where will you find these files?",
    "answer": "`settings.xml` (user-specific settings in `~/.m2/settings.xml` or global settings in `${maven.home}/conf/settings.xml`).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "800.What are the main elements we can find in settings.xml?",
    "answer": "localRepository, mirrors, proxies, servers, profiles.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "801.How will you check the version of Maven in your system?",
    "answer": "mvn -version",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "802.How will you verify if Maven is installed on Windows?",
    "answer": "Open a command prompt and run `mvn -version`. Check if the command is recognized.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "803.What is a Maven artifact?",
    "answer": "A file (JAR, WAR, POM, etc.) deployed to a Maven repository.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "804.What are the different dependency scopes in Maven?",
    "answer": "compile, provided, runtime, test, system, import",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "805.How can we exclude a dependency in Maven?",
    "answer": "Using the `<exclusions>` element in the dependency declaration.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "806.How Maven searches for JAR corresponding to a dependency?",
    "answer": "Local repository -> Central repository (if not found locally) -> Remote repositories (if configured).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "807.What is a transitive dependency in Maven?",
    "answer": "A dependency of a dependency (Maven automatically includes these).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "808.What are Excluded dependencies in Maven?",
    "answer": "Dependencies that are explicitly excluded from a transitive dependency.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "809.What are Optional dependencies in Maven?",
    "answer": "Dependencies that are only needed for specific features and are not automatically included.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "810.Where will you find the class files after compiling a Maven project successfully?",
    "answer": "target/classes",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "811. What are the default locations for source, test and build directories in Maven?",
    "answer": "src/main/java (source), src/test/java (test), target (build)",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "812.What is the result of jar:jar goal in Maven?",
    "answer": "Creates a JAR file for the project.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "813.How can we get the debug or error messages from the execution of Maven?",
    "answer": "Using the `-X` (debug) or `-e` (error) command-line options.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "814.What is the difference between a Release version and SNAPSHOT version in Maven?",
    "answer": "Release: Stable, immutable version. SNAPSHOT: Development version, can change frequently.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "815.How will you run test classes in Maven?",
    "answer": "mvn test",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "816.Sometimes Maven compiles the test classes but doesn't run them? What could be the reason for it?",
    "answer": "No test classes found matching the Surefire plugin configuration, or the test scope is not configured correctly.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "817.How can we skip the running of tests in Maven?",
    "answer": "mvn -DskipTests=true",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "818.Can we create our own directory structure for a project in Maven?",
    "answer": "Yes, but it's generally discouraged as it deviates from Maven's convention-over-configuration principle.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "819.What are the differences between Gradle and Maven?",
    "answer": "Gradle: Groovy-based DSL, more flexible, incremental builds. Maven: XML-based, convention over configuration.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "820.What is the difference between Inheritance and Multi-module in Maven?",
    "answer": "Inheritance: Shared configuration in a parent POM. Multi-module: Project with multiple sub-projects (modules).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "821.What is Build portability in Maven?",
    "answer": "The ability to build a project consistently across different environments.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "822.How can we see n most recent commits in GIT?",
    "answer": "git log -n",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "823.How can we know if a branch is already merged into master in GIT?",
    "answer": "git branch --merged master",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "824.What is the purpose of git stash drop?",
    "answer": "Deletes a specific stash or the most recent stash if no stash is specified.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "825.What is the HEAD in GIT?",
    "answer": "A pointer to the current branch or commit.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "826.What is the most popular branching strategy in GIT?",
    "answer": "Gitflow (feature branches, release branches, hotfix branches).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "827.What is SubGit?",
    "answer": "A tool for bidirectional synchronization between Git and SVN repositories.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "828.What is the use of git instaweb?",
    "answer": "Spins up a web server to browse your git repository in a web browser.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "829.What are git hooks?",
    "answer": "Scripts that run automatically before or after certain Git events (commit, push, etc.).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "830.What is GIT?",
    "answer": "A distributed version control system.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "831.What is a repository in GIT?",
    "answer": "A storage location for your project's files and history.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "832.What are the main benefits of GIT?",
    "answer": "Version control, collaboration, branching, distributed architecture.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "833.What are the disadvantages of GIT?",
    "answer": "Can be complex for beginners, large repository size.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "834.What are the main differences between GIT and SVN?",
    "answer": "GIT: Distributed. SVN: Centralized.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "835.How will you start GIT for your project?",
    "answer": "git init (creates a local repository).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "836.What is git clone in GIT?",
    "answer": "Creates a local copy of a remote repository.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "837.How will you create a repository in GIT?",
    "answer": "git init (local), or create a repository on a remote hosting service (GitHub, etc.).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "838.What are the different ways to start work in GIT?",
    "answer": "git init (new project), git clone (existing project).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "839.GIT is written in which language?",
    "answer": "C (primarily), with some shell scripts and other languages.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "840.What does \u2018git pull\u2019 command in GIT do internally?",
    "answer": "Fetches changes from a remote repository and merges them into the current branch.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "841.What does \u2018git push\u2019 command in GIT do internally?",
    "answer": "Uploads local commits to a remote repository.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "842.What is git stash?",
    "answer": "Temporarily shelves changes that you don't want to commit immediately.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "843.What is the meaning of \u2018stage\u2019 in GIT?",
    "answer": "Preparing changes for commit by adding them to the staging area (index).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "844. What is the purpose of git config command?",
    "answer": "Sets Git configuration options (user name, email, etc.).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "845.How can we see the configuration settings of GIT installation?",
    "answer": "git config --list",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "846.How will you write a message with commit command in GIT?",
    "answer": "git commit -m \"Your commit message\"",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "847.What is stored inside a commit object in GIT?",
    "answer": "Changes, author, committer, message, and pointers to parent commits.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "848.How many heads can you create in a GIT repository?",
    "answer": "Unlimited (each branch has a head).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "849.Why do we create branches in GIT?",
    "answer": "To isolate changes and develop new features without affecting the main codebase.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "850.What are the different kinds of branches that can be created in GIT?",
    "answer": "Feature branches, release branches, hotfix branches, etc.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "851.How will you create a new branch in GIT?",
    "answer": "git branch <branch_name>",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "852.How will you add a new feature to the main branch?",
    "answer": "Create a feature branch, develop the feature, and then merge it into the main branch.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "853.What is a pull request in GIT?",
    "answer": "A request to merge changes from one branch into another (often used in collaborative workflows).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "854.What is merge conflict in GIT?",
    "answer": "Occurs when Git cannot automatically merge changes from two branches due to conflicting modifications.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "855.How can we resolve a merge conflict in GIT?",
    "answer": "Manually edit the conflicting files to combine the changes and then commit the result.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "856.What command will you use to delete a branch?",
    "answer": "git branch -d <branch_name>",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "857.What command will you use to delete a branch that has unmerged changes?",
    "answer": "git branch -D <branch_name>",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "858.What is the alternative command to merging in GIT?",
    "answer": "Rebasing.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "859.What is Rebasing in GIT?",
    "answer": "Moving a branch to a new base commit, rewriting its history.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "860.What is the \u2018Golden Rule of Rebasing\u2019 in GIT?",
    "answer": "Don't rebase public branches (branches shared with others).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "861.Why do we use Interactive Rebasing in place of Auto Rebasing?",
    "answer": "To have more control over the rebasing process (squash commits, edit messages, etc.).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "862.What is the command for Rebasing in Git?",
    "answer": "git rebase <branch_name>",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "863.What is the main difference between git clone and git remote?",
    "answer": "git clone creates a local copy of a remote repository. git remote manages connections to remote repositories.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "864.What is GIT version control?",
    "answer": "A system for tracking changes to files over time.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "865.What GUI do you use for working on GIT?",
    "answer": "(Your personal preference, e.g., GitKraken, Sourcetree, command line).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "866.What is the use of git diff command in GIT?",
    "answer": "Shows changes between commits, branches, etc.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "867.What is git rerere?",
    "answer": "Record and reuse resolution of merge conflicts.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "868.What are the three most popular version of git diff command?",
    "answer": "git diff, git diff --cached, git diff HEAD",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "869.What is the use of git status command?",
    "answer": "Shows the state of the working directory and staging area.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "870.What is the main difference between git diff and git status?",
    "answer": "git status shows the overall state. git diff shows specific changes.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "871.What is the use of git rm command in GIT?",
    "answer": "Removes files from the working directory and the index.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "872.What is the command to apply a stash?",
    "answer": "git stash apply",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "873.Why do we use git log command?",
    "answer": "To view the commit history of a repository.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "874.Why do we need git add command in GIT?",
    "answer": "To stage changes for commit.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "875.Why do we use git reset command?",
    "answer": "To unstage changes or move the HEAD to a previous commit.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "876.What does a commit object contain?",
    "answer": "Changes, author, committer, message, pointers to parent commits.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "877.How can we convert git log messages to a different format?",
    "answer": "Using git log --format=<format>",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "878.What are the programming languages in which git hooks can be written?",
    "answer": "Any scripting language (Shell, Python, Perl, etc.).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "879.What is a commit message in GIT?",
    "answer": "A description of the changes included in a commit.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "880.How GIT protects the code in a repository?",
    "answer": "Using SHA-1 hashes to ensure data integrity and prevent tampering.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "881.How GIT provides flexibility in version control?",
    "answer": "Branching, merging, rebasing, staging area.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "882.How can we change a commit message in GIT?",
    "answer": "git commit --amend (for the last commit) or git rebase -i (for older commits).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "883.Why is it advisable to create an additional commit instead of amending an existing commit?",
    "answer": "Amending rewrites history, which can cause problems if the commit has already been pushed.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "884.What is a bare repository in GIT?",
    "answer": "A repository without a working directory (used for sharing).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "885.How do we put a local repository on GitHub server?",
    "answer": "Create a repository on GitHub, then git remote add origin <URL> and git push -u origin master.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "886.How will you delete a branch in GIT?",
    "answer": "git branch -d <branch_name> (if merged) or git branch -D <branch_name> (if not merged).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "887.How can we set up a Git repository to run code sanity checks and UAT tests just before a commit?",
    "answer": "Using pre-commit hooks.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "888.How can we revert a commit that was pushed earlier and is public now?",
    "answer": "git revert <commit_hash> (creates a new commit that undoes the changes).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "889.In GIT, how will you compress last n commits into a single commit?",
    "answer": "Using interactive rebase (git rebase -i HEAD~n) and squash the commits.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "890.How will you switch from one branch to a new branch in GIT?",
    "answer": "git checkout <branch_name>",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "891.How can we clean unwanted files from our working directory in GIT?",
    "answer": "git clean -f (careful with this command!).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "892.What is the purpose of git tag command?",
    "answer": "Marks a specific point in the repository history (e.g., for releases).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "893.What is cherry-pick in GIT?",
    "answer": "Applying a specific commit from one branch to another.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "894.What is shortlog in GIT?",
    "answer": "Summarizes the git log output by author.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "895.How can you find the names of files that were changed in a specific commit?",
    "answer": "git show --pretty=\"\" --name-only <commit_hash>",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "896.How can we attach an automated script to run on the event of a new commit by push command?",
    "answer": "Using pre-push hook.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "897.What is the difference between pre-receive, update and post-receive hooks in GIT?",
    "answer": "pre-receive: Runs before any updates are made. update: Runs for each branch being updated. post-receive: Runs after updates are made.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "898.Do we have to store Scripts for GIT hooks within same repository?",
    "answer": "Yes, they are typically stored in the .git/hooks directory of the repository.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "899.How can we determine the commit that is the source of a bug in GIT?",
    "answer": "Using git bisect (binary search).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "900.How can we see differences between two commits in GIT?",
    "answer": "git diff <commit_hash1> <commit_hash2>",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "901.What are the different ways to identify a commit in GIT?",
    "answer": "SHA-1 hash, branch name, tag name, relative references (HEAD^, HEAD~2).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "902.When we run git branch <branchname>, how does GIT know the SHA-1 of the last commit?",
    "answer": "It uses the SHA-1 of the commit that HEAD is currently pointing to.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "903.What are the different types of Tags you can create in GIT?",
    "answer": "Annotated tags (stored as full objects) and lightweight tags (just pointers to commits).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "904.How can we rename a remote repository?",
    "answer": "git remote rename <old_name> <new_name>",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "905.Some people use git checkout and some use git co for checkout. How is that possible?",
    "answer": "git co is a shorthand alias defined in the user's Git configuration.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "906.How can we see the last commit on each of our branch in GIT?",
    "answer": "git branch -v",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "907.Is origin a special branch in GIT?",
    "answer": "No, it's just a conventional name for the default remote repository.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "908.How can we configure GIT to not ask for password every time?",
    "answer": "Using SSH keys or credential caching.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "909.What are the four major protocols used by GIT for data transfer?",
    "answer": "Local, SSH, Git, and HTTP.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "910.What is GIT protocol?",
    "answer": "A special daemon which comes standard with Git; listens on port 9418. Uses plain unencrypted sockets.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "911. How can we work on a project where we do not have push access?",
    "answer": "Fork the repository, make changes in your fork, and submit a pull request.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "912.What is git grep?",
    "answer": "A command to search for patterns within the tracked files in a Git repository.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "913.How can your reorder commits in GIT?",
    "answer": "Using interactive rebase (git rebase -i).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "914.How will you split a commit into multiple commits?",
    "answer": "Using git reset HEAD^ and then staging and committing changes in smaller chunks.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "915.What is filter-branch in GIT?",
    "answer": "A powerful command for rewriting large parts of a repository's history (use with caution!).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "916.What are the three main trees maintained by GIT?",
    "answer": "Working directory, staging area (index), and HEAD (repository).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "917.What are the three main steps of working GIT?",
    "answer": "Modify, Stage, Commit.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "918.What are ours and theirs merge options in GIT?",
    "answer": "Ours: Keep changes from the current branch. Theirs: Keep changes from the other branch.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "919.How can we ignore merge conflicts due to Whitespace?",
    "answer": "Using git merge -Xignore-all-space or git config --global merge.renormalize true",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "920.What is git blame?",
    "answer": "Shows who last modified each line of a file and when.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "921.What is a submodule in GIT?",
    "answer": "A reference to another Git repository within your repository.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "922.What do you know about AWS Region?",
    "answer": "A geographical area with multiple Availability Zones (data centers).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "923.What are the important components of IAM?",
    "answer": "Users, Groups, Roles, Policies.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "924.What are the important points about AWS IAM?",
    "answer": "Control access to AWS resources, use least privilege, enable MFA, and monitor activity.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "925.What are the important features of Amazon S3?",
    "answer": "Scalability, durability, security, and cost-effectiveness for object storage.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "926.What is the scale of durability in Amazon S3?",
    "answer": "99.999999999% (11 9s).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "927.What are the Consistency levels supported by Amazon S3?",
    "answer": "Read after write consistency for new objects, eventual consistency for overwrite PUTS and DELETES.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "928.What are the different tiers in Amazon S3 storage?",
    "answer": "S3 Standard, S3 Intelligent-Tiering, S3 Standard-IA, S3 One Zone-IA, S3 Glacier, S3 Glacier Deep Archive.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "929.How will you upload a file greater than 100 megabytes in Amazon S3?",
    "answer": "Using multipart upload.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "930.What happens to an Object when we delete it from Amazon S3?",
    "answer": "It's marked for deletion and eventually removed (but may still be restorable if versioning is enabled).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "931.What is the use of Amazon Glacier?",
    "answer": "Low-cost archive storage for infrequently accessed data.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "932.Can we disable versioning on a version-enabled bucket in Amazon S3?",
    "answer": "You can suspend it, but not completely disable it.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "933.What are the use cases of Cross Region Replication Amazon S3?",
    "answer": "Disaster recovery, compliance, minimizing latency.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "934.Can we do Cross Region replication in Amazon S3 without enabling versioning on a bucket?",
    "answer": "No, versioning must be enabled.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "935.What are the different types of actions in Object Lifecycle Management in Amazon S3?",
    "answer": "Transition to different storage classes, expiration.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "936.How do we get higher performance in our application by using Amazon CloudFront?",
    "answer": "Caching content at edge locations, reducing latency for users.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "937.What is the mechanism behind Regional Edge Cache in Amazon CloudFront?",
    "answer": "CloudFront caches content in regional edge caches before forwarding requests to the origin.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "938.What are the benefits of Streaming content?",
    "answer": "Improved user experience (start playback before the entire file is downloaded).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "939.What is Lambda@Edge in AWS?",
    "answer": "Run Lambda functions at CloudFront edge locations to customize content delivery.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "940.What are the different types of events triggered by Amazon CloudFront?",
    "answer": "Viewer request, viewer response, origin request, origin response.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "941.What is Geo Targeting in Amazon CloudFront?",
    "answer": "Serving different content based on the viewer's geographic location.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "942.What are the main features of Amazon CloudFront?",
    "answer": "CDN, caching, security, custom SSL certificates, Lambda@Edge.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "943.What are the security mechanisms available in Amazon S3?",
    "answer": "IAM policies, bucket policies, ACLs, encryption (at rest and in transit).",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "944.What are the benefits of Cloud Computing?",
    "answer": "Scalability, cost-effectiveness, flexibility, agility, and global reach.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "945.What is On-demand computing in Cloud Computing?",
    "answer": "Provisioning resources as needed, paying only for what you use.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "946.What are the different layers of Cloud computing?",
    "answer": "IaaS, PaaS, SaaS.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "947.What resources are provided by Infrastructure as a Service (IAAS) provider?",
    "answer": "Virtual machines, storage, networks, and other infrastructure components.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "948.What is the benefit of Platform as a Service?",
    "answer": "Simplified development and deployment, reduced operational overhead.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "949.What are the main advantages of PaaS?",
    "answer": "Faster development, lower costs, and automatic scaling.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "950.What is the main disadvantage of PaaS?",
    "answer": "Less control over the underlying infrastructure.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "951.What are the different deployment models in Cloud computing?",
    "answer": "Public, private, hybrid, and community clouds.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "952.What is the difference between Scalability and Elasticity?",
    "answer": "Scalability: The ability to handle increased load. Elasticity: The ability to automatically scale resources up or down based on demand.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "953.What is Software as a Service?",
    "answer": "Delivering software applications over the Internet (e.g., Salesforce, Google Apps).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "954.What are the different types of Datacenters in Cloud computing?",
    "answer": "Tier 1, Tier 2, Tier 3, Tier 4 (based on redundancy and availability).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "955.Explain the various modes of Software as a Service (SaaS) cloud environment?",
    "answer": "Examples: Public SaaS, Private SaaS, Hybrid SaaS.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "956.What are the important things to care about in Security in a cloud environment?",
    "answer": "Data encryption, access control, identity management, and compliance.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "957.Why do we use API in cloud computing environment?",
    "answer": "To enable communication and integration between different cloud services and applications.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "958.What are the different areas of Security Management in cloud?",
    "answer": "Data security, network security, application security, and identity and access management.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "959.What are the main cost factors of cloud based data center?",
    "answer": "Compute, storage, network, and data transfer.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "960.How can we measure the cloud-based services?",
    "answer": "Monitoring resource utilization, performance metrics, and cost.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "961.How a traditional datacenter is different from a cloud environment?",
    "answer": "Traditional: On-premise, fixed resources. Cloud: On-demand, scalable resources.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "962.How will you optimize availability of your application in a Cloud environment?",
    "answer": "Using redundancy, load balancing, and automated failover.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "963.What are the requirements for implementing IaaS strategy in Cloud?",
    "answer": "Virtualization, automation, and a self-service portal.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "964.What is Docker?",
    "answer": "A platform for building, shipping, and running applications in containers.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "965.What is the difference between Docker image and Docker container?",
    "answer": "Image: Read-only template. Container: Runnable instance of an image.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "966.How will you remove an image from Docker?",
    "answer": "docker rmi <image_id>",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "967.How is a Docker container different from a hypervisor?",
    "answer": "Docker: OS-level virtualization, shares kernel. Hypervisor: Hardware virtualization, full OS isolation.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "968.Can we write compose file in json file instead of yaml?",
    "answer": "Yes, Docker Compose supports both YAML and JSON format.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "969.Can we run multiple apps on one server with Docker?",
    "answer": "Yes, by containerizing each app.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "970.What are the common use cases of Docker?",
    "answer": "Application isolation, microservices, CI/CD, and development environment consistency.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "971.What are the main features of Docker-compose?",
    "answer": "Defines and manages multi-container applications.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "972.What is the most popular use of Docker?",
    "answer": "Containerizing applications for portability and scalability.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "973.What is the role of open source development in the popularity of Docker?",
    "answer": "Open-source allows for community contributions, innovation, and wide adoption.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "974.How will you remove all files in current directory? Including the files that are two levels down in a sub-directory.",
    "answer": "rm -r *",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "975.What is the difference between the \u2013v and \u2013x options in Bash shell scripts?",
    "answer": "-v: verbose, prints each command. -x: traces execution, printing commands and their arguments.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "976.What is a Filter in Unix command?",
    "answer": "A command that reads input, transforms it, and writes it to output (e.g., grep, sed, awk).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "977.What is Kernel in Unix operating system?",
    "answer": "The core of the OS, responsible for managing hardware resources.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "978.What is a Shell in Unix OS?",
    "answer": "A command-line interpreter that allows users to interact with the kernel.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "979.What are the different shells in Unix that you know about?",
    "answer": "Bash, Zsh, Ksh, Csh.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "980.What is the first character of the output in ls \u2013l command ?",
    "answer": "File type (e.g., d for directory, - for regular file).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "981.What is the difference between Multi-tasking and Multi-user environment?",
    "answer": "Multitasking: Single user running multiple programs. Multi-user: Multiple users accessing the system concurrently.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "982.What is Command Substitution in Unix?",
    "answer": "Replacing a command with its output (e.g., `echo $(date)`).",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "983.What is an Inode in Unix?",
    "answer": "Data structure storing metadata about a file (permissions, size, timestamps).",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "984.What is the difference between absolute path and relative path in Unix file system?",
    "answer": "Absolute: Starts from root directory (/). Relative: Starts from the current directory.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "985.What are the main responsibilities of a Unix Shell?",
    "answer": "Command interpretation, program execution, and environment management.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "986.What is a Shell variable?",
    "answer": "A named storage location within the shell environment.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "987.What is a Microservice?",
    "answer": "A small, independently deployable service that performs a specific business function.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "988.What are the benefits of Microservices architecture?",
    "answer": "Scalability, independent deployment, technology diversity, and fault isolation.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "989.What is the role of architect in Microservices architecture?",
    "answer": "Defines overall architecture, standards, and guiding principles.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "990.What is the advantage of Microservices architecture over Service Oriented Architecture (SOA)?",
    "answer": "Smaller size, independent deployment, and decentralized governance.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "991.Is it a good idea to provide a Tailored Service Template for Microservices development in an organization?",
    "answer": "Yes, it promotes consistency and reduces boilerplate code.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "992.What are the disadvantages of using Shared libraries approach to decompose a monolith application?",
    "answer": "Tight coupling, versioning issues, and deployment dependencies.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "993.What are the characteristics of a Good Microservice?",
    "answer": "Single responsibility, autonomous, independently deployable, and well-defined API.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "994.What is Bounded Context?",
    "answer": "A specific responsibility around a domain model. Where that model is valid and consistent",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "995.What are the points to remember during integration of Microservices?",
    "answer": "Loose coupling, asynchronous communication, and well-defined APIs.",
    "difficulty": "Easy"
  },
  {
    "technology": "Java",
    "question": "996.Is it a good idea for Microservices to share a common database?",
    "answer": "Generally not, as it can create tight coupling and contention.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "997.What is the preferred type of communication between Microservices? Synchronous or Asynchronous?",
    "answer": "Asynchronous communication promotes loose coupling and scalability.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "998.What is the difference between Orchestration and Choreography in Microservices architecture?",
    "answer": "Orchestration: Centralized control. Choreography: Decentralized, event-driven coordination.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "999.What are the issues in using REST over HTTP for Microservices?",
    "answer": "Coupling to HTTP, potential performance overhead.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "1000.Can we create Microservices as State Machines?",
    "answer": "Yes, it can be helpful for managing complex workflows and transitions.",
    "difficulty": "Hard"
  },
  {
    "technology": "Python",
    "question": "What are decorators in Python?",
    "answer": "Decorators are functions that modify the behavior of other functions. They are a form of metaprogramming and can be used to add functionality to existing functions without modifying their source code. Decorators use the @decorator syntax and are commonly used for logging, access control, caching, and more.",
    "difficulty": "Easy"
  },
  {
    "technology": "Python",
    "question": "How do you handle exceptions in Python?",
    "answer": "Exceptions in Python are handled using try-except blocks. The try block contains code that might raise an exception, and the except block contains code to handle the exception. You can also use else and finally clauses. The else clause runs if no exception occurs, and finally always runs, typically used for cleanup.",
    "difficulty": "Hard"
  },
  {
    "technology": "Python",
    "question": "What is the difference between is and == in Python?",
    "answer": "The == operator compares the values of two objects, while is compares their identities (memory addresses). == checks if two objects have the same value, while is checks if they are the same object in memory. For example, two lists with the same elements will be equal (==) but not identical (is).",
    "difficulty": "Hard"
  },
  {
    "technology": "Python",
    "question": "How does garbage collection work in Python?",
    "answer": "Python uses reference counting and a cyclic garbage collector. Reference counting tracks the number of references to each object and deallocates objects when their reference count reaches zero. The cyclic garbage collector handles circular references by periodically detecting and collecting objects that are no longer accessible.",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "What are generators in Python?",
    "answer": "Generators are functions that return an iterator using yield. They generate values on-the-fly instead of storing all values in memory at once. This makes them memory efficient for large datasets. Generators can be created using generator functions (with yield) or generator expressions (similar to list comprehensions but with parentheses).",
    "difficulty": "Hard"
  },
  {
    "technology": "Python",
    "question": "How do you implement multithreading in Python?",
    "answer": "Python's threading module is used for multithreading. However, due to the Global Interpreter Lock (GIL), Python threads are not true parallel threads for CPU-bound tasks. They are useful for I/O-bound tasks. The multiprocessing module is better for CPU-bound tasks as it uses separate processes.",
    "difficulty": "Hard"
  },
  {
    "technology": "Python",
    "question": "What is the difference between shallow copy and deep copy?",
    "answer": "A shallow copy creates a new object but references the same memory addresses for nested objects. A deep copy creates a completely independent copy of an object and all its nested objects. Use copy.copy() for shallow copy and copy.deepcopy() for deep copy. Shallow copies are faster but may lead to unexpected behavior with nested mutable objects.",
    "difficulty": "Hard"
  },
  {
    "technology": "Python",
    "question": "How do you handle file operations in Python?",
    "answer": "File operations in Python are handled using the built-in open() function with context managers (with statement). Common operations include reading (r), writing (w), appending (a), and binary mode (b). The with statement ensures proper file closure even if an error occurs. Example: with open('file.txt', 'r') as f: data = f.read()",
    "difficulty": "Easy"
  },
  {
    "technology": "Python",
    "question": "What are lambda functions in Python?",
    "answer": "Lambda functions are anonymous functions defined using the lambda keyword. They can take any number of arguments but can only have one expression. They are useful for simple operations and are often used with functions like map(), filter(), and reduce(). Example: lambda x: x * 2",
    "difficulty": "Easy"
  },
  {
    "technology": "Python",
    "question": "How do you implement inheritance in Python?",
    "answer": "Inheritance in Python is implemented by passing the parent class as an argument to the child class. The child class inherits all attributes and methods from the parent class. You can override methods by redefining them in the child class. Use super() to call parent class methods. Multiple inheritance is also supported.",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "What is the difference between a list and a tuple in Python?",
    "answer": "Lists are mutable (can be modified after creation) while tuples are immutable (cannot be modified after creation). Lists use square brackets [] while tuples use parentheses (). Lists are generally used for collections of similar items, while tuples are often used for heterogeneous data. Lists have more built-in methods than tuples.",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "Explain Python's GIL (Global Interpreter Lock)",
    "answer": "The Global Interpreter Lock (GIL) is a mutex that protects access to Python objects in CPython. It prevents multiple native threads from executing Python bytecodes at once. This means that even in a multi-threaded Python program, only one thread can execute Python code at a time. The GIL exists because Python's memory management is not thread-safe. While it simplifies memory management, it can be a bottleneck for CPU-bound tasks. For CPU-bound tasks, multiprocessing is recommended over threading.",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "What are Python decorators and how do they work?",
    "answer": "Decorators are functions that modify the behavior of other functions. They use the @decorator syntax and are a form of metaprogramming. Decorators can be used for logging, access control, caching, and more. They work by taking a function as input and returning a new function that usually wraps the original function with additional functionality. Decorators can be stacked and can accept arguments.",
    "difficulty": "Easy"
  },
  {
    "technology": "Python",
    "question": "Explain Python's memory management",
    "answer": "Python uses reference counting and garbage collection for memory management. Reference counting tracks the number of references to each object and deallocates objects when their reference count reaches zero. The garbage collector handles circular references by periodically detecting and collecting objects that are no longer accessible. Python also uses memory pools for small objects to reduce memory fragmentation.",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "What are Python generators and how do they work?",
    "answer": "Generators are functions that return an iterator using yield. They generate values on-the-fly instead of storing all values in memory at once. This makes them memory efficient for large datasets. When a generator function is called, it returns a generator object that can be iterated over. Each time next() is called on the generator, it executes until it hits a yield statement, returns the value, and pauses execution.",
    "difficulty": "Hard"
  },
  {
    "technology": "Python",
    "question": "Explain Python's context managers",
    "answer": "Context managers are objects that implement __enter__ and __exit__ methods, used with the 'with' statement. They ensure proper resource management by automatically handling setup and cleanup operations. Common uses include file handling, database connections, and thread locks. The 'with' statement ensures that resources are properly released even if an exception occurs.",
    "difficulty": "Hard"
  },
  {
    "technology": "Python",
    "question": "What is the difference between shallow copy and deep copy?",
    "answer": "A shallow copy creates a new object but references the same memory addresses for nested objects. A deep copy creates a completely independent copy of an object and all its nested objects. Use copy.copy() for shallow copy and copy.deepcopy() for deep copy. Shallow copies are faster but may lead to unexpected behavior with nested mutable objects.",
    "difficulty": "Hard"
  },
  {
    "technology": "Python",
    "question": "How does Python handle multiple inheritance?",
    "answer": "Python supports multiple inheritance through the Method Resolution Order (MRO). When a method is called, Python searches for it in the class itself, then in its parent classes (following the order defined in the class definition), and finally in the parent classes of parent classes. The MRO can be viewed using the __mro__ attribute. Python uses C3 linearization to determine the order.",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "What are Python's magic methods?",
    "answer": "Magic methods (also called dunder methods) are special methods in Python that start and end with double underscores. They allow classes to define how they behave with built-in Python operations. Common examples include __init__ (constructor), __str__ (string representation), __len__ (length), __add__ (addition), __getitem__ (indexing), and __call__ (making objects callable).",
    "difficulty": "Medium"
  },
  {
    "technology": "Python",
    "question": "Explain Python's property decorator",
    "answer": "The @property decorator is used to define methods that can be accessed like attributes. It allows you to add getters, setters, and deleters to class attributes while maintaining a clean interface. Properties can be used to validate data, compute values on-the-fly, or maintain backward compatibility. They help implement the principle of encapsulation in Python.",
    "difficulty": "Medium"
  },
  {
    "technology": "Node.js",
    "question": "What is the event loop in Node.js?",
    "answer": "The event loop is a mechanism that allows Node.js to perform non-blocking I/O operations despite JavaScript being single-threaded. It works by continuously checking the event queue for pending events and executing their associated callbacks. The event loop processes events in phases: timers, pending callbacks, idle/prepare, poll, check, and close callbacks. This enables Node.js to handle many concurrent connections efficiently.",
    "difficulty": "Hard"
  },
  {
    "technology": "Node.js",
    "question": "Explain Node.js streams",
    "answer": "Streams are objects that let you read data from a source or write data to a destination continuously. There are four types of streams: Readable, Writable, Duplex, and Transform. Streams are memory efficient as they process data in chunks rather than loading entire datasets into memory. They're commonly used for handling large files, real-time data processing, and network operations.",
    "difficulty": "Medium"
  },
  {
    "technology": "Node.js",
    "question": "What is the difference between process.nextTick() and setImmediate()?",
    "answer": "process.nextTick() adds callbacks to the next iteration of the event loop, while setImmediate() adds callbacks to the end of the current event loop iteration. process.nextTick() has higher priority and will always execute before setImmediate(). This can lead to potential starvation if process.nextTick() is called recursively.",
    "difficulty": "Medium"
  },
  {
    "technology": "Node.js",
    "question": "How does error handling work in Node.js?",
    "answer": "Node.js uses a combination of try-catch blocks, error events, and error-first callbacks for error handling. The 'error' event is emitted when an error occurs in an EventEmitter. Error-first callbacks receive an error as their first parameter. Uncaught exceptions can be handled using process.on('uncaughtException'). It's important to properly handle errors to prevent application crashes.",
    "difficulty": "Hard"
  },
  {
    "technology": "Node.js",
    "question": "Explain Node.js clustering",
    "answer": "Clustering in Node.js allows you to create child processes (workers) that share server ports. The cluster module enables you to create a pool of child processes to handle incoming requests. This improves performance on multi-core systems by utilizing all available CPU cores. The master process distributes incoming connections among the workers using a round-robin algorithm.",
    "difficulty": "Medium"
  },
  {
    "technology": "Node.js",
    "question": "What are Node.js buffers?",
    "answer": "Buffers are objects that represent fixed-sized chunks of memory. They're used to handle binary data directly, which is essential for working with files, network protocols, and other I/O operations. Buffers are instances of the Buffer class and can be created using various methods like Buffer.from(), Buffer.alloc(), and Buffer.allocUnsafe().",
    "difficulty": "Hard"
  },
  {
    "technology": "Node.js",
    "question": "How does Node.js handle asynchronous operations?",
    "answer": "Node.js handles asynchronous operations through callbacks, Promises, and async/await. Callbacks are functions passed as arguments to other functions and executed after the main function has finished execution. Promises provide a cleaner way to handle asynchronous operations with .then() and .catch() methods. async/await is syntactic sugar for Promises that makes asynchronous code look synchronous.",
    "difficulty": "Medium"
  },
  {
    "technology": "Node.js",
    "question": "What is the difference between require() and import?",
    "answer": "require() is a CommonJS module system function that loads modules synchronously, while import is an ES6 module system feature that loads modules asynchronously. require() can be used anywhere in the code, while import must be at the top level. import provides better static analysis and tree-shaking capabilities. Node.js supports both systems, but ES modules are the future standard.",
    "difficulty": "Medium"
  },
  {
    "technology": "Node.js",
    "question": "Explain Node.js middleware",
    "answer": "Middleware functions are functions that have access to the request object (req), response object (res), and next middleware function in the application's request-response cycle. They can execute any code, modify request and response objects, end the request-response cycle, and call the next middleware function. Common uses include logging, authentication, error handling, and parsing request bodies.",
    "difficulty": "Hard"
  },
  {
    "technology": "Node.js",
    "question": "What is the difference between process.env and process.argv?",
    "answer": "process.env contains the user environment variables, while process.argv contains the command line arguments passed to the Node.js process. process.env is commonly used for configuration and secrets, while process.argv is used for command-line options and arguments. process.argv[0] is the path to the Node.js executable, and process.argv[1] is the path to the JavaScript file being executed.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "What is the difference between HashMap and HashTable?",
    "answer": "HashMap is non-synchronized and permits null values/keys, while HashTable is synchronized and doesn't allow null values/keys. HashMap performs better in non-threaded applications, while HashTable is thread-safe but has lower performance. HashMap was introduced in Java 2, while HashTable is a legacy class. HashMap's iterator is fail-fast, while HashTable's enumerator is not fail-fast.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "Explain Java's garbage collection",
    "answer": "Java's garbage collection automatically manages memory by identifying and removing objects that are no longer referenced. The JVM uses different garbage collection algorithms (like Mark-and-Sweep, Copying, Mark-and-Compact) and collectors (Serial, Parallel, CMS, G1). The garbage collector runs in a separate thread and can be tuned using various parameters. It helps prevent memory leaks but doesn't guarantee immediate memory reclamation.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "What is the difference between final, finally, and finalize?",
    "answer": "final is a keyword used to make variables constant, prevent method overriding, and prevent inheritance. finally is a block used with try-catch to ensure code execution regardless of exception occurrence. finalize is a method called by the garbage collector before object collection. final is a modifier, finally is a block, and finalize is a method.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "Explain Java's thread lifecycle",
    "answer": "Java threads go through various states: NEW (created but not started), RUNNABLE (ready to run or currently running), BLOCKED (waiting for monitor lock), WAITING (waiting indefinitely for another thread), TIMED_WAITING (waiting for a specified time), and TERMINATED (completed execution). Thread state transitions are managed by the JVM and can be monitored using Thread.getState().",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "What is the difference between wait() and sleep()?",
    "answer": "wait() is a method of Object class that releases the lock on the object, while sleep() is a static method of Thread class that doesn't release the lock. wait() can be interrupted and must be called from a synchronized context, while sleep() can be called from any context. wait() is used for thread coordination, while sleep() is used for timing.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "Explain Java's exception hierarchy",
    "answer": "Java's exception hierarchy starts with Throwable, which has two subclasses: Error and Exception. Error represents serious problems that shouldn't be caught (like OutOfMemoryError). Exception has two subclasses: RuntimeException (unchecked exceptions) and other exceptions (checked exceptions). Checked exceptions must be declared or caught, while unchecked exceptions don't require explicit handling.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "What is the difference between String, StringBuilder, and StringBuffer?",
    "answer": "String is immutable and thread-safe, StringBuilder is mutable and non-thread-safe, and StringBuffer is mutable and thread-safe. String operations create new objects, while StringBuilder and StringBuffer modify the existing object. StringBuilder is faster than StringBuffer for single-threaded applications. String is best for constants, StringBuilder for single-threaded string manipulation, and StringBuffer for multi-threaded string manipulation.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "Explain Java's reflection API",
    "answer": "Reflection allows programs to examine and modify their own structure and behavior at runtime. It provides capabilities to inspect classes, interfaces, fields, and methods; create new instances of classes; invoke methods; and get/set field values. Reflection is powerful but can impact performance and break encapsulation. It's commonly used in frameworks, testing tools, and development tools.",
    "difficulty": "Hard"
  },
  {
    "technology": "Java",
    "question": "What is the difference between Comparable and Comparator?",
    "answer": "Comparable is an interface with a single compareTo() method for natural ordering, while Comparator is an interface with compare() method for custom ordering. Comparable is implemented by the class to be compared, while Comparator is implemented by a separate class. Comparable provides a single sorting sequence, while Comparator can provide multiple sorting sequences.",
    "difficulty": "Medium"
  },
  {
    "technology": "Java",
    "question": "Explain Java's memory model",
    "answer": "Java's memory model defines how threads interact with memory, particularly with shared variables. It includes the heap (object storage), stack (method calls and local variables), and method area (class data). The model ensures memory consistency through happens-before relationships and volatile keyword. It helps prevent race conditions and ensures proper thread synchronization.",
    "difficulty": "Hard"
  },
  {
    "technology": "React",
    "question": "What is the Virtual DOM in React?",
    "answer": "The Virtual DOM is a lightweight copy of the actual DOM. React uses it to improve performance by minimizing direct manipulation of the DOM. When state changes, React creates a new Virtual DOM tree, compares it with the previous one (diffing), and updates only the necessary parts of the actual DOM (reconciliation). This process is called reconciliation and makes React applications faster.",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "Explain React's component lifecycle",
    "answer": "React components go through three main phases: mounting, updating, and unmounting. Mounting includes constructor(), static getDerivedStateFromProps(), render(), and componentDidMount(). Updating includes static getDerivedStateFromProps(), shouldComponentUpdate(), render(), getSnapshotBeforeUpdate(), and componentDidUpdate(). Unmounting includes componentWillUnmount(). These methods allow you to perform actions at specific points in a component's lifecycle.",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What is the difference between state and props?",
    "answer": "Props are read-only data passed from parent to child components, while state is mutable data managed within a component. Props are external and controlled by parent components, while state is internal and controlled by the component itself. Props are used for passing data down the component tree, while state is used for managing component-specific data that changes over time.",
    "difficulty": "Easy"
  },
  {
    "technology": "React",
    "question": "Explain React Hooks",
    "answer": "Hooks are functions that allow you to use state and other React features in functional components. Common hooks include useState (for state management), useEffect (for side effects), useContext (for context), useReducer (for complex state), useCallback (for memoized callbacks), and useMemo (for memoized values). Hooks must be called at the top level of functional components.",
    "difficulty": "Hard"
  },
  {
    "technology": "React",
    "question": "What is the difference between controlled and uncontrolled components?",
    "answer": "Controlled components have their value controlled by React state, while uncontrolled components maintain their own internal state. Controlled components use value and onChange props, while uncontrolled components use refs to access DOM values. Controlled components provide better control over form data, while uncontrolled components are simpler to implement.",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "Explain React's Context API",
    "answer": "Context API provides a way to pass data through the component tree without prop drilling. It consists of React.createContext(), Provider component, and Consumer component (or useContext hook). Context is useful for global data like themes, user authentication, and language preferences. It should be used sparingly as it can make component reuse more difficult.",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What is the difference between useCallback and useMemo?",
    "answer": "useCallback memoizes functions, while useMemo memoizes values. useCallback is used when passing callbacks to optimized child components, while useMemo is used for expensive calculations. Both hooks take a dependency array to determine when to recompute. useCallback returns a memoized callback function, while useMemo returns a memoized value.",
    "difficulty": "Hard"
  },
  {
    "technology": "React",
    "question": "Explain React's reconciliation process",
    "answer": "Reconciliation is the process through which React updates the DOM to match React elements. It involves comparing the new Virtual DOM tree with the previous one (diffing) and updating only the necessary parts of the actual DOM. React uses a 'key' prop to identify which items have changed, been added, or been removed. This process makes React applications efficient by minimizing DOM operations.",
    "difficulty": "Medium"
  },
  {
    "technology": "React",
    "question": "What is the difference between React.memo and useMemo?",
    "answer": "React.memo is a higher-order component that memoizes the entire component, while useMemo is a hook that memoizes a value. React.memo prevents unnecessary re-renders of a component, while useMemo prevents unnecessary recalculations of a value. React.memo is used at the component level, while useMemo is used within a component.",
    "difficulty": "Easy"
  },
  {
    "technology": "React",
    "question": "Explain React's error boundaries",
    "answer": "Error boundaries are React components that catch JavaScript errors anywhere in their child component tree and display a fallback UI. They catch errors during rendering, in lifecycle methods, and in constructors. Error boundaries don't catch errors in event handlers, asynchronous code, server-side rendering, or errors thrown in the error boundary itself.",
    "difficulty": "Medium"
  }
]