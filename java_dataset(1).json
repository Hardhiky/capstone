[
  {
    "question": "1. What is the difference between JDK and JRE?",
    "answer": "JDK is for developing Java apps (includes JRE + tools). JRE is for running Java apps."
  },
  {
    "question": "2. What is Java Virtual Machine (JVM)?",
    "answer": "Executes Java bytecode, enabling platform independence."
  },
  {
    "question": "3. What are the different types of memory areas allocated by JVM?",
    "answer": "Heap, Method Area, Stack, PC Register, Native Method Stack."
  },
  {
    "question": "4. What is JIT compiler?",
    "answer": "Compiles bytecode to native code at runtime for faster execution."
  },
  {
    "question": "5. How Java platform is different from other platforms?",
    "answer": "Java uses JVM, making it platform-independent."
  },
  {
    "question": "6. Why people say that Java is 'write once and run anywhere' language?",
    "answer": "Bytecode runs on any system with a compatible JVM."
  },
  {
    "question": "7. How does ClassLoader work in Java?",
    "answer": "Loads classes into memory using a delegation hierarchy."
  },
  {
    "question": "8. Do you think ‘main’ used for main method is a keyword in Java?",
    "answer": "No, it's a method name."
  },
  {
    "question": "9. Can we write main method as public void static instead of public static void?",
    "answer": "No, the order is `public static void main()`."
  },
  {
    "question": "10. In Java, if we do not specify any value for local variables, then what will be the default value of the local variables?",
    "answer": "No default value; local variables must be initialized."
  },
  {
    "question": "11. Let say, we run a java class without passing any arguments. What will be the value of String array of arguments in Main method?",
    "answer": "An empty array (length is 0)."
  },
  {
    "question": "12. What is the difference between byte and char data types in Java?",
    "answer": "byte: 8-bit signed integer. char: 16-bit unsigned Unicode character."
  },
  {
    "question": "13. What are the main principles of Object Oriented Programming?",
    "answer": "Encapsulation, Inheritance, Polymorphism, Abstraction."
  },
  {
    "question": "14. What is the difference between Object Oriented Programming language and Object Based Programming language?",
    "answer": "OOP supports inheritance, object-based may not."
  },
  {
    "question": "15. In Java what is the default value of an object reference defined as an instance variable in an Object?",
    "answer": "null"
  },
  {
    "question": "16. Why do we need constructor in Java?",
    "answer": "To initialize object state."
  },
  {
    "question": "17. Why do we need default constructor in Java classes?",
    "answer": "Compiler provides it if no other constructor is defined."
  },
  {
    "question": "18. What is the value returned by Constructor in Java?",
    "answer": "The new object instance (implicitly)."
  },
  {
    "question": "19. Can we inherit a Constructor?",
    "answer": "No."
  },
  {
    "question": "20. Why constructors cannot be final, static, or abstract in Java?",
    "answer": "Contradicts the purpose of a constructor (initialization)."
  },
  {
    "question": "21. What is the purpose of ‘this’ keyword in java?",
    "answer": "Refers to the current object."
  },
  {
    "question": "22. Explain the concept of Inheritance?",
    "answer": "Subclass inherits properties/methods from superclass."
  },
  {
    "question": "23. Which class in Java is superclass of every other class?",
    "answer": "Object"
  },
  {
    "question": "24. Why Java does not support multiple inheritance?",
    "answer": "To avoid the Diamond Problem."
  },
  {
    "question": "25. In OOPS, what is meant by composition?",
    "answer": "Object contains other objects (strong ownership)."
  },
  {
    "question": "26. How aggregation and composition are different concepts?",
    "answer": "Aggregation: weak relationship. Composition: strong."
  },
  {
    "question": "27. Why there are no pointers in Java?",
    "answer": "Security and simplicity."
  },
  {
    "question": "28. If there are no pointers in Java, then why do we get NullPointerException?",
    "answer": "Object reference is null, not pointing to an object."
  },
   {
    "question": "29. What is the purpose of ‘super’ keyword in java?",
    "answer": "Call superclass constructor or method."
  },
   {
    "question": "30. Is it possible to use this() and super() both in same constructor?",
    "answer": "No, only one, and as the first statement."
  },
   {
    "question": "31. What is the meaning of object cloning in Java?",
    "answer": "Creating a copy of an object."
  },
   {
    "question": "32. In Java, why do we use static variable?",
    "answer": "Shared by all instances of the class."
  },
   {
    "question": "33. Why it is not a good practice to create static variables in Java?",
    "answer": "Can lead to tight coupling and global state issues."
  },
   {
    "question": "34. What is the purpose of static method in Java?",
    "answer": "Belongs to the class, not an instance."
  },
   {
    "question": "35. Why do we mark main method as static in Java?",
    "answer": "JVM can call it without creating an object."
  },
   {
    "question": "36. In what scenario do we use a static block?",
    "answer": "Initialize static variables."
  },
   {
    "question": "37. Is it possible to execute a program without defining a main() method?",
    "answer": "No (since Java 7)."
  },
   {
    "question": "38. What happens when static modifier is not mentioned in the signature of main method?",
    "answer": "NoSuchMethodError at runtime."
  },
   {
    "question": "39. What is the difference between static method and instance method in Java?",
    "answer": "Static: Class-level. Instance: Object-level."
  },
   {
    "question": "40. What is the other name of Method Overloading?",
    "answer": "Compile-time polymorphism."
  },
   {
    "question": "41. How will you implement method overloading in Java?",
    "answer": "Methods with same name, different parameters."
  },
   {
    "question": "42. What kinds of argument variations are allowed in Method Overloading?",
    "answer": "Number, type, or order of parameters."
  },
   {
    "question": "43. Why it is not possible to do method overloading by changing return type of method in java?",
    "answer": "Compiler can't distinguish calls based on return type."
  },
   {
    "question": "44. Is it allowed to overload main() method in Java?",
    "answer": "Yes."
  },
   {
    "question": "45. How do we implement method overriding in Java?",
    "answer": "Subclass method with same signature as superclass."
  },
   {
    "question": "46. Are we allowed to override a static method in Java?",
    "answer": "No, it's method hiding."
  },
   {
    "question": "47. Why Java does not allow overriding a static method?",
    "answer": "Static methods belong to the class, not the object."
  },
   {
    "question": "48. Is it allowed to override an overloaded method?",
    "answer": "Yes."
  },
   {
    "question": "49. What is the difference between method overloading and method overriding in Java?",
    "answer": "Overloading: Same class, different parameters. Overriding: Subclass, same signature."
  },
   {
    "question": "50. Does Java allow virtual functions?",
    "answer": "Yes, all non-final, non-static, non-private methods are virtual."
  },
   {
    "question": "51. What is meant by covariant return type in Java?",
    "answer": "Overriding method can return subtype of superclass return type."
  },
   {
    "question": "52. What is Runtime Polymorphism?",
    "answer": "Method call determined at runtime (overriding)."
  },
   {
    "question": "53. Is it possible to achieve Runtime Polymorphism by data members in Java?",
    "answer": "No."
  },
   {
    "question": "54. Explain the difference between static and dynamic binding?",
    "answer": "Static: Compile-time (overloading). Dynamic: Runtime (overriding)."
  },
   {
    "question": "55. What is Abstraction in Object Oriented programming?",
    "answer": "Hiding complex implementation, showing essential features."
  },
   {
    "question": "56. How is Abstraction different from Encapsulation?",
    "answer": "Abstraction: Hiding complexity. Encapsulation: Bundling data and methods."
  },
   {
    "question": "57. What is an abstract class in Java?",
    "answer": "Cannot be instantiated; may contain abstract methods."
  },
   {
    "question": "58. Is it allowed to mark a method abstract method without marking the class abstract?",
    "answer": "No."
  },
   {
    "question": "59. Is it allowed to mark a method abstract as well as final?",
    "answer": "No."
  },
   {
    "question": "60. Can we instantiate an abstract class in Java?",
    "answer": "No."
  },
   {
    "question": "61. What is an interface in Java?",
    "answer": "Contract of methods to be implemented."
  },
   {
    "question": "62. Is it allowed to mark an interface method as static?",
    "answer": "Yes (since Java 8)."
  },
   {
    "question": "63. Why an Interface cannot be marked as final in Java?",
    "answer": "Final means it cannot be implemented, contradicting its purpose."
  },
   {
    "question": "64. What is a marker interface?",
    "answer": "Interface with no methods (e.g., Serializable)."
  },
   {
    "question": "65. What can we use instead of Marker interface?",
    "answer": "Annotations."
  },
   {
    "question": "66. How Annotations are better than Marker Interfaces?",
    "answer": "More flexible, can carry metadata."
  },
   {
    "question": "67. What is the difference between abstract class and interface in Java?",
    "answer": "Abstract class can have state and method implementations. Interface primarily defines contracts."
  },
   {
    "question": "68. Does Java allow us to use private and protected modifiers for variables in interfaces?",
    "answer": "No."
  },
   {
    "question": "69. How can we cast to an object reference to an interface reference?",
    "answer": "If the object implements the interface."
  },
   {
    "question": "70. How can you change the value of a final variable in Java?",
    "answer": "Only once, during initialization."
  },
   {
    "question": "71. Can a class be marked final in Java?",
    "answer": "Yes."
  },
   {
    "question": "72. How can we create a final method in Java?",
    "answer": "Use the `final` keyword."
  },
   {
    "question": "73. How can we prohibit inheritance in Java?",
    "answer": "Make the class `final`."
  },
   {
    "question": "74. Why Integer class in final in Java?",
    "answer": "Immutability and security."
  },
   {
    "question": "75. What is a blank final variable in Java?",
    "answer": "Final variable not initialized at declaration."
  },
   {
    "question": "76. How can we initialize a blank final variable?",
    "answer": "In the constructor."
  },
   {
    "question": "77. Is it allowed to declare main method as final?",
    "answer": "Yes."
  },
   {
    "question": "78. What is the purpose of package in Java?",
    "answer": "Namespace and organization."
  },
   {
    "question": "79. What is java.lang package?",
    "answer": "Core Java classes (Object, String, etc.)."
  },
   {
    "question": "80. Which is the most important class in Java?",
    "answer": "Object"
  },
   {
    "question": "81. Is it mandatory to import java.lang package every time?",
    "answer": "No, implicitly imported."
  },
   {
    "question": "82. Can you import same package or class twice in your class?",
    "answer": "Yes, but redundant."
  },
   {
    "question": "83. What is a static import in Java?",
    "answer": "Import static members directly."
  },
   {
    "question": "84. What is the difference between import static com.test.Fooclass and import com.test.Fooclass?",
    "answer": "static imports static members; regular imports the class itself."
  },
   {
    "question": "85. What is Locale in Java?",
    "answer": "Represents a geographical, political, or cultural region."
  },
   {
    "question": "86. How will you use a specific Locale in Java?",
    "answer": "Create Locale object, use with formatting classes."
  },
   {
    "question": "87. What is the serialization?",
    "answer": "Converting an object to a byte stream."
  },
   {
    "question": "88. What is the purpose of serialization?",
    "answer": "Persistence and transport."
  },
   {
    "question": "89. What is Deserialization?",
    "answer": "Converting a byte stream back to an object."
  },
   {
    "question": "90. What is Serialization and Deserialization conceptually?",
    "answer": "Object -> Bytes (Serialization), Bytes -> Object (Deserialization)."
  },
   {
    "question": "91. Why do we mark a data member transient?",
    "answer": "Exclude it from serialization."
  },
   {
    "question": "92. Is it allowed to mark a method as transient?",
    "answer": "No."
  },
   {
    "question": "93. How does marking a field as transient makes it possible to serialize an object?",
    "answer": "The transient field's value isn't saved in the byte stream."
  },
   {
    "question": "94. What is Externalizable interface in Java?",
    "answer": "Provides control over serialization process."
  },
   {
    "question": "95. What is the difference between Serializable and Externalizable interface?",
    "answer": "Serializable: Automatic. Externalizable: Manual control."
  },
   {
    "question": "96. What is Reflection in Java?",
    "answer": "Inspect and manipulate classes at runtime."
  },
   {
    "question": "97. What are the uses of Reflection in Java?",
    "answer": "Dynamic object creation, accessing private members."
  },
   {
    "question": "98. How can we access private method of a class from outside the class?",
    "answer": "Using Reflection (setAccessible(true))."
  },
   {
    "question": "99. How can we create an Object dynamically at Runtime in Java?",
    "answer": "Using Reflection (Class.forName().newInstance())."
  },
   {
    "question": "100. What is Garbage Collection in Java?",
    "answer": "Automatic memory management."
  },
   {
    "question": "101. Why Java provides Garbage Collector?",
    "answer": "To automatically reclaim unused memory, preventing memory leaks."
  },
  {
    "question": "102. What is the purpose of gc() in Java?",
    "answer": "It's a request to the JVM to run the garbage collector (not a guarantee)."
  },
  {
    "question": "103. How does Garbage Collection work in Java?",
    "answer": "It identifies and reclaims memory occupied by unreachable objects."
  },
  {
    "question": "104. When does an object become eligible for Garbage Collection in Java?",
    "answer": "When there are no more reachable references to it."
  },
  {
    "question": "105. Why do we use finalize() method in Java?",
    "answer": "To perform cleanup before an object is garbage collected (rarely used)."
  },
  {
    "question": "106. What are the different types of References in Java?",
    "answer": "Strong, Soft, Weak, and Phantom References."
  },
  {
    "question": "107. How can we reference an unreferenced object again?",
    "answer": "Generally not possible, but PhantomReferences offer notification."
  },
  {
    "question": "108. What kind of process is the Garbage collector thread?",
    "answer": "A low-priority daemon thread."
  },
  {
    "question": "109. What is the purpose of the Runtime class?",
    "answer": "Provides access to the Java runtime environment."
  },
  {
    "question": "110. How can we invoke an external process in Java?",
    "answer": "Using `Runtime.getRuntime().exec()`."
  },
  {
    "question": "111. What are the uses of Runtime class?",
    "answer": "Process execution, memory management, library loading."
  },
  {
    "question": "112. What is a Nested class?",
    "answer": "A class defined inside another class."
  },
  {
    "question": "113. How many types of Nested classes are in Java?",
    "answer": "Two: static nested classes and inner classes."
  },
  {
    "question": "114. Why do we use Nested Classes?",
    "answer": "Encapsulation, organization, access to enclosing class."
  },
  {
    "question": "115. What is the difference between a Nested class and an Inner class in Java?",
    "answer": "Nested (static) lacks implicit access. Inner (non-static) has it."
  },
  {
    "question": "116. What is a Nested interface?",
    "answer": "An interface defined inside a class or interface."
  },
  {
    "question": "117. How can we access the non-final local variable, inside a Local Inner class?",
    "answer": "It must be effectively final (value doesn't change)."
  },
  {
    "question": "118. Can an Interface be defined in a Class?",
    "answer": "Yes."
  },
  {
    "question": "119. Do we have to explicitly mark a Nested Interface public static?",
    "answer": "Implicitly static; requires access modifier (e.g., public)."
  },
  {
    "question": "120. Why do we use Static Nested interface in Java?",
    "answer": "Namespace control and organization."
  },
  {
    "question": "121. What is the meaning of Immutable in the context of String class in Java?",
    "answer": "Value cannot be changed after creation."
  },
  {
    "question": "122. Why a String object is considered immutable in java?",
    "answer": "Security, caching, thread safety."
  },
  {
    "question": "123. How many objects does following code create?",
    "answer": "Requires code snippet to answer accurately."
  },
  {
    "question": "124. How many ways are there in Java to create a String object?",
    "answer": "Literal or `new String()`."
  },
  {
    "question": "125. How many objects does following code create?",
    "answer": "Requires code snippet to answer accurately."
  },
  {
    "question": "126. What is String interning?",
    "answer": "Storing one copy of each unique literal in String pool."
  },
  {
    "question": "127. Why Java uses String literal concept?",
    "answer": "Memory efficiency (interning)."
  },
  {
    "question": "128. What is the basic difference between a String and StringBuffer object?",
    "answer": "`String` is immutable; `StringBuffer` is mutable."
  },
  {
    "question": "129. How will you create an immutable class in Java?",
    "answer": "final class, private final fields, no setters, deep copy."
  },
  {
    "question": "130. What is the use of toString() method in java ?",
    "answer": "Returns a String representation of the object."
  },
  {
    "question": "131. Arrange the three classes String, StringBuffer and StringBuilder in the order of efficiency for String processing operations?",
    "answer": "StringBuilder > StringBuffer > String."
  },
  {
    "question": "132. What is Exception Handling in Java?",
    "answer": "Handles runtime errors to prevent crashes."
  },
  {
    "question": "133. In Java, what are the differences between a Checked and Unchecked?",
    "answer": "Checked: must be caught/declared. Unchecked: not enforced."
  },
  {
    "question": "134. What is the base class for Error and Exception classes in Java?",
    "answer": "`Throwable`."
  },
  {
    "question": "135. What is a finally block in Java?",
    "answer": "Always executes, regardless of exceptions."
  },
  {
    "question": "136. What is the use of finally block in Java?",
    "answer": "Resource cleanup (close files, etc.)."
  },
  {
    "question": "137. Can we create a finally block without creating a catch block?",
    "answer": "Yes, `try-finally` is valid."
  },
  {
    "question": "138. Do we have to always put a catch block after a try block?",
    "answer": "No, `try-finally` is valid."
  },
  {
    "question": "139. In what scenarios, a finally block will not be executed?",
    "answer": "System.exit() or JVM crash."
  },
  {
    "question": "140. Can we re-throw an Exception in Java?",
    "answer": "Yes."
  },
  {
    "question": "141. What is the difference between throw and throws in Java?",
    "answer": "`throw`: throws an exception. `throws`: declares an exception."
  },
  {
    "question": "142. What is the concept of Exception Propagation?",
    "answer": "Exceptions propagate up the call stack until handled."
  },
  {
    "question": "143. When we override a method in a Child class, can we throw an additional Exception that is not thrown by the Parent class method?",
    "answer": "Yes, if it's an unchecked exception. Checked exception must be a subtype or absent."
  },
  {
    "question": "144. How Multi-threading works in Java?",
    "answer": "Multiple threads execute concurrently within a single process."
  },
  {
    "question": "145. What are the advantages of Multithreading?",
    "answer": "Improved performance, responsiveness, resource utilization."
  },
  {
    "question": "146. What are the disadvantages of Multithreading?",
    "answer": "Complexity, synchronization issues, potential for deadlocks."
  },
  {
    "question": "147. What is a Thread in Java?",
    "answer": "A lightweight process that can execute concurrently."
  },
  {
    "question": "148. What is a Thread’s priority and how it is used in scheduling?",
    "answer": "Hint to scheduler; higher priority gets preference (not guaranteed)."
  },
  {
    "question": "149. What are the differences between Pre-emptive Scheduling Scheduler and Time Slicing Scheduler?",
    "answer": "Pre-emptive: OS interrupts. Time-slicing: Each thread gets a time slice."
  },
  {
    "question": "150. Is it possible to call run() method instead of start() on a thread in Java?",
    "answer": "Yes, but it won't create a new thread; it'll run in the current thread."
  },
  {
    "question": "151. How will you make a user thread into daemon thread if it has already started?",
    "answer": "Cannot be done after the thread has started."
  },
  {
    "question": "152. Can we start a thread two times in Java?",
    "answer": "No, it throws IllegalThreadStateException."
  },
  {
    "question": "153. In what scenarios can we interrupt a thread?",
    "answer": "When it's sleeping, waiting, or blocked on I/O."
  },
  {
    "question": "154. In Java, is it possible to lock an object for exclusive use by a thread?",
    "answer": "Yes, using `synchronized` keyword or Lock objects."
  },
  {
    "question": "155. How notify() method is different from notifyAll() method?",
    "answer": "`notify()` wakes up one waiting thread. `notifyAll()` wakes up all waiting threads."
  },
  {
    "question": "156. What are the differences between the two data structures: a Vector and an ArrayList?",
    "answer": "Vector is synchronized (thread-safe), ArrayList is not."
  },
  {
    "question": "157. What are the differences between Collection and Collections in Java?",
    "answer": "Collection: Interface. Collections: Utility class."
  },
  {
    "question": "158. In which scenario, LinkedList is better than ArrayList in Java?",
    "answer": "Frequent insertions/deletions in the middle of the list."
  },
  {
    "question": "159. What are the differences between a List and Set collection in Java?",
    "answer": "List: Ordered, allows duplicates. Set: Unordered, no duplicates."
  },
  {
    "question": "160. What are the differences between a HashSet and TreeSet collection in Java?",
    "answer": "HashSet: Unordered, uses hashing. TreeSet: Sorted, uses a tree."
  },
  {
    "question": "161. In Java, how will you decide when to use a List, Set or a Map collection?",
    "answer": "List: Ordered, duplicates allowed. Set: Unique elements. Map: Key-value pairs."
  },
  {
    "question": "162. What are the differences between a HashMap and a Hashtable in Java?",
    "answer": "HashMap: Not synchronized, allows null keys/values. Hashtable: Synchronized, no nulls."
  },
  {
    "question": "163. What are the differences between a HashMap and a TreeMap?",
    "answer": "HashMap: Unordered. TreeMap: Sorted by key."
  },
  {
    "question": "164. What are the differences between Comparable and Comparator?",
    "answer": "Comparable: Implemented by the class itself (natural ordering). Comparator: Separate class (custom ordering)."
  },
  {
    "question": "165. In Java, what is the purpose of Properties file?",
    "answer": "Store configuration data as key-value pairs."
  },
  {
    "question": "166. What is the reason for overriding equals() method?",
    "answer": "To define object equality based on content, not just reference."
  },
  {
    "question": "167. How does hashCode() method work in Java?",
    "answer": "Returns an integer hash code value for an object."
  },
  {
    "question": "168. Is it a good idea to use Generics in collections?",
    "answer": "Yes, for type safety and to avoid ClassCastExceptions."
  },
  {
    "question": "169. What are Wrapper classes in Java?",
    "answer": "Classes that wrap primitive types (Integer, Double, etc.)."
  },
  {
    "question": "170. What is the purpose of native method in Java?",
    "answer": "To call code written in other languages (C, C++)."
  },
  {
    "question": "171. What is System class?",
    "answer": "Provides access to system resources (standard input/output, etc.)."
  },
  {
    "question": "172. What is System, out and println in System.out.println method call?",
    "answer": "System: Class. out: static member of type PrintStream. println: method of PrintStream."
  },
  {
    "question": "173. What is the other name of Shallow Copy in Java?",
    "answer": "Bitwise copy."
  },
  {
    "question": "174. What is the difference between Shallow Copy and Deep Copy in Java?",
    "answer": "Shallow: Copies references. Deep: Copies objects themselves."
  },
  {
    "question": "175. What is a Singleton class?",
    "answer": "Only one instance can be created."
  },
  {
    "question": "176. What is the difference between Singleton class and Static class?",
    "answer": "Singleton: Instance can be accessed. Static: Only static members; no instances."
  },
  {
    "question": "177. What is the difference between Collection and Collections Framework in Java?",
    "answer": "Collection: Interface. Collections Framework: Set of interfaces/classes for collections."
  },
  {
    "question": "178. What are the main benefits of Collections Framework in Java?",
    "answer": "Code reuse, performance, reduced development effort."
  },
  {
    "question": "179. What is the root interface of Collection hierarchy in Java?",
    "answer": "`Collection`."
  },
  {
    "question": "180. What are the main differences between Collection and Collections?",
    "answer": "Collection: Interface. Collections: Utility class."
  },
  {
    "question": "181. What are the Thread-safe classes in Java Collections framework?",
    "answer": "Vector, Hashtable, ConcurrentHashMap, etc."
  },
  {
    "question": "182. How will you efficiently remove elements while iterating a Collection?",
    "answer": "Using Iterator.remove()."
  },
  {
    "question": "183. How will you convert a List into an array of integers like- int[]?",
    "answer": "Using `List.toArray(new Integer[0])` and then manually unboxing."
  },
  {
    "question": "184. How will you convert an array of primitive integers int[] to a List collection?",
    "answer": "Using `Arrays.asList()` with Integer wrapper objects or Java 8 streams."
  },
  {
    "question": "185. How will you run a filter on a Collection?",
    "answer": "Using Java 8 streams and the `filter()` method."
  },
  {
    "question": "186. How will you convert a List to a Set?",
    "answer": "Create a new Set and pass the List to the constructor (e.g., `new HashSet<>(list)`)."
  },
  {
    "question": "187. How will you remove duplicate elements from an ArrayList?",
    "answer": "Convert to a Set and back to an ArrayList."
  },
  {
    "question": "188. How can you maintain a Collection with elements in Sorted order?",
    "answer": "Use a TreeSet or a sorted List (e.g., `Collections.sort()`)."
  },
  {
    "question": "189. What is the difference between Collections.emptyList() and creating new instance of Collection?",
    "answer": "`Collections.emptyList()` returns an immutable, pre-existing empty list, avoiding object creation."
  },
  {
    "question": "190. How will you copy elements from a Source List to another list?",
    "answer": "Using `List.addAll()` or iterating and adding elements."
  },
  {
    "question": "191. What are the Java Collection classes that implement List interface?",
    "answer": "ArrayList, LinkedList, Vector."
  },
  {
    "question": "192. What are the Java Collection classes that implement Set interface?",
    "answer": "HashSet, TreeSet, LinkedHashSet."
  },
  {
    "question": "193. What is the difference between an Iterator and ListIterator in Java?",
    "answer": "Iterator: Forward iteration only. ListIterator: Bidirectional iteration, add/remove elements."
  },
  {
    "question": "194. What is the difference between Iterator and Enumeration?",
    "answer": "Iterator: Remove elements during iteration. Enumeration: Read-only."
  },
  {
    "question": "195. What is the difference between an ArrayList and a LinkedList data structure?",
    "answer": "ArrayList: Array-based, fast access. LinkedList: Node-based, fast insertions/deletions."
  },
  {
    "question": "196. What is the difference between a Set and a Map in Java?",
    "answer": "Set: Stores unique elements. Map: Stores key-value pairs."
  },
  {
    "question": "197. What is the use of a Dictionary class?",
    "answer": "Abstract class for key-value pairs (legacy; use Map instead)."
  },
  {
    "question": "198. What is the default size of load factor in a HashMap collection in Java?",
    "answer": "Default load factor is 0.75."
  },
  {
    "question": "199. What is the significance of load factor in a HashMap in Java?",
    "answer": "Determines when the HashMap's capacity is increased (affects performance)."
  },
  {
    "question": "200. What are the major differences between a HashSet and a HashMap?",
    "answer": "HashSet: Stores objects, no duplicates. HashMap: Stores key-value pairs. HashSet uses HashMap internally."
  },
  {
    "question": "201.What are the similarities between a HashSet and a HashMap in Java?",
    "answer": "Both use a hash table for storage, providing fast lookups, and neither guarantees element order."
  },
  {
    "question": "202.What is the reason for overriding equals() method?",
    "answer": "To define object equality based on content rather than memory address, especially for use in collections."
  },
  {
    "question": "203.How can we synchronize the elements of a List, a Set or a Map?",
    "answer": "Using `Collections.synchronizedList()`, `Collections.synchronizedSet()`, and `Collections.synchronizedMap()` methods."
  },
  {
    "question": "204.What is Hash Collision? How Java handles hash-collision in HashMap?",
    "answer": "Hash Collision: When two different keys produce the same hash code. Java uses separate chaining (linked lists or trees) to store entries with the same hash code."
  },
  {
    "question": "205.What are the Hash Collision resolution techniques?",
    "answer": "Separate chaining (linked lists/trees), open addressing (probing)."
  },
  {
    "question": "206.What is the difference between Queue and Stack data structures?",
    "answer": "Queue: FIFO (First-In, First-Out). Stack: LIFO (Last-In, First-Out)."
  },
  {
    "question": "207.What is an Iterator in Java?",
    "answer": "An interface that provides a way to access elements of a collection sequentially."
  },
  {
    "question": "208.What is the difference between Iterator and Enumeration in Java?",
    "answer": "Iterator: Supports removing elements during iteration. Enumeration: Read-only (no remove)."
  },
  {
    "question": "209.What is the design pattern used in the implementation of Enumeration in Java?",
    "answer": "Iterator pattern."
  },
  {
    "question": "210.Which methods do we need to override to use an object as key in a HashMap?",
    "answer": "`equals()` and `hashCode()`."
  },
  {
    "question": "211.How will you reverse a List in Java?",
    "answer": "Using `Collections.reverse()`."
  },
  {
    "question": "212.How will you convert an array of String objects into a List?",
    "answer": "Using `Arrays.asList()`."
  },
  {
    "question": "213.What is the difference between peek(), poll() and remove() methods of Queue interface in java?",
    "answer": "`peek()`: Retrieves, doesn't remove, returns null if empty. `poll()`: Retrieves, removes, returns null if empty. `remove()`: Retrieves, removes, throws exception if empty."
  },
  {
    "question": "214.What is the difference between Array and ArrayList in Java?",
    "answer": "Array: Fixed size. ArrayList: Dynamic size, part of Collections framework."
  },
  {
    "question": "215.How will you insert, delete and retrieve elements from a HashMap collection in Java?",
    "answer": "Insert: `put()`. Delete: `remove()`. Retrieve: `get()`."
  },
  {
    "question": "216.What are the main differences between HashMap and ConcurrentHashMap in Java?",
    "answer": "HashMap: Not synchronized. ConcurrentHashMap: Thread-safe, concurrent access."
  },
  {
    "question": "217.What is the increasing order of performance for following collection classes in Java?",
    "answer": "Requires the list of collection classes to answer specifically. Generally, synchronized collections are slower than unsynchronized ones."
  },
  {
    "question": "218.Why does Map interface not extend Collection interface in Java?",
    "answer": "Map stores key-value pairs, Collection stores single elements. Different fundamental concepts."
  },
  {
    "question": "219.What are the different ways to iterate elements of a list in Java?",
    "answer": "For loop, enhanced for loop, Iterator, ListIterator, streams."
  },
  {
    "question": "220.What is CopyOnWriteArrayList? How it is different from ArrayList in Java?",
    "answer": "Thread-safe; creates a new copy on each modification, avoiding concurrent modification exceptions."
  },
  {
    "question": "221.How remove() method is implemented in a HashMap?",
    "answer": "Calculates hash code of the key, finds the bucket, removes the entry from the linked list or tree at that bucket."
  },
  {
    "question": "222.What is BlockingQueue in Java Collections?",
    "answer": "A queue that blocks when trying to enqueue to a full queue or dequeue from an empty queue."
  },
  {
    "question": "223.How is TreeMap class implemented in Java?",
    "answer": "Using a red-black tree, providing sorted key order."
  },
  {
    "question": "224.What is the difference between Fail-fast and Fail-safe iterator in Java?",
    "answer": "Fail-fast: Throws ConcurrentModificationException if collection is modified during iteration. Fail-safe: Operates on a copy of the collection, avoiding the exception."
  },
  {
    "question": "225.How does ConcurrentHashMap work in Java?",
    "answer": "Uses segments (buckets) with locks, allowing concurrent access to different parts of the map."
  },
  {
    "question": "226.What is the importance of hashCode() and equals() methods?",
    "answer": "Essential for using objects as keys in HashMaps/HashSets; `equals()` defines equality, `hashCode()` provides a hash code for efficient storage/retrieval."
  },
  {
    "question": "227.What is the contract of hashCode() and equals() methods in Java?",
    "answer": "If `equals()` returns true, `hashCode()` must return the same value. If `equals()` returns false, `hashCode()` should return different values (ideally)."
  },
  {
    "question": "228.What is an EnumSet in Java?",
    "answer": "A specialized Set implementation for enums, providing high performance."
  },
  {
    "question": "229.What are the main Concurrent Collection classes in Java?",
    "answer": "ConcurrentHashMap, CopyOnWriteArrayList, BlockingQueue, etc."
  },
  {
    "question": "230.How will you convert a Collection to SynchronizedCollection in Java?",
    "answer": "Using `Collections.synchronizedCollection()`."
  },
  {
    "question": "231.How IdentityHashMap is different from a regular Map in Java?",
    "answer": "IdentityHashMap uses reference equality (==) instead of `equals()` for key comparison."
  },
  {
    "question": "232.What is the main use of IdentityHashMap?",
    "answer": "When you need to ensure that keys are considered equal only if they are the *same* object instance."
  },
  {
    "question": "233.How can we improve the performance of IdentityHashMap?",
    "answer": "By ensuring keys have different identities (different object instances)."
  },
  {
    "question": "234.Is IdentityHashMap thread-safe?",
    "answer": "No."
  },
  {
    "question": "235.What is a WeakHashMap in Java?",
    "answer": "A Map that allows entries to be garbage collected if the key is no longer strongly referenced."
  },
  {
    "question": "236.How can you make a Collection class read Only in Java?",
    "answer": "Using `Collections.unmodifiableList()`, `Collections.unmodifiableSet()`, etc."
  },
  {
    "question": "237.When is UnsupportedOperationException thrown in Java?",
    "answer": "When an operation is not supported by a particular collection implementation (e.g., adding to an unmodifiable list)."
  },
  {
    "question": "238.Let say there is a Customer class. We add objects of Customer class to an ArrayList. How can we sort the Customer objects in ArrayList by using customer firstName attribute of Customer class?",
    "answer": "Implement `Comparable` in Customer or use a `Comparator` with `Collections.sort()`."
  },
  {
    "question": "239.What is the difference between Synchronized Collection and Concurrent Collection?",
    "answer": "Synchronized Collection: Single lock for entire collection, low concurrency. Concurrent Collection: Fine-grained locking, higher concurrency."
  },
  {
    "question": "240.What is the scenario to use ConcurrentHashMap in Java?",
    "answer": "Multi-threaded environments requiring high concurrency."
  },
  {
    "question": "241.How will you create an empty Map in Java?",
    "answer": "Using `new HashMap<>()`, `new TreeMap<>()`, etc."
  },
  {
    "question": "242.What is the difference between remove() method of Collection and remove() method of Iterator?",
    "answer": "Collection.remove(): Removes by value. Iterator.remove(): Removes the last element returned by the iterator."
  },
  {
    "question": "243.Between an Array and ArrayList, which one is the preferred collection for storing objects?",
    "answer": "ArrayList is generally preferred for dynamic size and functionality, unless size is fixed and performance critical."
  },
  {
    "question": "244.Is it possible to replace Hashtable with ConcurrentHashMap in Java?",
    "answer": "Yes, ConcurrentHashMap provides better concurrency and performance."
  },
  {
    "question": "245.How CopyOnWriteArrayList class is different from ArrayList and Vector classes?",
    "answer": "CopyOnWriteArrayList is thread-safe using copy-on-write; ArrayList and Vector require external synchronization or are only single-threaded."
  },
  {
    "question": "246.Why ListIterator has add() method but Iterator does not have?",
    "answer": "ListIterator supports bidirectional traversal and element insertion at the current position, which Iterator doesn't."
  },
  {
    "question": "247.Why do we sometime get ConcurrentModificationException during iteration?",
    "answer": "Collection is modified during iteration without using the Iterator's remove() method (fail-fast behavior)."
  },
  {
    "question": "248.How will you convert a Map to a List in Java?",
    "answer": "Get the key set or value collection and create a List from it."
  },
  {
    "question": "249.How can we create a Map with reverse view and lookup in Java?",
    "answer": "Use a `TreeMap` and `NavigableMap.descendingMap()` for a reverse view, or create a separate reverse lookup map."
  },
  {
    "question": "250.How will you create a shallow copy of a Map?",
    "answer": "Using the copy constructor: `new HashMap<>(originalMap)`."
  },
  {
    "question": "251.Why we cannot create a generic array in Java?",
    "answer": "Type erasure prevents the JVM from knowing the specific type of the generic array at runtime, leading to potential type safety issues."
  },
  {
    "question": "252.What is a PriorityQueue in Java?",
    "answer": "A queue that orders elements based on priority (natural ordering or Comparator)."
  },
  {
    "question": "253.What are the important points to remember while using Java Collections Framework?",
    "answer": "Choose appropriate collection type, understand thread-safety, use generics for type safety, consider performance implications."
  },
  {
    "question": "254.How can we pass a Collection as an argument to a method and ensure that method will not be able to modify it?",
    "answer": "Pass an unmodifiable view of the collection using `Collections.unmodifiableCollection()`."
  },
  {
    "question": "255.Can you explain how HashMap works in Java?",
    "answer": "HashMap uses an array of buckets. Keys are hashed to find the bucket. Collisions are resolved using linked lists or trees. `equals()` is used to compare keys in a bucket."
  },
  {
    "question": "256.Can you explain how HashSet is implemented in Java?",
    "answer": "HashSet is implemented using a HashMap. The elements are stored as keys in the HashMap, with a dummy value associated with each key."
  },
  {
    "question": "257.What is a NavigableMap in Java?",
    "answer": "A sorted Map that provides methods for navigating its entries (e.g., floorKey, ceilingKey)."
  },
  {
    "question": "258.What is the difference between descendingKeySet() and descendingMap() methods of NavigableMap?",
    "answer": "`descendingKeySet()` returns a reverse-ordered `NavigableSet` of keys. `descendingMap()` returns a reverse-ordered `NavigableMap`."
  },
  {
    "question": "259.What is the advantage of NavigableMap over Map?",
    "answer": "Provides methods for navigating the map in sorted order, finding closest matches, etc."
  },
  {
    "question": "260.What is the difference between headMap(), tailMap() and subMap() methods of NavigableMap?",
    "answer": "`headMap()`: Returns a view of the map with keys less than the specified key. `tailMap()`: Returns a view with keys greater than or equal to the specified key. `subMap()`: Returns a view with keys within a specified range."
  },
  {
    "question": "261.How will you sort objects by Natural order in a Java List?",
    "answer": "Implement the `Comparable` interface and use `Collections.sort()`."
  },
  {
    "question": "262.How can we get a Stream from a List in Java?",
    "answer": "Using `List.stream()`."
  },
  {
    "question": "263.Can we get a Map from a Stream in Java?",
    "answer": "Yes, using `Stream.collect(Collectors.toMap())`."
  },
  {
    "question": "264.What are the popular implementations of Deque in Java?",
    "answer": "ArrayDeque, LinkedList."
  },
  {
    "question": "265.What is a Thread in Java?",
    "answer": "A lightweight process that can execute concurrently."
  },
  {
    "question": "266.What is the priority of a Thread and how it is used in scheduling?",
    "answer": "Hint to scheduler; higher priority gets preference (not guaranteed)."
  },
  {
    "question": "267.What is the default priority of a thread in Java?",
    "answer": "NORM_PRIORITY (5)."
  },
  {
    "question": "268.What are the three different priorities that can be set on a Thread in Java?",
    "answer": "MIN_PRIORITY (1), NORM_PRIORITY (5), MAX_PRIORITY (10)."
  },
  {
    "question": "269.What is the purpose of join() method in Thread class?",
    "answer": "Waits for a thread to die (complete its execution)."
  },
  {
    "question": "270.What is the fundamental difference between wait() and sleep() methods?",
    "answer": "`wait()` releases the lock; `sleep()` does not."
  },
  {
    "question": "271.Is it possible to call run() method instead of start() on a thread in Java?",
    "answer": "Yes, but it won't create a new thread; it'll run in the current thread."
  },
  {
    "question": "272.What is a daemon thread in Java?",
    "answer": "A low-priority thread that runs in the background (e.g., garbage collector)."
  },
  {
    "question": "273.How can we make a regular thread Daemon thread in Java?",
    "answer": "Call `thread.setDaemon(true)` before starting the thread."
  },
  {
    "question": "274.How will you make a user thread into daemon thread if it has already started?",
    "answer": "Cannot be done after the thread has started."
  },
  {
    "question": "275.Can we start a thread two times in Java?",
    "answer": "No, it throws IllegalThreadStateException."
  },
  {
    "question": "276.What is a Shutdown hook in Java?",
    "answer": "A thread that is executed when the JVM is shutting down."
  },
  {
    "question": "277.What is synchronization in Java?",
    "answer": "Mechanism to control access to shared resources by multiple threads."
  },
  {
    "question": "278.What is the purpose of Synchronized block in Java?",
    "answer": "To lock a specific block of code for exclusive access by one thread."
  },
  {
    "question": "279.What is static synchronization?",
    "answer": "Synchronizing on the class object itself (locking all instances)."
  },
  {
    "question": "280.What is a Deadlock situation?",
    "answer": "Two or more threads are blocked indefinitely, waiting for each other."
  },
  {
    "question": "281.What is the meaning of concurrency?",
    "answer": "Multiple tasks making progress seemingly at the same time."
  },
  {
    "question": "282.What is the main difference between process and thread?",
    "answer": "Process: Independent program with its own memory space. Thread: Lightweight process within a process, sharing memory."
  },
  {
    "question": "283.What is a process and thread in the context of Java?",
    "answer": "Process: A running JVM. Thread: A unit of execution within the JVM."
  },
  {
    "question": "284.What is a Scheduler?",
    "answer": "Component that determines which thread runs at a given time."
  },
  {
    "question": "285.What is the minimum number of Threads in a Java program?",
    "answer": "At least one (the main thread)."
  },
  {
    "question": "286.What are the properties of a Java thread?",
    "answer": "ID, name, priority, state, daemon status, thread group."
  },
  {
    "question": "287.What are the different states of a Thread in Java?",
    "answer": "NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITING, TERMINATED."
  },
  {
    "question": "288.How will you set the priority of a thread in Java?",
    "answer": "Using `thread.setPriority()`."
  },
  {
    "question": "289.What is the purpose of Thread Groups in Java?",
    "answer": "Group threads for management (deprecated)."
  },
  {
    "question": "290.Why we should not stop a thread by calling its stop() method?",
    "answer": "Unsafe; can leave resources in an inconsistent state."
  },
  {
    "question": "291.How will you create a Thread in Java?",
    "answer": "Implement `Runnable` or extend `Thread` class."
  },
  {
    "question": "292.How can we stop a thread in the middle of execution in Java?",
    "answer": "Using interruption (set interrupted flag)."
  },
  {
    "question": "293.How do you access the current thread in a Java program?",
    "answer": "Using `Thread.currentThread()`."
  },
  {
    "question": "294.What is Busy waiting in Multi-threading?",
    "answer": "Thread repeatedly checks a condition, consuming CPU cycles."
  },
  {
    "question": "295.How can we prevent busy waiting in Java?",
    "answer": "Using `wait()` and `notify()` mechanisms."
  },
  {
    "question": "296.Can we use Thread.sleep() method for real-time processing in Java?",
    "answer": "No, `sleep()` is not precise enough for real-time processing."
  },
  {
    "question": "297.Can we wake up a thread that has been put to sleep by using Thread.sleep() method?",
    "answer": "Yes, by calling `thread.interrupt()`."
  },
  {
    "question": "298.What are the two ways to check if a Thread has been interrupted?",
    "answer": "`Thread.interrupted()` (clears the flag) and `Thread.currentThread().isInterrupted()` (doesn't clear)."
  },
  {
    "question": "299.How can we make sure that Parent thread waits for termination of Child thread?",
    "answer": "Using `childThread.join()`."
  },
  {
    "question": "300.How will you handle InterruptedException in Java?",
    "answer": "Catch it, restore the interrupt status (`Thread.currentThread().interrupt()`) and potentially re-throw or handle."
  },
  {
    "question": "301.Which intrinsic lock is acquired by a synchronized method in Java?",
    "answer": "The lock of the object on which the synchronized method is called (or the class object for static synchronized methods)."
  },
  {
    "question": "302.Can we mark a constructor as synchronized in Java?",
    "answer": "No, constructors cannot be synchronized. Synchronization applies to object access after creation."
  },
  {
    "question": "303.Can we use primitive values for intrinsic locks?",
    "answer": "No, intrinsic locks require object references. Use wrapper classes (Integer, etc.) but be aware of pooling."
  },
  {
    "question": "304.Do we have re-entrant property in intrinsic locks?",
    "answer": "Yes, a thread that already holds a lock can re-enter a synchronized block or method protected by the same lock."
  },
  {
    "question": "305.What is an atomic operation?",
    "answer": "An operation that completes indivisibly; it cannot be interrupted or broken down into smaller steps."
  },
  {
    "question": "306.Can we consider the statement i++ as an atomic operation in Java?",
    "answer": "No, it involves read, increment, and write, which are not atomic. Use AtomicInteger for thread-safe incrementing."
  },
  {
    "question": "307.What are the Atomic operations in Java?",
    "answer": "Reads and writes of primitive variables (except `long` and `double` unless declared `volatile`), and operations provided by `java.util.concurrent.atomic` classes."
  },
  {
    "question": "308.Can you check if following code is thread-safe?",
    "answer": "Requires the code snippet to determine thread safety. Consider shared mutable state, synchronization, and potential race conditions."
  },
  {
    "question": "309.What are the minimum requirements for a Deadlock situation in a program?",
    "answer": "Mutual exclusion, hold and wait, no preemption, circular wait."
  },
  {
    "question": "310.How can we prevent a Deadlock?",
    "answer": "Avoid circular wait (establish resource ordering), eliminate hold and wait (request all resources at once), allow preemption, or avoid mutual exclusion where possible."
  },
  {
    "question": "311.How can we detect a Deadlock situation?",
    "answer": "Thread dump analysis, monitoring tools, or deadlock detection mechanisms provided by the JVM."
  },
  {
    "question": "312.What is a Livelock?",
    "answer": "Threads repeatedly change state in response to each other, preventing progress but not blocking (like a polite deadlock)."
  },
  {
    "question": "313.What is Thread starvation?",
    "answer": "A thread is perpetually denied access to a resource and cannot make progress."
  },
  {
    "question": "314.How can a synchronized block cause Thread starvation in Java?",
    "answer": "If the scheduler consistently favors certain threads, other threads might be repeatedly blocked from entering the synchronized block."
  },
  {
    "question": "315.What is a Race condition?",
    "answer": "Outcome depends on the unpredictable order of execution of multiple threads accessing shared resources."
  },
  {
    "question": "316.What is a Fair lock in multi-threading?",
    "answer": "A lock that grants access to the longest-waiting thread first, preventing starvation (e.g., `ReentrantLock(true)`)."
  },
  {
    "question": "317.Which two methods of Object class can be used to implement a Producer Consumer scenario?",
    "answer": "`wait()` and `notify()` (or `notifyAll()`)."
  },
  {
    "question": "318.How JVM determines which thread should wake up on notify()?",
    "answer": "Arbitrarily chooses one waiting thread (unless using a fair lock or other explicit mechanism)."
  },
  {
    "question": "319.Check if following code is thread-safe for retrieving an integer value from a Queue?",
    "answer": "Requires the code snippet to determine thread safety. Consider concurrent access, synchronization, and potential race conditions."
  },
  {
    "question": "320.How can we check if a thread has a monitor lock on a given object?",
    "answer": "There isn't a direct public API to check this. Thread dump analysis can help diagnose lock contention."
  },
  {
    "question": "321.What is the use of yield() method in Thread class?",
    "answer": "Suggests that the current thread cede its execution time to other threads (hint to the scheduler)."
  },
  {
    "question": "322.What is an important point to consider while passing an object from one thread to another thread?",
    "answer": "Ensure thread safety: The object must be immutable or properly synchronized to prevent race conditions."
  },
  {
    "question": "323.What are the rules for creating Immutable Objects?",
    "answer": "Final class, private final fields, no setters, deep copy in constructor, defensive copying in getters if mutable fields are unavoidable."
  },
  {
    "question": "324.What is the use of ThreadLocal class?",
    "answer": "Creates thread-local variables; each thread has its own independent copy."
  },
  {
    "question": "325.What are the scenarios suitable for using ThreadLocal class?",
    "answer": "Storing per-thread context information (e.g., transaction ID, user ID)."
  },
  {
    "question": "326.How will you improve the performance of an application by multi-threading?",
    "answer": "Identify parallelizable tasks, minimize lock contention, use appropriate thread pool sizes, avoid I/O bottlenecks."
  },
  {
    "question": "327.What is scalability in a Software program?",
    "answer": "The ability of a system to handle increasing workload by adding resources."
  },
  {
    "question": "328.How will you calculate the maximum speed up of an application by using multiple processors?",
    "answer": "Amdahl's Law: Speedup <= 1 / (S + (1-S)/N), where S is the serial portion and N is the number of processors."
  },
  {
    "question": "329.What is Lock contention in multi-threading?",
    "answer": "Multiple threads trying to acquire the same lock, causing delays and reduced performance."
  },
  {
    "question": "330.What are the techniques to reduce Lock contention?",
    "answer": "Reduce lock scope, use fine-grained locks, lock splitting, lock striping, use concurrent data structures, avoid holding locks for long operations."
  },
  {
    "question": "331.What technique can be used in following code to reduce Lock contention?",
    "answer": "Requires the code snippet. Potential techniques: lock splitting, lock striping, or using concurrent collections."
  },
  {
    "question": "332.What is Lock splitting technique?",
    "answer": "Replacing a single lock with multiple locks, each protecting a different part of the shared resource."
  },
  {
    "question": "333.Which technique is used in ReadWriteLock class for reducing Lock contention?",
    "answer": "Separating read and write operations, allowing multiple readers or a single writer."
  },
  {
    "question": "334.What is Lock striping?",
    "answer": "Using an array of locks, each protecting a different part of the shared data (similar to segments in ConcurrentHashMap)."
  },
  {
    "question": "335.What is a CAS operation?",
    "answer": "Compare-and-swap: Atomically compares a memory location to a given value and, if they are the same, replaces the contents of that memory location with a new given value."
  },
  {
    "question": "336.Which Java classes use CAS operation?",
    "answer": "`java.util.concurrent.atomic` classes (AtomicInteger, AtomicLong, etc.)."
  },
  {
    "question": "337.Is it always possible to improve performance by object pooling in a multi-threading application?",
    "answer": "No. Object creation might be fast enough, and managing the pool can introduce overhead and contention."
  },
  {
    "question": "338.How can techniques used for performance improvement in a single thread application may degrade the performance in a multi-threading application?",
    "answer": "Caching might introduce inconsistency issues, and aggressive optimization might increase lock contention."
  },
  {
    "question": "339.What is the relation between Executor and ExecutorService interface?",
    "answer": "ExecutorService extends Executor, adding methods for managing the lifecycle of the executor and submitting Callable tasks."
  },
  {
    "question": "340.What will happen on calling submit() method of an ExecutorService instance whose queue is already full?",
    "answer": "It depends on the RejectedExecutionHandler. It might throw a RejectedExecutionException, block, or discard the task."
  },
  {
    "question": "341.What is a ScheduledExecutorService?",
    "answer": "An ExecutorService that can schedule tasks to run after a delay or periodically."
  },
  {
    "question": "342.How will you create a Thread pool in Java?",
    "answer": "Using `Executors.newFixedThreadPool()`, `Executors.newCachedThreadPool()`, etc., or by creating a `ThreadPoolExecutor` directly."
  },
  {
    "question": "343.What is the main difference between Runnable and Callable interface?",
    "answer": "Runnable: `run()` method, doesn't return a value, can't throw checked exceptions. Callable: `call()` method, returns a value, can throw checked exceptions."
  },
  {
    "question": "344.What are the uses of Future interface in Java?",
    "answer": "Represents the result of an asynchronous computation; allows checking if the computation is complete, getting the result, and canceling the task."
  },
  {
    "question": "345.What is the difference in concurrency in HashMap and in Hashtable?",
    "answer": "HashMap is not thread-safe; Hashtable is thread-safe (synchronized at the method level, leading to lower concurrency)."
  },
  {
    "question": "346.How will you create synchronized instance of List or Map Collection?",
    "answer": "Using `Collections.synchronizedList()` and `Collections.synchronizedMap()`."
  },
  {
    "question": "347.What is a Semaphore in Java?",
    "answer": "Controls access to a shared resource by maintaining a count of permits."
  },
  {
    "question": "348.What is a CountDownLatch in Java?",
    "answer": "A synchronization aid that allows one or more threads to wait until a count reaches zero."
  },
  {
    "question": "349.What is the difference between CountDownLatch and CyclicBarrier?",
    "answer": "CountDownLatch: One-time event. CyclicBarrier: Can be reused after the count reaches zero."
  },
  {
    "question": "350.What are the scenarios suitable for using Fork/Join framework?",
    "answer": "Problems that can be divided into smaller subproblems and solved recursively (e.g., parallel sorting, image processing)."
  },
  {
    "question": "351.What is the difference between RecursiveTask and RecursiveAction class?",
    "answer": "RecursiveTask: Returns a result. RecursiveAction: Doesn't return a result (void)."
  },
  {
    "question": "352.In Java 8, can we process stream operations with a Thread pool?",
    "answer": "Yes, using `parallelStream()` or specifying an ExecutorService for custom thread pool management."
  },
  {
    "question": "353.What are the scenarios to use parallel stream in Java 8?",
    "answer": "CPU-bound operations on large datasets where order is not critical and the cost of parallelization is less than the gain from parallelism."
  },
  {
    "question": "354.How Stack and Heap work in Java multi-threading environment?",
    "answer": "Each thread has its own stack. The heap is shared between all threads."
  },
  {
    "question": "355.How can we take Thread dump in Java?",
    "answer": "Using jstack command, JConsole, or programmatically via ThreadMXBean."
  },
  {
    "question": "356.Which parameter can be used to control stack size of a thread in Java?",
    "answer": "-Xss VM option."
  },
  {
    "question": "357.There are two threads T1 and T2? How will you ensure that these threads run in sequence T1, T2 in Java?",
    "answer": "Use `join()` method. T2 calls `T1.join()` to wait for T1 to complete before starting."
  },
  {
    "question": "358.What are the new features released in Java 8?",
    "answer": "Lambda expressions, streams, default methods in interfaces, new Date/Time API, etc."
  },
  {
    "question": "359.What are the main benefits of new features introduced in Java 8?",
    "answer": "Improved code readability, conciseness, and support for functional programming and parallel processing."
  },
  {
    "question": "360.What is a Lambda expression in Java 8?",
    "answer": "An anonymous function (a block of code that can be passed around and executed)."
  },
  {
    "question": "361.What are the three main parts of a Lambda expression in Java?",
    "answer": "Parameter list, arrow token (`->`), and body."
  },
  {
    "question": "362.What is the data type of a Lambda expression?",
    "answer": "It's a functional interface (an interface with a single abstract method)."
  },
  {
    "question": "363.What is the meaning of following lambda expression?",
    "answer": "Requires the lambda expression to explain its meaning."
  },
  {
    "question": "364.Why did Oracle release a new version of Java like Java 8?",
    "answer": "To modernize the language, improve developer productivity, and enable better support for multicore processors."
  },
  {
    "question": "365.What are the advantages of a lambda expression?",
    "answer": "Concise code, functional programming style, improved readability, and easier parallelization."
  },
  {
    "question": "366.What is a Functional interface in Java 8?",
    "answer": "An interface with a single abstract method."
  },
  {
    "question": "367.What is a Single Abstract Method (SAM) interface in Java 8?",
    "answer": "Synonymous with Functional Interface: An interface with one abstract method."
  },
  {
    "question": "368.How can we define a Functional interface in Java 8?",
    "answer": "By ensuring it has only one abstract method (optionally using `@FunctionalInterface` annotation)."
  },
  {
    "question": "369.Why do we need Functional interface in Java?",
    "answer": "To use lambda expressions (lambdas implement functional interfaces)."
  },
  {
    "question": "370.Is it mandatory to use @FunctionalInterface annotation to define a Functional interface in Java 8?",
    "answer": "No, but it's good practice; the compiler will verify that it has only one abstract method."
  },
  {
    "question": "371.What are the differences between Collection and Stream API in Java 8?",
    "answer": "Collection: Stores data. Stream: Processes data. Streams are lazy and don't modify the source."
  },
  {
    "question": "372.What are the main uses of Stream API in Java 8?",
    "answer": "Filtering, mapping, reducing, and collecting data from collections."
  },
  {
    "question": "373.What are the differences between Intermediate and Terminal Operations in Java 8 Streams?",
    "answer": "Intermediate: Transform the stream, return a new stream. Terminal: Produce a result or side effect, end the stream."
  },
  {
    "question": "374.What is a Spliterator in Java 8?",
    "answer": "An interface for traversing and partitioning a sequence of elements, enabling parallel processing."
  },
  {
    "question": "375.What are the differences between Iterator and Spliterator in Java 8?",
    "answer": "Iterator: Sequential traversal. Spliterator: Supports parallel traversal and splitting."
  },
  {
    "question": "376.What is Type Inference in Java 8?",
    "answer": "The compiler automatically deduces the type of a variable or expression."
  },
  {
    "question": "377.Does Java 7 support Type Inference?",
    "answer": "Yes, but limited (e.g., diamond operator for generic types)."
  },
  {
    "question": "378.How does Internal Iteration work in Java 8?",
    "answer": "The client provides the operation to perform, and the library controls the iteration (e.g., streams)."
  },
  {
    "question": "379.What are the main differences between Internal and External Iterator?",
    "answer": "Internal: Library controls iteration. External: Client controls iteration."
  },
  {
    "question": "380.What are the main advantages of Internal Iterator over External Iterator in Java 8?",
    "answer": "Easier parallelization, more efficient due to library optimizations."
  },
  {
    "question": "381.What are the applications in which we should use Internal Iteration?",
    "answer": "Data processing, filtering, mapping, and reducing operations."
  },
  {
    "question": "382.What is the main disadvantage of Internal Iteration over External Iteration?",
    "answer": "Less control over the iteration process."
  },
  {
    "question": "383.Can we provide implementation of a method in a Java Interface?",
    "answer": "Yes, using default methods (since Java 8)."
  },
  {
    "question": "384.What is a Default Method in an Interface?",
    "answer": "A method with a default implementation in an interface."
  },
  {
    "question": "385.Why do we need Default method in a Java 8 Interface?",
    "answer": "To add new methods to interfaces without breaking existing implementations."
  },
  {
    "question": "386.What is the purpose of a Static method in an Interface in Java 8?",
    "answer": "Utility methods related to the interface (not inherited)."
  },
  {
    "question": "387.What are the core ideas behind the Date/Time API of Java 8?",
    "answer": "Immutability, thread safety, and a clear separation of concerns."
  },
  {
    "question": "388.What are the advantages of new Date and Time API in Java 8 over old Date API?",
    "answer": "Immutability, thread safety, better design, and more comprehensive functionality."
  },
  {
    "question": "389.What are the main differences between legacy Date/Time API in Java and Date/Time API of Java 8?",
    "answer": "Legacy API: Mutable, not thread-safe, poor design. Java 8 API: Immutable, thread-safe, better design."
  },
  {
    "question": "390.How can we get duration between two dates or time in Java 8?",
    "answer": "Using `Duration.between()` or `Period.between()`."
  },
  {
    "question": "391.What is the new method family introduced in Java 8 for processing of Arrays on multi core machines?",
    "answer": "Parallel prefix (scan) operations via `Arrays.parallelPrefix()`"
  },
  {
    "question": "392.How does Java 8 solve Diamond problem of Multiple Inheritance?",
    "answer": "Classes can implement multiple interfaces with default methods. If there's a conflict, the class must override the method."
  },
  {
    "question": "393.What are the differences between Predicate, Supplier and Consumer in Java 8?",
    "answer": "Predicate: Takes an argument, returns a boolean. Supplier: Takes no arguments, returns a value. Consumer: Takes an argument, returns nothing (void)."
  },
  {
    "question": "394.Is it possible to have default method definition in an interface without marking it with default keyword?",
    "answer": "No, `default` keyword is required."
  },
  {
    "question": "395.Can we create a class that implements two Interfaces with default methods of same name and signature?",
    "answer": "Yes, but the class must override the conflicting default method to resolve the ambiguity."
  },
  {
    "question": "396.How Java 8 supports Multiple Inheritance?",
    "answer": "Through interfaces with default methods, but with conflict resolution rules."
  },
  {
    "question": "397.In case we create a class that extends a base class and implements an interface. If both base class and interface have a default method with same name and arguments, then which definition will be picked by JVM?",
    "answer": "The class's version (the base class method) takes precedence over the interface's default method."
  },
  {
    "question": "398.If we create same method and define it in a class , in its parent class and in an interface implemented by the class, then definition will be invoked if we access it using the reference of Interface and the object of class?",
    "answer": "Using the interface reference, the interface's default method is *not* invoked. The class's or parent class's definition takes precedence."
  },
  {
    "question": "399.Can we access a static method of an interface by using reference of the interface?",
    "answer": "No, static methods in interfaces must be accessed through the interface name itself (e.g., `InterfaceName.staticMethod()`)."
  },
  {
    "question": "400.How can you get the name of Parameter in Java by using reflection?",
    "answer": "With Java 8 and the `-parameters` compiler flag, use `Parameter.getName()`."
  },
  {
    "question": "401.What is Optional in Java 8?",
    "answer": "A container object that may or may not contain a non-null value, addressing null pointer exceptions."
  },
  {
    "question": "402.What are the uses of Optional?",
    "answer": "Handling null values gracefully, avoiding NullPointerExceptions, improving code readability."
  },
  {
    "question": "403.Which method in Optional provides the fallback mechanism in case of null value?",
    "answer": "`orElse()` or `orElseGet()`."
  },
  {
    "question": "404.How can we get current time by using Date/Time API of Java 8?",
    "answer": "Using `LocalTime.now()`."
  },
  {
    "question": "405.Is it possible to define a static method in an Interface?",
    "answer": "Yes (since Java 8)."
  },
  {
    "question": "406.How can we analyze the dependencies in Java classes and packages?",
    "answer": "Using tools like JDepend, or the jdeps command-line tool."
  },
  {
    "question": "407.What are the new JVM arguments introduced by Java 8?",
    "answer": "Examples: `-XX:+UseG1GC` (G1 garbage collector), `-XX:MetaspaceSize`, `-XX:MaxMetaspaceSize`."
  },
  {
    "question": "408.What are the popular annotations introduced in Java 8?",
    "answer": "`@FunctionalInterface`, `@Repeatable`, `@TypeAnnotations`."
  },
  {
    "question": "409.What is a StringJoiner in Java 8?",
    "answer": "A utility class to construct a sequence of characters separated by a delimiter."
  },
  {
    "question": "410.What is the type of a Lambda expression in Java 8?",
    "answer": "A functional interface."
  },
  {
    "question": "411. What is the target type of a lambda expression ?",
    "answer": "The functional interface it implements."
  },
  {
    "question": "412.What are the main differences between an interface with default method and an abstract class in Java 8?",
    "answer": "A class can implement multiple interfaces, but only extend one abstract class. Interfaces cannot have state (instance variables)."
  },
  {
    "question": "413.Is there any difference between a = a + b and a += b expressions?",
    "answer": "a += b implicitly casts the result to the type of a, whereas a = a + b requires explicit casting if the types are different and can be wider after addition"
  },
  {
    "question": "414.What does the expression 1.0 / 0.0 return? Will there be any compilation error?",
    "answer": "Returns `Infinity`. No compilation error."
  },
  {
    "question": "415.Can we use multiple main methods in multiple classes?",
    "answer": "Yes, each class can have its own main method."
  },
  {
    "question": "416.Does Java allow you to override a private or static method?",
    "answer": "No, private methods are not visible and cannot be overridden. Static methods can be hidden, but not overridden."
  },
  {
    "question": "417.What happens when you put a key object in a HashMap that is already present?",
    "answer": "The old value is replaced with the new value, and the new value is returned."
  },
  {
    "question": "418.How can you make sure that N threads can access N resources without deadlock?",
    "answer": "Establish a resource ordering and ensure all threads acquire resources in that order."
  },
  {
    "question": "419.How can you determine if JVM is 32-bit or 64-bit from Java Program?",
    "answer": "Check the `sun.arch.data.model` system property."
  },
  {
    "question": "420.What is the right data type to represent Money (like Dollar/Pound) in Java?",
    "answer": "`BigDecimal` (for precision) or `int`/`long` representing cents/pence (with careful handling)."
  },
  {
    "question": "421.How can you do multiple inheritances in Java?",
    "answer": "Using interfaces (implementing multiple interfaces)."
  },
  {
    "question": "422.Is ++ operation thread-safe in Java?",
    "answer": "No, it's not atomic. Use AtomicInteger for thread-safe incrementing."
  },
  {
    "question": "423.How can you access a non-static variable from the static context?",
    "answer": "By creating an instance of the class."
  },
  {
    "question": "424.Let say there is a method that throws NullPointerException in the superclass. Can we override it with a method that throws RuntimeException?",
    "answer": "Yes, you can throw a broader unchecked exception."
  },
  {
    "question": "425.How can you mark an array volatile in Java?",
    "answer": "You can't directly mark an array `volatile`. However, you can make the *reference* to the array `volatile`, which guarantees visibility of array *reference* but not the individual elements."
  },
  {
    "question": "426.What is a thread local variable in Java?",
    "answer": "A variable where each thread has its own independent copy."
  },
  {
    "question": "427.What is the difference between sleep() and wait() methods in Java?",
    "answer": "`sleep()`: Pauses execution without releasing the lock. `wait()`: Releases the lock and waits until notified."
  },
  {
    "question": "428.Can you create an Immutable object that contains a mutable object?",
    "answer": "Yes, but you must perform defensive copying to prevent external modification of the mutable object."
  },
  {
    "question": "429.How can you convert an Array of bytes to String?",
    "answer": "Using `new String(byte[], Charset)`."
  },
  {
    "question": "430.What is difference between CyclicBarrier and CountDownLatch class?",
    "answer": "CountDownLatch: One-time event. CyclicBarrier: Reusable after count reaches zero."
  },
  {
    "question": "431.What is the difference between StringBuffer and StringBuilder?",
    "answer": "StringBuffer is synchronized (thread-safe), StringBuilder is not."
  },
  {
    "question": "432.Which class contains clone method? Cloneable or Object class?",
    "answer": "Object class. Cloneable is a marker interface."
  },
  {
    "question": "433.How will you take thread dump in Java?",
    "answer": "Using jstack command, JConsole, or ThreadMXBean."
  },
  {
    "question": "434.Can you cast an int variable into a byte variable? What happens if the value of int is larger than byte?",
    "answer": "Yes. The value is truncated (only the least significant 8 bits are retained)."
  },
  {
    "question": "435.In Java, can we store a double value in a long variable without explicit casting?",
    "answer": "No, explicit casting is required (and you'll lose the fractional part)."
  },
  {
    "question": "436.What will this return 5*0.1 == 0.5? true or false?",
    "answer": "Likely false due to floating-point imprecision."
  },
  {
    "question": "437.Out of an int and Integer, which one takes more memory?",
    "answer": "Integer (wrapper object) takes more memory due to object overhead."
  },
  {
    "question": "438.Can we use String in the switch case statement in Java?",
    "answer": "Yes (since Java 7)."
  },
  {
    "question": "439.Can we use multiple main methods in same class?",
    "answer": "Yes, they can be overloaded, but only `public static void main(String[] args)` is the entry point."
  },
  {
    "question": "440.When creating an abstract class, is it a good idea to call abstract methods inside its constructor?",
    "answer": "Generally not a good idea. The subclass might not be fully initialized when the abstract method is called."
  },
  {
    "question": "441.How can you do constructor chaining in Java?",
    "answer": "Using `this()` to call another constructor in the same class."
  },
  {
    "question": "442.How can we find the memory usage of JVM from Java code?",
    "answer": "Using `Runtime.getRuntime().totalMemory()`, `freeMemory()`, and `maxMemory()`."
  },
  {
    "question": "443.What is the difference between x == y and x.equals(y) expressions in Java?",
    "answer": "`==`: Compares object references (or primitive values). `equals()`: Compares object content (as defined by the class)."
  },
  {
    "question": "444. How can you guarantee that the garbage collection takes place?",
    "answer": "You cannot guarantee garbage collection; it's controlled by the JVM. You can *request* it with `System.gc()`, but it's not guaranteed."
  },
  {
    "question": "445.What is the relation between x.hashCode() method and x.equals(y) method of Object class?",
    "answer": "If x.equals(y) is true, then x.hashCode() must be equal to y.hashCode()."
  },
  {
    "question": "446.What is a compile time constant in Java?",
    "answer": "A variable whose value is known at compile time (e.g., `final int x = 10`)."
  },
  {
    "question": "447.Explain the difference between fail-fast and fail-safe iterators?",
    "answer": "Fail-fast: Throws ConcurrentModificationException. Fail-safe: Operates on a copy."
  },
  {
    "question": "448. You have a character array and a String. Which one is more secure to store sensitive data (like password, date of birth, etc.)?",
    "answer": "Character array. String is immutable and can linger in memory. Character array can be overwritten after use."
  },
  {
    "question": "449.Why do you use volatile keyword in Java?",
    "answer": "To ensure visibility of variable changes across threads (prevents caching issues)."
  },
  {
    "question": "450.What is the difference between poll() and remove() methods of Queue in Java?",
    "answer": "`poll()`: Returns null if empty. `remove()`: Throws exception if empty."
  },
  {
    "question": "451.Can you catch an exception thrown by another thread in Java?",
    "answer": "Generally no. Exceptions are handled within the thread they occur."
  },
  {
    "question": "452.How do you decide which type of Inner Class – Static or Non-Static to use in Java?",
    "answer": "If the inner class needs access to the enclosing class's instance members, use non-static (inner). Otherwise, use static."
  },
  {
    "question": "453.What are the different types of Classloaders in Java?",
    "answer": "Bootstrap, Extension, Application (System)."
  },
  {
    "question": "454.What are the situations in which you choose HashSet or TreeSet?",
    "answer": "HashSet: Fast, unordered. TreeSet: Sorted."
  },
  {
    "question": "455.What is the use of method references in Java?",
    "answer": "A shorthand for lambda expressions that call an existing method."
  },
  {
    "question": "456.Do you think Java Enums are more powerful than integer constants?",
    "answer": "Yes. Enums provide type safety, can have methods and fields, and are more readable."
  },
  {
    "question": "457.Why do we use static initializers in Java?",
    "answer": "To initialize static variables with complex logic."
  },
  {
    "question": "458.Your client is complaining that your code is throwing NoClassDefFoundError or NoSuchMethodError, even though you are able to compile your code without error and method exists in your code. What could be the reason behind this?",
    "answer": "Class is missing at runtime (classpath issue) or incompatible library versions."
  },
  {
    "question": "459.How can you check if a String is a number by using regular expression?",
    "answer": "Using `String.matches(\"-?\\d+(\\.\\d+)?\")` (for integers and decimals)."
  },
  {
    "question": "460.What is the difference between the expressions String s = \"Temporary\" and String s = new String(\"Temporary \")? Which one is better and more efficient?",
    "answer": "`String s = \"Temporary\"` uses String interning (more efficient). `String s = new String(\"Temporary \")` creates a new object, even if the same literal exists."
  },
  {
    "question": "461.In Java, can two equal objects have the different hash code?",
    "answer": "No. If `x.equals(y)` is true, then `x.hashCode()` *must* be equal to `y.hashCode()`."
  },
  {
    "question": "462.How can we print an Array in Java?",
    "answer": "Using `Arrays.toString()` or `Arrays.deepToString()` (for multi-dimensional arrays)."
  },
  {
    "question": "463.Is it ok to use random numbers in the implementation of hashcode() method in Java?",
    "answer": "No. Hash code must be consistent for equal objects."
  },
  {
    "question": "464.Between two types of dependency injections, constructor injection and setter dependency injection, which one is better?",
    "answer": "Constructor injection promotes immutability and required dependencies."
  },
  {
    "question": "465.What is the difference between DOM and SAX parser in Java?",
    "answer": "DOM: Loads entire XML into memory. SAX: Event-based, processes XML sequentially (less memory)."
  },
  {
    "question": "466.Between Enumeration and Iterator, which one has better performance in Java?",
    "answer": "Iterator (more modern and flexible; performance differences are usually negligible)."
  },
  {
    "question": "467.What is the difference between pass by reference and pass by value?",
    "answer": "Pass by value: Copies the value. Pass by reference: Passes a reference to the original data."
  },
  {
    "question": "468.What are the different ways to sort a collection in Java?",
    "answer": "`Collections.sort()`, `Stream.sorted()`, implementing `Comparable` or using a `Comparator`."
  },
  {
    "question": "469.Why Collection interface doesn’t extend Cloneable and Serializable interfaces?",
    "answer": "Cloneable and Serializable are specific to object implementation. All collections don't need to support these operations."
  },
  {
    "question": "470.What is the difference between a process and a thread in Java?",
    "answer": "Process: Independent program. Thread: Unit of execution within a process."
  },
  {
    "question": "471.What are the benefits of using an unordered array over an ordered array?",
    "answer": "Faster insertion (no need to maintain order) if order is not required"
  },
  {
   "question": "472.Between HashSet and TreeSet collections in Java, which one is better?",
    "answer": "Depends on requirements. HashSet is faster for add/remove/contains operations; TreeSet keeps elements sorted."
  },
  {
   "question": "473.When does JVM call the finalize() method?",
    "answer": "Just before garbage collecting an object (unpredictable and discouraged)."
  },
  {
   "question": "474.When would you use Serial Garabage collector or Throughput Garbage collector in Java?",
    "answer": "Serial GC: Single-threaded, good for small heaps or single-processor machines. Throughput GC: Multithreaded, aims for high throughput (less pause time sensitivity)."
  },
  {
   "question": "475.In Java, if you set an object reference to null, will the Garbage Collector immediately free the memory held by that object?",
    "answer": "No, it just makes the object eligible for garbage collection when it's determined to be unreachable."
  },
  {
   "question": "476.How can you make an Object eligible for Garbage collection in Java?",
    "answer": "Remove all reachable references to the object (set them to null, etc.)."
  },
  {
   "question": "477.When do you use Exception or Error in Java? What is the difference between these two?",
    "answer": "Exception: Recoverable conditions. Error: Unrecoverable conditions (e.g., OutOfMemoryError)."
  },
  {
   "question": "478.What is the advantage of PreparedStatement over Statement class in Java?",
    "answer": "PreparedStatement: Prepared statement, prevents SQL injection, can be more efficient for repeated queries."
  },
  {
   "question": "479.In Java, what is the difference between throw and throws keywords?",
    "answer": "throw: used to throw an exception. throws: used in method signature to declare exception."
  },
  {
   "question": "480.What happens to the Exception object after the exception handling is done?",
    "answer": "The Exception object becomes eligible for garbage collection."
  },
  {
   "question": "481.How do you find which client machine is sending request to your servlet in Java?",
    "answer": "Using `request.getRemoteAddr()`."
  },
  {
   "question": "482.What is the difference between a Cookie and a Session object in Java?",
    "answer": "Cookie: Stored on client-side. Session: Stored on server-side."
  },
  {
   "question": "483.Which protocol does Browser and Servlet use to communicate with each other?",
    "answer": "HTTP (Hypertext Transfer Protocol)."
  },
  {
   "question": "484. What is HTTP Tunneling?",
    "answer": "Using HTTP to encapsulate other protocols that might be blocked by firewalls."
  },
  {
   "question": "485.Why do we use JSP instead of Servlet in Java?",
    "answer": "JSP simplifies view creation (HTML with Java code), easier to maintain."
  },
  {
   "question": "486.Is empty ‘.java’ file name a valid source file name in Java?",
    "answer": "Yes, it is a valid but useless file."
  },
  {
   "question": "487.How do you implement Servlet Chaining in Java?",
    "answer": "Using `RequestDispatcher.forward()` or `include()` to pass requests between servlets."
  },
  {
   "question": "488.Can you instantiate this class?",
    "answer": "Requires seeing the class definition to answer."
  },
  {
   "question": "489.Why Java does not support operator overloading?",
    "answer": "Simplicity and avoiding ambiguity and complexity."
  },
  {
   "question": "490.Why String class is Immutable or Final in Java?",
    "answer": "Security, caching, thread safety."
  },
  {
   "question": "491.What is the difference between sendRedirect and forward methods?",
    "answer": "sendRedirect: client-side redirect, new request. forward: server-side, same request."
  },
  {
   "question": "492.How do you fix your Serializable class, if it contains a member that is not serializable?",
    "answer": "Mark the member as `transient` or implement `Externalizable`."
  },
  {
   "question": "493.What is the use of run time polymorphism in Java?",
    "answer": "Allows treating objects of different classes uniformly, promoting flexibility and extensibility."
  },
  {
   "question": "494.What are the rules of method overloading and method overriding in Java?",
    "answer": "Overloading: Same name, different parameters. Overriding: Same signature, subclass."
  },
  {
   "question": "495.What is the difference between a class and an object in Java?",
    "answer": "Class: Blueprint. Object: Instance of a class."
  },
  {
   "question": "496.Can we create an abstract class that extends another abstract class?",
    "answer": "Yes."
  },
  {
   "question": "497.Why do you use Upcasting or Downcasting in Java ?",
    "answer": "Upcasting: Generalizing the type. Downcasting: Specializing the type."
  },
  {
   "question": "498.What is the reason to organize classes and interfaces in a package in Java?",
    "answer": "Namespace management and code organization."
  },
  {
   "question": "499.What is information hiding in Java?",
    "answer": "Restricting access to internal implementation details (using access modifiers)."
  },
  {
   "question": "500.Why does Java provide default constructor?",
    "answer": "If no constructors are defined, the compiler creates a no-arg default constructor for object creation."
  },
  {
    "question": "501.What is the difference between super and this keywords in Java?",
    "answer": "`this`: Refers to the current object. `super`: Refers to the superclass."
  },
  {
    "question": "502.What is the advantage of using Unicode characters in Java?",
    "answer": "Supports a wide range of characters from different languages."
  },
  {
    "question": "503.Can you override an overloaded method in Java?",
    "answer": "Yes."
  },
  {
    "question": "504.How can we change the heap size of a JVM?",
    "answer": "Using `-Xms` (initial heap size) and `-Xmx` (maximum heap size) JVM options."
  },
  {
    "question": "505.Why should you define a default constructor in Java?",
    "answer": "To allow object creation without arguments, particularly if other constructors are defined."
  },
  {
    "question": "506.How will you make an Object Immutable in Java?",
    "answer": "Final class, private final fields, no setters, deep copy in constructor, defensive copying in getters."
  },
  {
    "question": "507.How can you prevent SQL Injection in Java Code?",
    "answer": "Using PreparedStatement with parameterized queries."
  },
  {
    "question": "508.Which two methods should be always implemented by HashMap key Object?",
    "answer": "`equals()` and `hashCode()`."
  },
  {
    "question": "509.Why an Object used as Key in HashMap should be Immutable?",
    "answer": "To ensure consistent hash code, preventing data corruption in the HashMap."
  },
  {
    "question": "510.How can we share an object between multiple threads?",
    "answer": "Using thread-safe data structures or proper synchronization mechanisms."
  },
  {
    "question": "511. How can you determine if your program has a deadlock?",
    "answer": "Thread dump analysis (look for blocked threads waiting for each other)."
  },
  {
    "question": "512.What are the implicit objects in JSP?",
    "answer": "request, response, session, application, out, page, pageContext, config, exception."
  },
  {
    "question": "513.How will you extend JSP code?",
    "answer": "Using custom tags, tag libraries, or including Java code snippets."
  },
  {
    "question": "514.How will you handle runtime exceptions in JSP?",
    "answer": "Using `<%@ page errorPage=\"error.jsp\" %>` directive and defining an error page."
  },
  {
    "question": "515.How will you prevent multiple submits of a page that come by clicking refresh button multiple times?",
    "answer": "Using the Post-Redirect-Get (PRG) pattern (redirect after processing the form)."
  },
  {
    "question": "516.How will you implement a thread safe JSP page?",
    "answer": "Minimize use of instance variables, use synchronized blocks/methods when needed."
  },
  {
    "question": "517.How will you include a static file in a JSP page?",
    "answer": "Using `<%@ include file=\"header.html\" %>` directive."
  },
  {
    "question": "518.What are the lifecycle methods of a JSP?",
    "answer": "`jspInit()`, `_jspService()`, `jspDestroy()`."
  },
  {
    "question": "519.What are the advantages of using JSP in web architecture?",
    "answer": "Separation of concerns (presentation from logic), easy development, and reusable components."
  },
  {
    "question": "520.What is the advantage of JSP over Javascript?",
    "answer": "JSP executes on the server-side (secure, database access), Javascript on client-side (UI interactions)."
  },
  {
    "question": "521.What is the Lifecycle of JSP?",
    "answer": "Translation, compilation, class loading, instantiation, request processing, destruction."
  },
  {
    "question": "522.What is a JSP expression?",
    "answer": "A scriptlet that evaluates to a value (e.g., `<%= variable %>`)."
  },
  {
    "question": "523.What are the different types of directive tags in JSP?",
    "answer": "page, include, taglib."
  },
  {
    "question": "524.What is session attribute in JSP?",
    "answer": "Data stored in the session object, accessible across multiple requests from the same user."
  },
  {
    "question": "525.What are the different scopes of a JSP object?",
    "answer": "page, request, session, application."
  },
  {
    "question": "526.What is pageContext in JSP?",
    "answer": "Provides access to all scopes and other page attributes."
  },
  {
    "question": "527.What is the use of jsp:useBean in JSP?",
    "answer": "Declares and creates (or reuses) a JavaBean instance."
  },
  {
    "question": "528.What is difference between include Directive and include Action of JSP?",
    "answer": "Directive: Static include (at translation time). Action: Dynamic include (at runtime)."
  },
  {
    "question": "529.How will you use other Java files of your application in JSP code?",
    "answer": "Import the classes and use them as regular Java objects."
  },
  {
    "question": "530.How will you use an existing class and extend it to use in the JSP?",
    "answer": "Use `<%@ page extends=\"MyClass\" %>` directive."
  },
  {
    "question": "531.Why _jspService method starts with _ symbol in JSP?",
    "answer": "Indicates that it is a generated method, not intended for direct modification."
  },
  {
    "question": "532.Why do we use tag library in JSP?",
    "answer": "To encapsulate reusable logic and presentation components."
  },
  {
    "question": "533.What is the different type of tag library groups in JSTL?",
    "answer": "Core, XML, Formatting, SQL, Functions."
  },
  {
    "question": "534.How will you pass information from one JSP to another JSP?",
    "answer": "Using request attributes, session attributes, or URL parameters."
  },
  {
    "question": "535.How will you call a stored procedure from JSP?",
    "answer": "Using JDBC and the `CallableStatement` interface."
  },
  {
    "question": "536.Can we override _jspService() method in JSP?",
    "answer": "No, it's generated by the JSP container."
  },
  {
    "question": "537.What is a directive in JSP?",
    "answer": "Instructions to the JSP container (e.g., page, include, taglib)."
  },
  {
    "question": "538.How will you implement Session tracking in JSP?",
    "answer": "Using the implicit `session` object or by setting cookies."
  },
  {
    "question": "539.How do you debug code in JSP?",
    "answer": "Using logging, browser developer tools, or remote debugging."
  },
  {
    "question": "540.How will you implement error page in JSP?",
    "answer": "Using `<%@ page errorPage=\"error.jsp\" %>` directive."
  },
  {
    "question": "541.How will you send XML data from a JSP?",
    "answer": "Set the `Content-Type` header to `application/xml` and write XML data to the response."
  },
  {
    "question": "542.What happens when we request for a JSP page from web browser?",
    "answer": "JSP container translates, compiles, and executes the JSP, sending HTML to the browser."
  },
  {
    "question": "543.How will you implement Auto Refresh of page in JSP?",
    "answer": "Using `<meta http-equiv=\"refresh\" content=\"5\">` in the HTML header."
  },
  {
    "question": "544.What are the important status codes in HTTP?",
    "answer": "200 (OK), 301 (Moved Permanently), 400 (Bad Request), 404 (Not Found), 500 (Internal Server Error)."
  },
  {
    "question": "545.What is the meaning of Accept attribute in HTTP header?",
    "answer": "Indicates the content types the client is willing to receive."
  },
  {
    "question": "546.What is the difference between Expression and Scriptlet in JSP?",
    "answer": "Expression: Outputs a value (`<%= %>`). Scriptlet: Executes Java code (`<% %>`)."
  },
  {
    "question": "547.How will you delete a Cookie in JSP?",
    "answer": "Set the cookie's maxAge to 0."
  },
  {
    "question": "548.How will you use a Cookie in JSP?",
    "answer": "Retrieve it from the `request.getCookies()` array."
  },
  {
    "question": "549.What is the main difference between a Session and Cookie in JSP?",
    "answer": "Session: Server-side, more secure. Cookie: Client-side, less secure."
  },
  {
    "question": "550.How will you prevent creation of session in JSP?",
    "answer": "Using `<%@ page session=\"false\" %>` directive."
  },
  {
    "question": "551.What is an output comment in JSP?",
    "answer": "Comments that are sent to the client (visible in the HTML source)  `<!-- comment -->`."
  },
  {
    "question": "552.How will you prevent caching of HTML output by web browser in JSP?",
    "answer": "Set HTTP headers: `response.setHeader(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");`"
  },
  {
    "question": "553.How will you redirect request to another page in browser in JSP code?",
    "answer": "Using `response.sendRedirect(\"newPage.jsp\")`."
  },
  {
    "question": "554.What is the difference between sendRedirect and forward in a JSP?",
    "answer": "`sendRedirect()`: client-side redirect, new request. `forward()`: server-side, same request."
  },
  {
    "question": "555.What is the use of config implicit object in JSP?",
    "answer": "Provides access to servlet configuration information."
  },
  {
    "question": "556.What is the difference between init-param and context-param?",
    "answer": "`init-param`: Servlet-specific configuration. `context-param`: Application-wide configuration."
  },
  {
    "question": "557.What is the purpose of RequestDispatcher?",
    "answer": "To forward or include requests to other resources (servlets, JSPs, HTML files)."
  },
  {
    "question": "558.How can be read data from a Form in a JSP?",
    "answer": "Using `request.getParameter()` methods."
  },
  {
    "question": "559.What is a filter in JSP?",
    "answer": "Component that intercepts requests and responses to perform preprocessing or postprocessing."
  },
  {
    "question": "560.How can you upload a large file in JSP?",
    "answer": "Using a library like Apache Commons FileUpload."
  },
  {
    "question": "561.In which scenario, Container initializes multiple JSP/Servlet objects?",
    "answer": "When using the `SingleThreadModel` interface (deprecated) or for session management, and load balancing."
  },
  {
    "question": "562.When will you use Strategy Design Pattern in Java?",
    "answer": "When you have multiple algorithms for a specific task and want to choose one at runtime."
  },
  {
    "question": "563.What is Observer design pattern?",
    "answer": "Defines a one-to-many dependency between objects, so that when one object changes state, all its dependents are notified and updated automatically."
  },
  {
    "question": "564.What are the examples of Observer design pattern in JDK?",
    "answer": "java.util.EventListener and its implementations, java.beans.PropertyChangeListener."
  },
  {
    "question": "565.How Strategy design pattern is different from State design pattern in Java?",
    "answer": "Strategy: Chooses algorithm at runtime. State: Object changes its behavior based on its internal state."
  },
  {
    "question": "566.Can you explain Decorator design pattern with an example in Java?",
    "answer": "Attaches additional responsibilities to an object dynamically. Example: wrapping an InputStream with a BufferedInputStream."
  },
  {
    "question": "567.What is a good scenario for using Composite design Pattern in Java?",
    "answer": "Representing part-whole hierarchies (e.g., a file system with directories and files)."
  },
  {
    "question": "568.Have you used Singleton design pattern in your Java project?",
    "answer": "Yes, [describe your experience and use case]."
  },
  {
    "question": "569.What are the main uses of Singleton design pattern in Java project?",
    "answer": "Centralized configuration, logging, thread pool management, caching."
  },
  {
    "question": "570.Why java.lang.Runtime is a Singleton in Java?",
    "answer": "To provide a single point of access to the JVM runtime environment."
  },
  {
    "question": "571.What is the way to implement a thread-safe Singleton design pattern in Java?",
    "answer": "Double-checked locking, enum singleton, or using a static inner class."
  },
  {
    "question": "572.What are the examples of Singleton design pattern in JDK?",
    "answer": "`java.lang.Runtime`, `java.lang.System`."
  },
  {
    "question": "573.What is Template Method design pattern in Java?",
    "answer": "Defines the skeleton of an algorithm in a base class, allowing subclasses to implement specific steps without changing the overall structure."
  },
  {
    "question": "574.What are the examples of Template method design pattern in JDK?",
    "answer": "InputStream and its subclasses (e.g., FileInputStream)."
  },
  {
    "question": "575.Can you tell some examples of Factory Method design pattern implementation in Java?",
    "answer": "`java.util.Calendar.getInstance()`, `java.text.NumberFormat.getInstance()`."
  },
  {
    "question": "576.What is the benefit we get by using static factory method to create object?",
    "answer": "More control over object creation, can return cached objects, can return subclasses."
  },
  {
    "question": "577.What are the examples of Builder design pattern in JDK?",
    "answer": "`StringBuilder`, `DocumentBuilder`."
  },
  [
  {
    "question": "578.What are the examples of Abstract Factory design pattern in JDK?",
    "answer": "`javax.xml.parsers.DocumentBuilderFactory.newInstance()`"
  },
  {
    "question": "579.What are the examples of Decorator design pattern in JDK?",
    "answer": "`java.io.BufferedInputStream`, `java.io.BufferedReader`"
  },
  {
    "question": "580.What are the examples of Proxy design pattern in JDK?",
    "answer": "RMI (Remote Method Invocation), JPA providers."
  },
  {
    "question": "581.What are the examples of Chain of Responsibility design pattern in JDK?",
    "answer": "`java.util.logging.Logger`"
  },
  {
    "question": "582.What are the main uses of Command design pattern?",
    "answer": "Encapsulating a request as an object, supporting undo/redo, queuing requests."
  },
  {
    "question": "583.What are the examples of Command design pattern in JDK?",
    "answer": "`javax.swing.Action`"
  },
  {
    "question": "584.What are the examples of Interpreter design pattern in JDK?",
    "answer": "`java.util.regex.Pattern`"
  },
  {
    "question": "585.What are the examples of Mediator design pattern in JDK?",
    "answer": "`java.util.Timer`"
  },
  {
    "question": "586.What are the examples of Strategy design pattern in JDK?",
    "answer": "`java.util.Comparator`, `java.nio.charset.Charset`"
  },
  {
    "question": "587.What are the examples of Visitor design pattern in JDK?",
    "answer": "Not directly present in core JDK but used in compiler implementations, some IDE functionalities"
  },
  {
    "question": "588.How Decorator design pattern is different from Proxy pattern?",
    "answer": "Decorator adds responsibilities; Proxy controls access."
  },
  {
    "question": "589.What are the different scenarios to use Setter and Constructor based injection in Dependency Injection (DI) design pattern?",
    "answer": "Constructor: Required dependencies, immutability. Setter: Optional dependencies, flexibility."
  },
  {
    "question": "590.What are the different scenarios for using Proxy design pattern?",
    "answer": "Remote proxies (RMI), virtual proxies (lazy loading), protection proxies (access control)."
  },
  {
    "question": "591.What is the main difference between Adapter and Proxy design pattern?",
    "answer": "Adapter: Changes interface. Proxy: Controls access to the original object."
  },
  {
    "question": "592.When will you use Adapter design pattern in Java?",
    "answer": "When you need to use an existing class with an incompatible interface."
  },
  {
    "question": "593.What are the examples of Adapter design pattern in JDK?",
    "answer": "`java.io.InputStreamReader`, `java.io.OutputStreamWriter`"
  },
  {
    "question": "594.What is the difference between Factory and Abstract Factory design pattern?",
    "answer": "Factory: Creates objects of a single type. Abstract Factory: Creates families of related objects."
  },
  {
    "question": "595.What is Open/closed design principle in Software engineering?",
    "answer": "Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification."
  },
  {
    "question": "596.What is SOLID design principle?",
    "answer": "Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion."
  },
  {
    "question": "597.What is Builder design pattern?",
    "answer": "Separates the construction of a complex object from its representation, allowing the same construction process to create different representations."
  },
  {
    "question": "598.What are the different categories of Design Patterns used in Object Oriented Design?",
    "answer": "Creational, Structural, Behavioral."
  },
  {
    "question": "599.What is the design pattern suitable to access elements of a Collection?",
    "answer": "Iterator pattern."
  },
  {
    "question": "600.How can we implement Producer Consumer design pattern in Java?",
    "answer": "Using `wait()`, `notify()`, or `notifyAll()` methods and a shared queue."
  },
  {
    "question": "601.What design pattern is suitable to add new features to an existing object?",
    "answer": "Decorator pattern."
  },
  {
    "question": "602.Which design pattern can be used when to decouple abstraction from the implementation?",
    "answer": "Bridge pattern."
  },
  {
    "question": "603.Which is the design pattern used in Android applications?",
    "answer": "Many patterns are used, including MVC, MVP, and MVVM, as well as Singleton, Factory, and Observer."
  },
  {
    "question": "604.How can we prevent users from creating more than one instance of singleton object by using clone() method?",
    "answer": "Override the `clone()` method and throw a `CloneNotSupportedException`."
  },
  {
    "question": "605.What is the use of Interceptor design pattern?",
    "answer": "To intercept and process requests or responses, adding cross-cutting concerns like logging, authentication, or validation."
  },
  {
    "question": "606.What are the Architectural patterns that you have used?",
    "answer": "Examples: MVC, Microservices, Layered architecture."
  },
  {
    "question": "607.What are the popular uses of Façade design pattern?",
    "answer": "Providing a simplified interface to a complex subsystem, hiding the complexity from the client."
  },
  {
    "question": "608.What is the difference between Builder design pattern and Factory design pattern?",
    "answer": "Builder: Constructs complex objects step-by-step. Factory: Creates objects without exposing the creation logic."
  },
  {
    "question": "609.What is Memento design pattern?",
    "answer": "Captures and externalizes an object's internal state, allowing the object to be restored to this state later."
  },
  {
    "question": "610.What is an AntiPattern?",
    "answer": "A commonly used but ineffective or counterproductive solution to a problem."
  },
  {
    "question": "611. What is a Data Access Object (DAO) design pattern?",
    "answer": "Abstracts the data access layer, separating the application logic from the database implementation."
  },
  {
    "question": "612.What is Spring framework?",
    "answer": "A comprehensive Java framework for building enterprise applications."
  },
  {
    "question": "613.What are the benefits of Spring framework in software development?",
    "answer": "Simplified development, dependency injection, aspect-oriented programming, transaction management, and testing support."
  },
  {
    "question": "614.What are the modules in Core Container of Spring framework?",
    "answer": "Core, Beans, Context, Expression Language (SpEL)."
  },
  {
    "question": "615.What are the modules in Data Access/Integration layer of Spring framework?",
    "answer": "JDBC, ORM, JMS, Transactions."
  },
  {
    "question": "616.What are the modules in Web layer of Spring framework?",
    "answer": "Web, Web MVC, WebSocket, WebFlux."
  },
  {
    "question": "617.What is the main use of Core Container module in Spring framework?",
    "answer": "Provides fundamental functionality like dependency injection and inversion of control."
  },
  {
    "question": "618.What kind of testing can be done in Spring Test Module?",
    "answer": "Unit testing, integration testing, and mocking."
  },
  {
    "question": "619.What is the use of BeanFactory in Spring framework?",
    "answer": "Provides a basic IoC container for managing beans."
  },
  {
    "question": "620.Which is the most popular implementation of BeanFactory in Spring?",
    "answer": "ApplicationContext (which extends BeanFactory)."
  },
  {
    "question": "621.What is XMLBeanFactory in Spring framework?",
    "answer": "A BeanFactory implementation that reads bean definitions from an XML file (deprecated; use ApplicationContext)."
  },
  {
    "question": "622.What are the uses of AOP module in Spring framework?",
    "answer": "Implementing cross-cutting concerns like logging, security, and transaction management."
  },
  {
    "question": "623.What are the benefits of JDBC abstraction layer module in Spring framework?",
    "answer": "Simplified JDBC coding, exception handling, and resource management."
  },
  {
    "question": "624.How does Spring support Object Relational Mapping (ORM) integration?",
    "answer": "Provides integration with Hibernate, JPA, JDO, etc."
  },
  {
    "question": "625.How does Web module work in Spring framework?",
    "answer": "Provides support for building web applications (handling requests, responses, etc.)."
  },
  {
    "question": "626.What are the main uses of Spring MVC module?",
    "answer": "Building web applications following the Model-View-Controller design pattern."
  },
  {
    "question": "627.What is the purpose of Spring configuration file?",
    "answer": "Defines the beans, their dependencies, and other configuration settings for the application."
  },
  {
    "question": "628.What is the purpose of Spring IoC container?",
    "answer": "Manages the lifecycle of beans and injects dependencies."
  },
  {
    "question": "629.What is the main benefit of Inversion of Control (IOC) principle?",
    "answer": "Decouples components, making the application more modular, testable, and maintainable."
  },
  {
    "question": "630.Does IOC containers support Eager Instantiation or Lazy loading of beans?",
    "answer": "Both eager instantiation (default) and lazy loading are supported."
  },
  {
    "question": "631.What are the benefits of ApplicationContext in Spring?",
    "answer": "Extends BeanFactory, adding features like AOP integration, message source support, and web application context."
  },
  {
    "question": "632.How will you implement ApplicationContext in Spring framework?",
    "answer": "Using implementations like `ClassPathXmlApplicationContext` or `AnnotationConfigApplicationContext`."
  },
  {
    "question": "633.Explain the difference between ApplicationContext and BeanFactory in Spring?",
    "answer": "ApplicationContext is a more complete and feature-rich container that extends BeanFactory."
  },
  {
    "question": "634.Between ApplicationContext and BeanFactory which one is preferable to use in Spring?",
    "answer": "ApplicationContext is generally preferred due to its extended features."
  },
  {
    "question": "635.What are the main components of a typical Spring based application?",
    "answer": "Beans, configuration files (XML or annotations), and the IoC container."
  },
  {
    "question": "636.Explain Dependency Injection (DI) concept in Spring framework?",
    "answer": "The container provides dependencies to beans, rather than the beans creating or looking them up themselves."
  },
  {
    "question": "637.What are the different roles in Dependency Injection (DI)?",
    "answer": "Service object, client, and injector (the Spring container)."
  },
  {
    "question": "638.Spring framework provides what kinds of Dependency Injection mechanism?",
    "answer": "Constructor-based and setter-based injection."
  },
  {
    "question": "639.In Spring framework, which Dependency Injection is better? Constructor-based DI or Setter-based DI?",
    "answer": "Constructor-based DI is generally preferred for required dependencies (promotes immutability)."
  },
  {
    "question": "640.What are the advantages of Dependency Injection (DI)?",
    "answer": "Decoupling, testability, reusability, and maintainability."
  },
  {
    "question": "641.What are the disadvantages of Dependency Injection (DI)?",
    "answer": "Increased complexity, potential for runtime errors (if dependencies are not configured correctly)."
  },
  {
    "question": "642.What is a Spring Bean?",
    "answer": "An object managed by the Spring IoC container."
  },
  {
    "question": "643.What does the definition of a Spring Bean contain?",
    "answer": "Class name, scope, lifecycle methods, dependencies, and other configuration settings."
  },
  {
    "question": "644.What are the different ways to provide configuration metadata to a Spring Container?",
    "answer": "XML configuration files, annotation-based configuration, and Java-based configuration."
  },
  {
    "question": "645.What are the different scopes of a Bean supported by Spring?",
    "answer": "singleton, prototype, request, session, application, websocket, global session (in portlet contexts)."
  },
  {
    "question": "646.How will you define the scope of a bean in Spring?",
    "answer": "Using the `scope` attribute in XML configuration or the `@Scope` annotation."
  },
  {
    "question": "647.Is it safe to assume that a Singleton bean is thread safe in Spring Framework?",
    "answer": "No. Singleton scope just means there is one instance per container. Thread safety depends on the bean's implementation."
  },
  {
    "question": "648.What are the design-patterns used in Spring framework?",
    "answer": "Factory, Singleton, Prototype, Proxy, Template Method, Front Controller, and more."
  },
  {
    "question": "649.What is the lifecycle of a Bean in Spring framework?",
    "answer": "Instantiation, population of properties, initialization (init methods), ready for use, destruction (destroy methods)."
  },
  {
    "question": "650.What are the two main groups of methods in a Bean’s lifecycle?",
    "answer": "Initialization methods and destruction methods."
  },
  {
    "question": "651.Can we override main lifecycle methods of a Bean in Spring?",
    "answer": "No, but you can implement initialization and destruction callbacks."
  },
  {
    "question": "652.What are Inner beans in Spring?",
    "answer": "Beans defined within the scope of another bean (anonymous and only accessible within that bean)."
  },
  {
    "question": "653.How can we inject a Java Collection in Spring framework?",
    "answer": "Using the `<list>`, `<set>`, `<map>`, and `<props>` elements in XML configuration or using annotations like `@Autowired` with appropriate collection types."
  },
  {
    "question": "654.What is Bean wiring in Spring?",
    "answer": "Configuring the dependencies between beans in the Spring container."
  },
  {
    "question": "655.What is Autowiring in Spring?",
    "answer": "Spring automatically resolving and injecting dependencies based on type or name."
  },
  {
    "question": "656.What are the different modes of Autowiring supported by Spring?",
    "answer": "no, byName, byType, constructor, autodetect (deprecated)."
  },
  {
    "question": "657.What are the cases in which Autowiring may not work in Spring framework?",
    "answer": "Ambiguous dependencies (multiple beans of the same type), no matching bean found."
  },
  {
    "question": "658.Is it allowed to inject null or empty String values in Spring?",
    "answer": "Yes, but you might need to configure how null values are handled (e.g., using `@Value` annotation with a default value)."
  },
  {
    "question": "659.What is a Java-based Configuration in Spring?",
    "answer": "Using Java code and annotations (e.g., `@Configuration`, `@Bean`) to define Spring configuration."
  },
  {
    "question": "660.What is the purpose of @Configuration annotation?",
    "answer": "Indicates that a class is a source of bean definitions."
  },
  {
    "question": "661.What is the difference between Full @Configuration and 'lite' @Beans mode?",
    "answer": "Full `@Configuration` supports inter-bean dependencies and proxying. 'lite' `@Bean` methods don't support these advanced features."
  },
  {
    "question": "662.In Spring framework, what is Annotation-based container configuration?",
    "answer": "Using annotations (e.g., `@Component`, `@Autowired`) to configure beans and dependencies instead of XML."
  },
  {
    "question": "663.How will you switch on Annotation based wiring in Spring?",
    "answer": "Using `<context:annotation-config/>` in XML configuration or using `@EnableAspectJAutoProxy` in Java configuration."
  },
  {
    "question": "664.What is @Autowired annotation?",
    "answer": "Used to automatically inject dependencies into a bean."
  },
  {
    "question": "665.What is @Required annotation?",
    "answer": "Indicates that a bean property must be set (deprecated in favor of constructor injection)."
  },
  {
    "question": "666.What are the two ways to enable RequiredAnnotationBeanPostProcessor in Spring?",
    "answer": "Using `<bean class=\"org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor\"/>` in XML or registering it programmatically."
  },
  {
    "question": "667.What is @Qualifier annotation in Spring?",
    "answer": "Used to resolve ambiguity when multiple beans of the same type exist (specifies which bean to inject)."
  },
  {
    "question": "668.How Spring framework makes JDBC coding easier for developers?",
    "answer": "Provides JdbcTemplate, exception translation, and resource management."
  },
  {
    "question": "669.What is the purpose of JdbcTemplate?",
    "answer": "Simplifies JDBC operations (querying, updating, calling stored procedures)."
  },
  {
    "question": "670.What are the benefits of using Spring DAO?",
    "answer": "Consistent exception handling, simplified JDBC coding, and transaction management."
  },
  {
    "question": "671.What are the different ways to use Hibernate in Spring?",
    "answer": "Using HibernateTemplate (deprecated), LocalSessionFactoryBean, or Spring Data JPA."
  },
  {
    "question": "672.What types of Object Relational Mapping (ORM) are supported by Spring?",
    "answer": "Hibernate, JPA, JDO, iBATIS/MyBatis."
  },
  {
    "question": "673.How will you integrate Spring and Hibernate by using HibernateDaoSupport?",
    "answer": "HibernateDaoSupport is deprecated. Use LocalSessionFactoryBean and inject the SessionFactory."
  },
  {
    "question": "674.What are the different types of the Transaction Management supported by Spring framework?",
    "answer": "Programmatic and declarative transaction management."
  },
  {
    "question": "675.What are the benefits provided by Spring Framework’s Transaction Management?",
    "answer": "Consistent transaction handling, declarative transaction management, and integration with different transaction managers."
  },
  {
    "question": "676.Given a choice between declarative and programmatic Transaction Management, which method will you choose?",
    "answer": "Declarative transaction management is generally preferred for its simplicity and separation of concerns."
  },
  {
    "question": "677.What is Aspect Oriented Programming (AOP)",
    "answer": "A programming paradigm that allows modularizing cross-cutting concerns (logging, security, etc.)."
  },
  {
    "question": "678.What is an Aspect in Spring?",
    "answer": "A module that encapsulates a cross-cutting concern (e.g., logging aspect)."
  },
  {
    "question": "679.In Spring AOP, what is the main difference between a Concern and a Cross cutting concern?",
    "answer": "Concern: Specific to a module. Cross-cutting concern: Affects multiple modules."
  },
  {
    "question": "680.What is a Joinpoint in Spring AOP?",
    "answer": "A point in the execution of an application where an aspect can be applied (e.g., method call)."
  },
  {
    "question": "681.What is an Advice in Spring AOP?",
    "answer": "The action taken by an aspect at a particular joinpoint (e.g., logging before a method call)."
  },
  {
    "question": "682.What are the different types of Advice in Spring AOP?",
    "answer": "Before, After, AfterReturning, AfterThrowing, Around."
  },
  {
    "question": "683.What is a Pointcut in Spring AOP?",
    "answer": "An expression that defines the joinpoints where an advice should be applied."
  },
  {
    "question": "684.What is an Introduction in Spring AOP?",
    "answer": "Adding new interfaces (and their implementations) to existing classes."
  },
  {
    "question": "685.What is a Target object in Spring AOP?",
    "answer": "The object being advised by an aspect."
  },
  {
    "question": "686.What is a Proxy in Spring AOP?",
    "answer": "An object created by the Spring AOP framework to intercept method calls and apply advice."
  },
  {
    "question": "687.What are the different types of AutoProxy creators in Spring?",
    "answer": "BeanNameAutoProxyCreator, DefaultAdvisorAutoProxyCreator, AspectJAwareAdvisorAutoProxyCreator."
  },
  {
    "question": "688.What is Weaving in Spring AOP?",
    "answer": "The process of linking aspects with the application code."
  },
  {
    "question": "689.In Spring AOP, Weaving is done at compile time or run time?",
    "answer": "Typically at runtime (using proxies)."
  },
  {
    "question": "690.What is XML Schema-based Aspect implementation?",
    "answer": "Defining aspects and advice using XML configuration."
  },
  {
    "question": "691.What is Annotation-based aspect implementation in Spring AOP?",
    "answer": "Defining aspects and advice using annotations (e.g., `@Aspect`, `@Before`)."
  },
  {
    "question": "692.How does Spring MVC framework work?",
    "answer": "Request arrives at DispatcherServlet, which dispatches it to a Controller, which processes the request and returns a Model and View, which are then rendered to generate the response."
  },
  {
    "question": "693.What is DispatcherServlet?",
    "answer": "The front controller in Spring MVC, responsible for handling all incoming requests."
  },
  {
    "question": "694.Can we have more than one DispatcherServlet in Spring MVC?",
    "answer": "Yes, but each DispatcherServlet manages its own context and mappings."
  },
  {
    "question": "695.What is WebApplicationContext in Spring MVC?",
    "answer": "An extension of ApplicationContext specific to web applications, providing access to web-related resources."
  },
  {
    "question": "696.What is Controller in Spring MVC framework?",
    "answer": "A component that handles requests and prepares the model and view."
  },
  {
    "question": "697.What is @RequestMapping annotation in Spring?",
    "answer": "Maps HTTP requests to controller methods."
  },
  {
    "question": "698.What are the main features of Spring MVC?",
    "answer": "Model-View-Controller architecture, flexible request mapping, data binding, validation, and view resolution."
  },
  {
    "question": "699.What is the difference between a Singleton and Prototype bean in Spring?",
    "answer": "Singleton: One instance per container. Prototype: New instance for each request."
  },
  {
    "question": "700.How will you decide which scope- Prototype or Singleton to use for a bean in Spring?",
    "answer": "Singleton: Shared, immutable state. Prototype: Mutable state or when a new instance is required for each use."
  },
  {
    "question": "701.What is the difference between Setter and Constructor based Dependency Injection (DI) in Spring framework?",
    "answer": "Constructor DI: Dependencies are injected via the constructor. Setter DI: Dependencies are injected via setter methods."
  },
  {
    "question": "702.What are the drawbacks of Setter based Dependency Injection (DI) in Spring?",
    "answer": "Objects can be created in an incomplete state, and dependencies can be changed after object creation (less immutability)."
  },
  {
    "question": "703.What are the differences between Dependency Injection (DI) and Factory Pattern?",
    "answer": "DI: Dependencies are provided externally. Factory Pattern: Object creates its own dependencies (but abstracts the creation)."
  },
  {
    "question": "704.In Spring framework, what is the difference between FileSystemResource and ClassPathResource?",
    "answer": "FileSystemResource: Loads resources from the file system. ClassPathResource: Loads resources from the classpath."
  },
  {
    "question": "705.Name some popular Spring framework annotations that you use in your project?",
    "answer": "@Component, @Autowired, @Value, @Service, @Repository, @Controller, @RequestMapping, @Configuration, @Bean, @Scope."
  },
  {
    "question": "706.How can you upload a file in Spring MVC Application?",
    "answer": "Using `MultipartFile` and handling the request in a controller method."
  },
  {
    "question": "707.What are the different types of events provided by Spring framework?",
    "answer": "ContextRefreshedEvent, ContextStartedEvent, ContextStoppedEvent, ContextClosedEvent, RequestHandledEvent."
  },
  {
    "question": "708.What is the difference between DispatcherServlet and ContextLoaderListener in Spring?",
    "answer": "DispatcherServlet: Handles web requests. ContextLoaderListener: Loads the root application context."
  },
  {
    "question": "709.How will you handle exceptions in Spring MVC Framework?",
    "answer": "Using `@ExceptionHandler` annotation, `HandlerExceptionResolver`, or `@ControllerAdvice`."
  },
  {
    "question": "710.What are the best practices of Spring Framework?",
    "answer": "Using constructor injection, avoiding circular dependencies, using annotations over XML configuration, proper exception handling, and testing."
  },
  {
    "question": "711. What is Spring Boot?",
    "answer": "A Spring module that simplifies the creation of stand-alone, production-ready Spring-based applications with minimal configuration."
  },
  {
    "question": "712.What is Hibernate framework?",
    "answer": "An Object-Relational Mapping (ORM) framework for Java."
  },
  {
    "question": "713.What is an Object Relational Mapping (ORM)?",
    "answer": "A technique that maps objects to relational database tables, simplifying data access."
  },
  {
    "question": "714.What is the purpose of Configuration Interface in Hibernate?",
    "answer": "To configure Hibernate settings and create a SessionFactory."
  },
  {
    "question": "715.What is Object Relational Impedance Mismatch?",
    "answer": "The difficulties that arise when mapping objects to relational database tables due to differences in their paradigms."
  },
  {
    "question": "716.What are the main problems of Object Relational Impedance Mismatch?",
    "answer": "Granularity, inheritance, identity, associations, data types."
  },
  {
    "question": "717.What are the key characteristics of Hibernate?",
    "answer": "ORM, automatic table generation, caching, transaction management, HQL."
  },
  {
    "question": "718.Can you tell us about the core interfaces of Hibernate framework?",
    "answer": "SessionFactory, Session, Transaction, Query, Criteria."
  },
  {
    "question": "719.How will you map the columns of a DB table to the properties of a Java class in Hibernate?",
    "answer": "Using mapping files (XML or annotations)."
  },
  {
    "question": "720.Does Hibernate make it mandatory for a mapping file to have .hbm.xml extension?",
    "answer": "No, it's a convention, not a requirement."
  },
  {
    "question": "721.What are the steps for creating a SessionFactory in Hibernate?",
    "answer": "Create a Configuration object, configure Hibernate settings, build SessionFactory."
  },
  {
    "question": "722.Why do we use POJO in Hibernate?",
    "answer": "To represent database entities as simple Java objects."
  },
  {
    "question": "723.What is Hibernate Query Language (HQL)?",
    "answer": "An object-oriented query language similar to SQL, but operating on objects."
  },
  {
    "question": "724.How will you call a stored procedure in Hibernate?",
    "answer": "Using `Session.createSQLQuery()` or `Session.getNamedQuery()` with appropriate configuration."
  },
  {
    "question": "725.What is Criteria API in Hibernate?",
    "answer": "A programmatic way to build queries using Java objects instead of HQL."
  },
  {
    "question": "726.Why do we use HibernateTemplate?",
    "answer": "Deprecated; formerly used to simplify Hibernate operations and resource management."
  },
  {
    "question": "727.How can you see SQL code generated by Hibernate on console?",
    "answer": "Set `hibernate.show_sql` property to `true`."
  },
  {
    "question": "728.What are the different types of collections supported by Hibernate?",
    "answer": "List, Set, Map, Bag."
  },
  {
    "question": "729.What is the difference between session.save() and session.saveOrUpdate() methods in Hibernate?",
    "answer": "save(): Inserts a new record. saveOrUpdate(): Inserts or updates based on existence of identifier."
  },
  {
    "question": "730.What are the advantages of Hibernate framework over JDBC?",
    "answer": "ORM, simplified data access, reduced boilerplate code, caching, and HQL."
  },
  {
    "question": "731.How can we get statistics of a SessionFactory in Hibernate?",
    "answer": "Using `SessionFactory.getStatistics()`."
  },
  {
    "question": "732.What is the Transient state of an object in Hibernate?",
    "answer": "Not associated with a Session, not in the database."
  },
  {
    "question": "733.What is the Detached state of an object in Hibernate?",
    "answer": "Previously associated with a Session, but the Session is now closed or cleared."
  },
  {
    "question": "734.What is the use of Dirty Checking in Hibernate?",
    "answer": "Hibernate automatically detects changes to persistent objects and updates the database accordingly."
  },
  {
    "question": "735.What is the purpose of Callback interface in Hibernate?",
    "answer": "To intercept lifecycle events (e.g., pre-insert, post-update)."
  },
  {
    "question": "736.What are the different ORM levels in Hibernate?",
    "answer": "Persistent classes, collections, associations."
  },
  {
    "question": "737.What are the different ways to configure a Hibernate application?",
    "answer": "hibernate.cfg.xml file, programmatic configuration (Configuration object), annotations."
  },
  {
    "question": "738.What is Query Cache in Hibernate?",
    "answer": "Caches the results of queries, improving performance for repeated queries with the same parameters."
  },
  {
    "question": "739.What are the different types of Association mappings supported by Hibernate?",
    "answer": "One-to-one, one-to-many, many-to-one, many-to-many."
  },
  {
    "question": "740.What are the different types of Unidirectional Association mappings in Hibernate?",
    "answer": "One-to-one, one-to-many, many-to-one."
  },
  {
    "question": "741.What is Unit of Work design pattern?",
    "answer": "Maintains a list of objects affected by a business transaction and coordinates writing out changes."
  },
  {
    "question": "742.In Hibernate, how can an object go in Detached state?",
    "answer": "By closing the Session or calling `Session.evict()` or `Session.clear()`."
  },
  {
    "question": "743.How will you order the results returned by a Criteria in Hibernate?",
    "answer": "Using `Criteria.addOrder()`."
  },
  {
    "question": "744.How does Example criterion work in Hibernate?",
    "answer": "Creates a query based on the non-null properties of a given object."
  },
  {
    "question": "745.How does Transaction management work in Hibernate?",
    "answer": "Using the `Transaction` interface to begin, commit, or rollback transactions."
  },
  {
    "question": "746.How can we mark an entity/collection as immutable in Hibernate?",
    "answer": "Using `mutable=\"false\"` in the mapping file or `@Immutable` annotation."
  },
  {
    "question": "747.What are the different options to retrieve an object from database in Hibernate?",
    "answer": "`Session.get()`, `Session.load()`, `Query`, `Criteria`."
  },
  {
    "question": "748.How can we auto-generate primary key in Hibernate?",
    "answer": "Using the `<generator>` element in the mapping file or `@GeneratedValue` annotation."
  },
  {
    "question": "749.How will you re-attach an object in Detached state in Hibernate?",
    "answer": "Using `Session.update()`, `Session.merge()`, or `Session.lock()`."
  },
  {
    "question": "750.What is the first level of cache in Hibernate?",
    "answer": "The Session cache (in-memory cache within a single Session)."
  },
  {
    "question": "751.What are the different second level caches available in Hibernate?",
    "answer": "EHCache, Infinispan, Hazelcast, etc."
  },
  {
    "question": "752.Which is the default transaction factory in Hibernate?",
    "answer": "`org.hibernate.transaction.JDBCTransactionFactory`."
  },
  {
    "question": "753.What are the options to disable second level cache in Hibernate?",
    "answer": "Setting `hibernate.cache.use_second_level_cache` to `false`."
  },
  {
    "question": "754.What are the different fetching strategies in Hibernate?",
    "answer": "Immediate (eager), lazy, extra-lazy."
  },
  {
    "question": "755.What is the difference between Immediate fetching and Lazy collection fetching?",
    "answer": "Immediate: Data is fetched when the object is loaded. Lazy: Data is fetched only when accessed."
  },
  {
    "question": "756.What is ‘Extra lazy fetching’ in Hibernate?",
    "answer": "Only the size of the collection is fetched initially; individual elements are fetched as needed."
  },
  {
    "question": "757.How can we check is a collection is initialized or not under Lazy Initialization strategy?",
    "answer": "Using `Hibernate.isInitialized()`."
  },
  {
    "question": "758.What are the different strategies for cache mapping in Hibernate?",
    "answer": "Read-only, nonstrict-read-write, read-write, transactional."
  },
  {
    "question": "759.What is the difference between a Set and a Bag in Hibernate?",
    "answer": "Set: Unordered collection, no duplicates. Bag: Unordered collection, allows duplicates."
  },
  {
    "question": "760.How can we monitor the performance of Hibernate in an application?",
    "answer": "Using Hibernate statistics, logging, and profiling tools."
  },
  {
    "question": "761.How can we check if an Object is in Persistent, Detached or Transient state in Hibernate?",
    "answer": "No direct API. Infer from Session association and database presence."
  },
  {
    "question": "762.What is ‘the inverse side of association’ in a mapping?",
    "answer": "The side of the association that is not responsible for updating the relationship in the database."
  },
  {
    "question": "763.What is ORM metadata?",
    "answer": "Information that describes how objects are mapped to database tables (mapping files, annotations)."
  },
  {
    "question": "764.What is the difference between load() and get() method in Hibernate?",
    "answer": "load(): Returns a proxy, throws exception if not found. get(): Returns null if not found."
  },
  {
    "question": "765.When should we use get() method or load() method in Hibernate?",
    "answer": "get(): When you need to know immediately if the object exists. load(): When you're sure the object exists (for performance)."
  },
  {
    "question": "766.What is a derived property in Hibernate?",
    "answer": "A property whose value is calculated based on other properties or database functions."
  },
  {
    "question": "767.How can we use Named Query in Hibernate?",
    "answer": "Define the query in the mapping file or using annotations and then retrieve it using `Session.getNamedQuery()`."
  },
  {
    "question": "768.What are the two locking strategies in Hibernate?",
    "answer": "Optimistic and pessimistic locking."
  },
  {
    "question": "769.What is the use of version number in Hibernate?",
    "answer": "For optimistic locking, to prevent concurrent updates."
  },
  {
    "question": "770.What is the use of session.lock() method in Hibernate?",
    "answer": "To re-associate a detached object with the current Session and acquire a lock on it (pessimistic locking)."
  },
  {
    "question": "771.What inheritance mapping strategies are supported by Hibernate?",
    "answer": "Table per class hierarchy, table per subclass, table per concrete class."
  },
  {
    "question": "772.What is Maven?",
    "answer": "A build automation tool primarily used for Java projects."
  },
  {
    "question": "773.What are the main features of Maven?",
    "answer": "Dependency management, build lifecycle, plugin support, repository management."
  },
  {
    "question": "774.What areas of a Project can you manage by using Maven?",
    "answer": "Build process, dependencies, reporting, documentation, and deployment."
  },
  {
    "question": "775.What are the main advantages of Maven?",
    "answer": "Simplified build process, dependency management, standardization, and extensibility."
  },
  {
    "question": "776.Why do we say “Maven uses convention over configuration”?",
    "answer": "Maven provides a default project structure and build lifecycle, reducing the need for explicit configuration."
  },
  {
    "question": "777.What are the responsibilities of a Build tool like Maven?",
    "answer": "Compiling code, managing dependencies, running tests, packaging applications, and deploying artifacts."
  },
  {
    "question": "778.What are the differences between Ant and Maven?",
    "answer": "Ant: Procedural, requires explicit configuration. Maven: Declarative, uses convention over configuration."
  },
  {
    "question": "779.What is MOJO in Maven?",
    "answer": "Maven plain Old Java Object: The basic unit of execution in a Maven plugin."
  },
  {
    "question": "780.What is a Repository in Maven?",
    "answer": "A storage location for Maven artifacts (JAR files, POM files, etc.)."
  },
  {
    "question": "781.What are the different types of repositories in Maven?",
    "answer": "Local, central, and remote repositories."
  },
  {
    "question": "782.What is a local repository in Maven?",
    "answer": "A directory on your local machine where Maven stores downloaded artifacts."
  },
  {
    "question": "783.What is a central repository in Maven?",
    "answer": "A publicly available repository maintained by the Apache Maven project."
  },
  {
    "question": "784.What is a Remote repository in Maven?",
    "answer": "A repository located on a remote server, accessed via HTTP or other protocols."
  },
  {
    "question": "785.Why we should not store jars in CVS or any other version control system instead of Maven repository?",
    "answer": "Maven repositories handle dependency management, versioning, and artifact resolution automatically."
  },
  {
    "question": "786.Can anyone upload JARS or artifacts to Central Repository?",
    "answer": "No, you need to follow specific guidelines and have appropriate credentials."
  },
  {
    "question": "787.What is a POM?",
    "answer": "Project Object Model: An XML file containing information about a Maven project (dependencies, build settings, etc.)."
  },
  {
    "question": "788.What is Super POM?",
    "answer": "A default POM that all Maven projects inherit from, providing default settings and plugins."
  },
  {
    "question": "789.What are the main required elements in POM file?",
    "answer": "modelVersion, groupId, artifactId, version."
  },
  {
    "question": "790.What are the phases in Build lifecycle in Maven?",
    "answer": "validate, compile, test, package, verify, install, deploy."
  },
  {
    "question": "791.What command will you use to package your Maven project?",
    "answer": "`mvn package`."
  },
  {
    "question": "792.What is the format of fully qualified artifact name of a Maven project?",
    "answer": "groupId:artifactId:packaging:version"
  },
  {
    "question": "793.What is an Archetype in Maven?",
    "answer": "A template for creating new Maven projects, providing a predefined structure and dependencies."
  },
  {
    "question": "794.What is the command in Maven to generate an Archetype?",
    "answer": "`mvn archetype:generate`."
  },
  {
    "question": "795.What are the three main build lifecycles of Maven?",
    "answer": "clean, default, site."
  },
  {
    "question": "796.What are the main uses of a Maven plugin?",
    "answer": "To extend Maven's functionality by providing custom goals (tasks)."
  },
  {
    "question": "797.How will you find the version of a plugin being used?",
    "answer": "Check the plugin's configuration in the POM file or use `mvn help:describe -Dplugin=pluginName`."
  },
  {
    "question": "798.What are the different types of profile in Maven? Where will you define these profiles?",
    "answer": "Build profiles (for different environments or build configurations). Defined in `pom.xml` or `settings.xml`."
  },
  {
    "question": "799.What are the different setting files in Maven? Where will you find these files?",
    "answer": "`settings.xml` (user-specific settings in `~/.m2/settings.xml` or global settings in `${maven.home}/conf/settings.xml`)."
  },
  {
    "question": "800.What are the main elements we can find in settings.xml?",
    "answer": "localRepository, mirrors, proxies, servers, profiles."
  },
  {
    "question": "801.How will you check the version of Maven in your system?",
    "answer": "mvn -version"
  },
  {
    "question": "802.How will you verify if Maven is installed on Windows?",
    "answer": "Open a command prompt and run `mvn -version`. Check if the command is recognized."
  },
  {
    "question": "803.What is a Maven artifact?",
    "answer": "A file (JAR, WAR, POM, etc.) deployed to a Maven repository."
  },
  {
    "question": "804.What are the different dependency scopes in Maven?",
    "answer": "compile, provided, runtime, test, system, import"
  },
  {
    "question": "805.How can we exclude a dependency in Maven?",
    "answer": "Using the `<exclusions>` element in the dependency declaration."
  },
  {
    "question": "806.How Maven searches for JAR corresponding to a dependency?",
    "answer": "Local repository -> Central repository (if not found locally) -> Remote repositories (if configured)."
  },
  {
    "question": "807.What is a transitive dependency in Maven?",
    "answer": "A dependency of a dependency (Maven automatically includes these)."
  },
  {
    "question": "808.What are Excluded dependencies in Maven?",
    "answer": "Dependencies that are explicitly excluded from a transitive dependency."
  },
  {
    "question": "809.What are Optional dependencies in Maven?",
    "answer": "Dependencies that are only needed for specific features and are not automatically included."
  },
  {
    "question": "810.Where will you find the class files after compiling a Maven project successfully?",
    "answer": "target/classes"
  },
  {
    "question": "811. What are the default locations for source, test and build directories in Maven?",
    "answer": "src/main/java (source), src/test/java (test), target (build)"
  },
  {
    "question": "812.What is the result of jar:jar goal in Maven?",
    "answer": "Creates a JAR file for the project."
  },
  {
    "question": "813.How can we get the debug or error messages from the execution of Maven?",
    "answer": "Using the `-X` (debug) or `-e` (error) command-line options."
  },
  {
    "question": "814.What is the difference between a Release version and SNAPSHOT version in Maven?",
    "answer": "Release: Stable, immutable version. SNAPSHOT: Development version, can change frequently."
  },
  {
    "question": "815.How will you run test classes in Maven?",
    "answer": "mvn test"
  },
  {
    "question": "816.Sometimes Maven compiles the test classes but doesn't run them? What could be the reason for it?",
    "answer": "No test classes found matching the Surefire plugin configuration, or the test scope is not configured correctly."
  },
  {
    "question": "817.How can we skip the running of tests in Maven?",
    "answer": "mvn -DskipTests=true"
  },
  {
    "question": "818.Can we create our own directory structure for a project in Maven?",
    "answer": "Yes, but it's generally discouraged as it deviates from Maven's convention-over-configuration principle."
  },
  {
    "question": "819.What are the differences between Gradle and Maven?",
    "answer": "Gradle: Groovy-based DSL, more flexible, incremental builds. Maven: XML-based, convention over configuration."
  },
  {
    "question": "820.What is the difference between Inheritance and Multi-module in Maven?",
    "answer": "Inheritance: Shared configuration in a parent POM. Multi-module: Project with multiple sub-projects (modules)."
  },
  {
    "question": "821.What is Build portability in Maven?",
    "answer": "The ability to build a project consistently across different environments."
  },
  {
    "question": "822.How can we see n most recent commits in GIT?",
    "answer": "git log -n"
  },
  {
    "question": "823.How can we know if a branch is already merged into master in GIT?",
    "answer": "git branch --merged master"
  },
  {
    "question": "824.What is the purpose of git stash drop?",
    "answer": "Deletes a specific stash or the most recent stash if no stash is specified."
  },
  {
    "question": "825.What is the HEAD in GIT?",
    "answer": "A pointer to the current branch or commit."
  },
  {
    "question": "826.What is the most popular branching strategy in GIT?",
    "answer": "Gitflow (feature branches, release branches, hotfix branches)."
  },
  {
    "question": "827.What is SubGit?",
    "answer": "A tool for bidirectional synchronization between Git and SVN repositories."
  },
  {
    "question": "828.What is the use of git instaweb?",
    "answer": "Spins up a web server to browse your git repository in a web browser."
  },
  {
    "question": "829.What are git hooks?",
    "answer": "Scripts that run automatically before or after certain Git events (commit, push, etc.)."
  },
  {
    "question": "830.What is GIT?",
    "answer": "A distributed version control system."
  },
  {
    "question": "831.What is a repository in GIT?",
    "answer": "A storage location for your project's files and history."
  },
  {
    "question": "832.What are the main benefits of GIT?",
    "answer": "Version control, collaboration, branching, distributed architecture."
  },
  {
    "question": "833.What are the disadvantages of GIT?",
    "answer": "Can be complex for beginners, large repository size."
  },
  {
    "question": "834.What are the main differences between GIT and SVN?",
    "answer": "GIT: Distributed. SVN: Centralized."
  },
  {
    "question": "835.How will you start GIT for your project?",
    "answer": "git init (creates a local repository)."
  },
  {
    "question": "836.What is git clone in GIT?",
    "answer": "Creates a local copy of a remote repository."
  },
  {
    "question": "837.How will you create a repository in GIT?",
    "answer": "git init (local), or create a repository on a remote hosting service (GitHub, etc.)."
  },
  {
    "question": "838.What are the different ways to start work in GIT?",
    "answer": "git init (new project), git clone (existing project)."
  },
  {
    "question": "839.GIT is written in which language?",
    "answer": "C (primarily), with some shell scripts and other languages."
  },
  {
    "question": "840.What does ‘git pull’ command in GIT do internally?",
    "answer": "Fetches changes from a remote repository and merges them into the current branch."
  },
  {
    "question": "841.What does ‘git push’ command in GIT do internally?",
    "answer": "Uploads local commits to a remote repository."
  },
  {
    "question": "842.What is git stash?",
    "answer": "Temporarily shelves changes that you don't want to commit immediately."
  },
  {
    "question": "843.What is the meaning of ‘stage’ in GIT?",
    "answer": "Preparing changes for commit by adding them to the staging area (index)."
  },
  {
    "question": "844. What is the purpose of git config command?",
    "answer": "Sets Git configuration options (user name, email, etc.)."
  },
  {
    "question": "845.How can we see the configuration settings of GIT installation?",
    "answer": "git config --list"
  },
  {
    "question": "846.How will you write a message with commit command in GIT?",
    "answer": "git commit -m \"Your commit message\""
  },
  {
    "question": "847.What is stored inside a commit object in GIT?",
    "answer": "Changes, author, committer, message, and pointers to parent commits."
  },
  {
    "question": "848.How many heads can you create in a GIT repository?",
    "answer": "Unlimited (each branch has a head)."
  },
  {
    "question": "849.Why do we create branches in GIT?",
    "answer": "To isolate changes and develop new features without affecting the main codebase."
  },
  {
    "question": "850.What are the different kinds of branches that can be created in GIT?",
    "answer": "Feature branches, release branches, hotfix branches, etc."
  },
  {
    "question": "851.How will you create a new branch in GIT?",
    "answer": "git branch <branch_name>"
  },
  {
    "question": "852.How will you add a new feature to the main branch?",
    "answer": "Create a feature branch, develop the feature, and then merge it into the main branch."
  },
  {
    "question": "853.What is a pull request in GIT?",
    "answer": "A request to merge changes from one branch into another (often used in collaborative workflows)."
  },
  {
    "question": "854.What is merge conflict in GIT?",
    "answer": "Occurs when Git cannot automatically merge changes from two branches due to conflicting modifications."
  },
  {
    "question": "855.How can we resolve a merge conflict in GIT?",
    "answer": "Manually edit the conflicting files to combine the changes and then commit the result."
  },
  {
    "question": "856.What command will you use to delete a branch?",
    "answer": "git branch -d <branch_name>"
  },
  {
    "question": "857.What command will you use to delete a branch that has unmerged changes?",
    "answer": "git branch -D <branch_name>"
  },
  {
    "question": "858.What is the alternative command to merging in GIT?",
    "answer": "Rebasing."
  },
  {
    "question": "859.What is Rebasing in GIT?",
    "answer": "Moving a branch to a new base commit, rewriting its history."
  },
  {
    "question": "860.What is the ‘Golden Rule of Rebasing’ in GIT?",
    "answer": "Don't rebase public branches (branches shared with others)."
  },
  {
    "question": "861.Why do we use Interactive Rebasing in place of Auto Rebasing?",
    "answer": "To have more control over the rebasing process (squash commits, edit messages, etc.)."
  },
  {
    "question": "862.What is the command for Rebasing in Git?",
    "answer": "git rebase <branch_name>"
  },
  {
    "question": "863.What is the main difference between git clone and git remote?",
    "answer": "git clone creates a local copy of a remote repository. git remote manages connections to remote repositories."
  },
  {
    "question": "864.What is GIT version control?",
    "answer": "A system for tracking changes to files over time."
  },
  {
    "question": "865.What GUI do you use for working on GIT?",
    "answer": " (Your personal preference, e.g., GitKraken, Sourcetree, command line)."
  },
  {
    "question": "866.What is the use of git diff command in GIT?",
    "answer": "Shows changes between commits, branches, etc."
  },
  {
    "question": "867.What is git rerere?",
    "answer": "Record and reuse resolution of merge conflicts."
  },
  {
    "question": "868.What are the three most popular version of git diff command?",
    "answer": "git diff, git diff --cached, git diff HEAD"
  },
  {
    "question": "869.What is the use of git status command?",
    "answer": "Shows the state of the working directory and staging area."
  },
  {
    "question": "870.What is the main difference between git diff and git status?",
    "answer": "git status shows the overall state. git diff shows specific changes."
  },
  {
    "question": "871.What is the use of git rm command in GIT?",
    "answer": "Removes files from the working directory and the index."
  },
  {
    "question": "872.What is the command to apply a stash?",
    "answer": "git stash apply"
  },
  {
    "question": "873.Why do we use git log command?",
    "answer": "To view the commit history of a repository."
  },
  {
    "question": "874.Why do we need git add command in GIT?",
    "answer": "To stage changes for commit."
  },
  {
    "question": "875.Why do we use git reset command?",
    "answer": "To unstage changes or move the HEAD to a previous commit."
  },
  {
    "question": "876.What does a commit object contain?",
    "answer": "Changes, author, committer, message, pointers to parent commits."
  },
  {
    "question": "877.How can we convert git log messages to a different format?",
    "answer": "Using git log --format=<format>"
  },
  {
    "question": "878.What are the programming languages in which git hooks can be written?",
    "answer": "Any scripting language (Shell, Python, Perl, etc.)."
  },
  {
    "question": "879.What is a commit message in GIT?",
    "answer": "A description of the changes included in a commit."
  },
  {
    "question": "880.How GIT protects the code in a repository?",
    "answer": "Using SHA-1 hashes to ensure data integrity and prevent tampering."
  },
  {
    "question": "881.How GIT provides flexibility in version control?",
    "answer": "Branching, merging, rebasing, staging area."
  },
  {
    "question": "882.How can we change a commit message in GIT?",
    "answer": "git commit --amend (for the last commit) or git rebase -i (for older commits)."
  },
  {
    "question": "883.Why is it advisable to create an additional commit instead of amending an existing commit?",
    "answer": "Amending rewrites history, which can cause problems if the commit has already been pushed."
  },
  {
    "question": "884.What is a bare repository in GIT?",
    "answer": "A repository without a working directory (used for sharing)."
  },
  {
    "question": "885.How do we put a local repository on GitHub server?",
    "answer": "Create a repository on GitHub, then git remote add origin <URL> and git push -u origin master."
  },
  {
    "question": "886.How will you delete a branch in GIT?",
    "answer": "git branch -d <branch_name> (if merged) or git branch -D <branch_name> (if not merged)."
  },
  {
    "question": "887.How can we set up a Git repository to run code sanity checks and UAT tests just before a commit?",
    "answer": "Using pre-commit hooks."
  },
  {
    "question": "888.How can we revert a commit that was pushed earlier and is public now?",
    "answer": "git revert <commit_hash> (creates a new commit that undoes the changes)."
  },
  {
    "question": "889.In GIT, how will you compress last n commits into a single commit?",
    "answer": "Using interactive rebase (git rebase -i HEAD~n) and squash the commits."
  },
  {
    "question": "890.How will you switch from one branch to a new branch in GIT?",
    "answer": "git checkout <branch_name>"
  },
  {
    "question": "891.How can we clean unwanted files from our working directory in GIT?",
    "answer": "git clean -f (careful with this command!)."
  },
  {
    "question": "892.What is the purpose of git tag command?",
    "answer": "Marks a specific point in the repository history (e.g., for releases)."
  },
  {
    "question": "893.What is cherry-pick in GIT?",
    "answer": "Applying a specific commit from one branch to another."
  },
  {
    "question": "894.What is shortlog in GIT?",
    "answer": "Summarizes the git log output by author."
  },
  {
    "question": "895.How can you find the names of files that were changed in a specific commit?",
    "answer": "git show --pretty=\"\" --name-only <commit_hash>"
  },
  {
    "question": "896.How can we attach an automated script to run on the event of a new commit by push command?",
    "answer": "Using pre-push hook."
  },
  {
    "question": "897.What is the difference between pre-receive, update and post-receive hooks in GIT?",
    "answer": "pre-receive: Runs before any updates are made. update: Runs for each branch being updated. post-receive: Runs after updates are made."
  },
  {
    "question": "898.Do we have to store Scripts for GIT hooks within same repository?",
    "answer": "Yes, they are typically stored in the .git/hooks directory of the repository."
  },
  {
    "question": "899.How can we determine the commit that is the source of a bug in GIT?",
    "answer": "Using git bisect (binary search)."
  },
  {
    "question": "900.How can we see differences between two commits in GIT?",
    "answer": "git diff <commit_hash1> <commit_hash2>"
  },
  {
    "question": "901.What are the different ways to identify a commit in GIT?",
    "answer": "SHA-1 hash, branch name, tag name, relative references (HEAD^, HEAD~2)."
  },
  {
    "question": "902.When we run git branch <branchname>, how does GIT know the SHA-1 of the last commit?",
    "answer": "It uses the SHA-1 of the commit that HEAD is currently pointing to."
  },
  {
    "question": "903.What are the different types of Tags you can create in GIT?",
    "answer": "Annotated tags (stored as full objects) and lightweight tags (just pointers to commits)."
  },
  {
    "question": "904.How can we rename a remote repository?",
    "answer": "git remote rename <old_name> <new_name>"
  },
  {
    "question": "905.Some people use git checkout and some use git co for checkout. How is that possible?",
    "answer": "git co is a shorthand alias defined in the user's Git configuration."
  },
  {
    "question": "906.How can we see the last commit on each of our branch in GIT?",
    "answer": "git branch -v"
  },
  {
    "question": "907.Is origin a special branch in GIT?",
    "answer": "No, it's just a conventional name for the default remote repository."
  },
  {
    "question": "908.How can we configure GIT to not ask for password every time?",
    "answer": "Using SSH keys or credential caching."
  },
  {
    "question": "909.What are the four major protocols used by GIT for data transfer?",
    "answer": "Local, SSH, Git, and HTTP."
  },
  {
    "question": "910.What is GIT protocol?",
    "answer": "A special daemon which comes standard with Git; listens on port 9418. Uses plain unencrypted sockets."
  },
  {
    "question": "911. How can we work on a project where we do not have push access?",
    "answer": "Fork the repository, make changes in your fork, and submit a pull request."
  },
  {
    "question": "912.What is git grep?",
    "answer": "A command to search for patterns within the tracked files in a Git repository."
  },
  {
    "question": "913.How can your reorder commits in GIT?",
    "answer": "Using interactive rebase (git rebase -i)."
  },
  {
    "question": "914.How will you split a commit into multiple commits?",
    "answer": "Using git reset HEAD^ and then staging and committing changes in smaller chunks."
  },
  {
    "question": "915.What is filter-branch in GIT?",
    "answer": "A powerful command for rewriting large parts of a repository's history (use with caution!)."
  },
  {
    "question": "916.What are the three main trees maintained by GIT?",
    "answer": "Working directory, staging area (index), and HEAD (repository)."
  },
  {
    "question": "917.What are the three main steps of working GIT?",
    "answer": "Modify, Stage, Commit."
  },
  {
    "question": "918.What are ours and theirs merge options in GIT?",
    "answer": "Ours: Keep changes from the current branch. Theirs: Keep changes from the other branch."
  },
  {
    "question": "919.How can we ignore merge conflicts due to Whitespace?",
    "answer": "Using git merge -Xignore-all-space or git config --global merge.renormalize true"
  },
  {
    "question": "920.What is git blame?",
    "answer": "Shows who last modified each line of a file and when."
  },
  {
    "question": "921.What is a submodule in GIT?",
    "answer": "A reference to another Git repository within your repository."
  },
  {
    "question": "922.What do you know about AWS Region?",
    "answer": "A geographical area with multiple Availability Zones (data centers)."
  },
  {
    "question": "923.What are the important components of IAM?",
    "answer": "Users, Groups, Roles, Policies."
  },
  {
    "question": "924.What are the important points about AWS IAM?",
    "answer": "Control access to AWS resources, use least privilege, enable MFA, and monitor activity."
  },
  {
    "question": "925.What are the important features of Amazon S3?",
    "answer": "Scalability, durability, security, and cost-effectiveness for object storage."
  },
  {
    "question": "926.What is the scale of durability in Amazon S3?",
    "answer": "99.999999999% (11 9s)."
  },
  {
    "question": "927.What are the Consistency levels supported by Amazon S3?",
    "answer": "Read after write consistency for new objects, eventual consistency for overwrite PUTS and DELETES."
  },
  {
    "question": "928.What are the different tiers in Amazon S3 storage?",
    "answer": "S3 Standard, S3 Intelligent-Tiering, S3 Standard-IA, S3 One Zone-IA, S3 Glacier, S3 Glacier Deep Archive."
  },
  {
    "question": "929.How will you upload a file greater than 100 megabytes in Amazon S3?",
    "answer": "Using multipart upload."
  },
  {
    "question": "930.What happens to an Object when we delete it from Amazon S3?",
    "answer": "It's marked for deletion and eventually removed (but may still be restorable if versioning is enabled)."
  },
  {
    "question": "931.What is the use of Amazon Glacier?",
    "answer": "Low-cost archive storage for infrequently accessed data."
  },
  {
    "question": "932.Can we disable versioning on a version-enabled bucket in Amazon S3?",
    "answer": "You can suspend it, but not completely disable it."
  },
  {
    "question": "933.What are the use cases of Cross Region Replication Amazon S3?",
    "answer": "Disaster recovery, compliance, minimizing latency."
  },
  {
    "question": "934.Can we do Cross Region replication in Amazon S3 without enabling versioning on a bucket?",
    "answer": "No, versioning must be enabled."
  },
  {
    "question": "935.What are the different types of actions in Object Lifecycle Management in Amazon S3?",
    "answer": "Transition to different storage classes, expiration."
  },
  {
    "question": "936.How do we get higher performance in our application by using Amazon CloudFront?",
    "answer": "Caching content at edge locations, reducing latency for users."
  },
  {
    "question": "937.What is the mechanism behind Regional Edge Cache in Amazon CloudFront?",
    "answer": "CloudFront caches content in regional edge caches before forwarding requests to the origin."
  },
  {
    "question": "938.What are the benefits of Streaming content?",
    "answer": "Improved user experience (start playback before the entire file is downloaded)."
  },
  {
    "question": "939.What is Lambda@Edge in AWS?",
    "answer": "Run Lambda functions at CloudFront edge locations to customize content delivery."
  },
  {
    "question": "940.What are the different types of events triggered by Amazon CloudFront?",
    "answer": "Viewer request, viewer response, origin request, origin response."
  },
  {
    "question": "941.What is Geo Targeting in Amazon CloudFront?",
    "answer": "Serving different content based on the viewer's geographic location."
  },
  {
    "question": "942.What are the main features of Amazon CloudFront?",
    "answer": "CDN, caching, security, custom SSL certificates, Lambda@Edge."
  },
  {
    "question": "943.What are the security mechanisms available in Amazon S3?",
    "answer": "IAM policies, bucket policies, ACLs, encryption (at rest and in transit)."
  },
  {
    "question": "944.What are the benefits of Cloud Computing?",
    "answer": "Scalability, cost-effectiveness, flexibility, agility, and global reach."
  },
  {
    "question": "945.What is On-demand computing in Cloud Computing?",
    "answer": "Provisioning resources as needed, paying only for what you use."
  },
  {
    "question": "946.What are the different layers of Cloud computing?",
    "answer": "IaaS, PaaS, SaaS."
  },
  {
    "question": "947.What resources are provided by Infrastructure as a Service (IAAS) provider?",
    "answer": "Virtual machines, storage, networks, and other infrastructure components."
  },
  {
    "question": "948.What is the benefit of Platform as a Service?",
    "answer": "Simplified development and deployment, reduced operational overhead."
  },
  {
    "question": "949.What are the main advantages of PaaS?",
    "answer": "Faster development, lower costs, and automatic scaling."
  },
  {
    "question": "950.What is the main disadvantage of PaaS?",
    "answer": "Less control over the underlying infrastructure."
  },
  {
    "question": "951.What are the different deployment models in Cloud computing?",
    "answer": "Public, private, hybrid, and community clouds."
  },
  {
    "question": "952.What is the difference between Scalability and Elasticity?",
    "answer": "Scalability: The ability to handle increased load. Elasticity: The ability to automatically scale resources up or down based on demand."
  },
  {
    "question": "953.What is Software as a Service?",
    "answer": "Delivering software applications over the Internet (e.g., Salesforce, Google Apps)."
  },
  {
    "question": "954.What are the different types of Datacenters in Cloud computing?",
    "answer": "Tier 1, Tier 2, Tier 3, Tier 4 (based on redundancy and availability)."
  },
  {
    "question": "955.Explain the various modes of Software as a Service (SaaS) cloud environment?",
    "answer": "Examples: Public SaaS, Private SaaS, Hybrid SaaS."
  },
  {
    "question": "956.What are the important things to care about in Security in a cloud environment?",
    "answer": "Data encryption, access control, identity management, and compliance."
  },
  {
    "question": "957.Why do we use API in cloud computing environment?",
    "answer": "To enable communication and integration between different cloud services and applications."
  },
  {
    "question": "958.What are the different areas of Security Management in cloud?",
    "answer": "Data security, network security, application security, and identity and access management."
  },
  {
    "question": "959.What are the main cost factors of cloud based data center?",
    "answer": "Compute, storage, network, and data transfer."
  },
  {
    "question": "960.How can we measure the cloud-based services?",
    "answer": "Monitoring resource utilization, performance metrics, and cost."
  },
  {
    "question": "961.How a traditional datacenter is different from a cloud environment?",
    "answer": "Traditional: On-premise, fixed resources. Cloud: On-demand, scalable resources."
  },
  {
    "question": "962.How will you optimize availability of your application in a Cloud environment?",
    "answer": "Using redundancy, load balancing, and automated failover."
  },
  {
    "question": "963.What are the requirements for implementing IaaS strategy in Cloud?",
    "answer": "Virtualization, automation, and a self-service portal."
  },
  {
    "question": "964.What is Docker?",
    "answer": "A platform for building, shipping, and running applications in containers."
  },
  {
    "question": "965.What is the difference between Docker image and Docker container?",
    "answer": "Image: Read-only template. Container: Runnable instance of an image."
  },
  {
    "question": "966.How will you remove an image from Docker?",
    "answer": "docker rmi <image_id>"
  },
  {
    "question": "967.How is a Docker container different from a hypervisor?",
    "answer": "Docker: OS-level virtualization, shares kernel. Hypervisor: Hardware virtualization, full OS isolation."
  },
  {
    "question": "968.Can we write compose file in json file instead of yaml?",
    "answer": "Yes, Docker Compose supports both YAML and JSON format."
  },
  {
    "question": "969.Can we run multiple apps on one server with Docker?",
    "answer": "Yes, by containerizing each app."
  },
  {
    "question": "970.What are the common use cases of Docker?",
    "answer": "Application isolation, microservices, CI/CD, and development environment consistency."
  },
  {
    "question": "971.What are the main features of Docker-compose?",
    "answer": "Defines and manages multi-container applications."
  },
  {
    "question": "972.What is the most popular use of Docker?",
    "answer": "Containerizing applications for portability and scalability."
  },
  {
    "question": "973.What is the role of open source development in the popularity of Docker?",
    "answer": "Open-source allows for community contributions, innovation, and wide adoption."
  },
  {
    "question": "974.How will you remove all files in current directory? Including the files that are two levels down in a sub-directory.",
    "answer": "rm -r *"
  },
  {
    "question": "975.What is the difference between the –v and –x options in Bash shell scripts?",
    "answer": "-v: verbose, prints each command. -x: traces execution, printing commands and their arguments."
  },
  {
    "question": "976.What is a Filter in Unix command?",
    "answer": "A command that reads input, transforms it, and writes it to output (e.g., grep, sed, awk)."
  },
  {
    "question": "977.What is Kernel in Unix operating system?",
    "answer": "The core of the OS, responsible for managing hardware resources."
  },
  {
    "question": "978.What is a Shell in Unix OS?",
    "answer": "A command-line interpreter that allows users to interact with the kernel."
  },
  {
    "question": "979.What are the different shells in Unix that you know about?",
    "answer": "Bash, Zsh, Ksh, Csh."
  },
  {
    "question": "980.What is the first character of the output in ls –l command ?",
    "answer": "File type (e.g., d for directory, - for regular file)."
  },
  {
    "question": "981.What is the difference between Multi-tasking and Multi-user environment?",
    "answer": "Multitasking: Single user running multiple programs. Multi-user: Multiple users accessing the system concurrently."
  },
  {
    "question": "982.What is Command Substitution in Unix?",
    "answer": "Replacing a command with its output (e.g., `echo $(date)`)."
  },
  {
    "question": "983.What is an Inode in Unix?",
    "answer": "Data structure storing metadata about a file (permissions, size, timestamps)."
  },
  {
    "question": "984.What is the difference between absolute path and relative path in Unix file system?",
    "answer": "Absolute: Starts from root directory (/). Relative: Starts from the current directory."
  },
  {
    "question": "985.What are the main responsibilities of a Unix Shell?",
    "answer": "Command interpretation, program execution, and environment management."
  },
  {
    "question": "986.What is a Shell variable?",
    "answer": "A named storage location within the shell environment."
  },
  {
    "question": "987.What is a Microservice?",
    "answer": "A small, independently deployable service that performs a specific business function."
  },
  {
    "question": "988.What are the benefits of Microservices architecture?",
    "answer": "Scalability, independent deployment, technology diversity, and fault isolation."
  },
  {
    "question": "989.What is the role of architect in Microservices architecture?",
    "answer": "Defines overall architecture, standards, and guiding principles."
  },
  {
    "question": "990.What is the advantage of Microservices architecture over Service Oriented Architecture (SOA)?",
    "answer": "Smaller size, independent deployment, and decentralized governance."
  },
  {
    "question": "991.Is it a good idea to provide a Tailored Service Template for Microservices development in an organization?",
    "answer": "Yes, it promotes consistency and reduces boilerplate code."
  },
  {
    "question": "992.What are the disadvantages of using Shared libraries approach to decompose a monolith application?",
    "answer": "Tight coupling, versioning issues, and deployment dependencies."
  },
  {
    "question": "993.What are the characteristics of a Good Microservice?",
    "answer": "Single responsibility, autonomous, independently deployable, and well-defined API."
  },
  {
    "question": "994.What is Bounded Context?",
    "answer": "A specific responsibility around a domain model. Where that model is valid and consistent"
  },
  {
    "question": "995.What are the points to remember during integration of Microservices?",
    "answer": "Loose coupling, asynchronous communication, and well-defined APIs."
  },
  {
    "question": "996.Is it a good idea for Microservices to share a common database?",
    "answer": "Generally not, as it can create tight coupling and contention."
  },
  {
    "question": "997.What is the preferred type of communication between Microservices? Synchronous or Asynchronous?",
    "answer": "Asynchronous communication promotes loose coupling and scalability."
  },
  {
    "question": "998.What is the difference between Orchestration and Choreography in Microservices architecture?",
    "answer": "Orchestration: Centralized control. Choreography: Decentralized, event-driven coordination."
  },
  {
    "question": "999.What are the issues in using REST over HTTP for Microservices?",
    "answer": "Coupling to HTTP, potential performance overhead."
  },
  {
    "question": "1000.Can we create Microservices as State Machines?",
    "answer": "Yes, it can be helpful for managing complex workflows and transitions."
  }
]
 


