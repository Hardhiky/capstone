[
    {
        "question": "1. What is __init__?",
        "category": "Freshers",
        "expected_answer": "__init__ is a contructor method in Python and is automatically called to allocate memory when a new object/instance is created. All classes have a __init__ method associated with them. It helps in distinguishing methods and attributes of a class from local variables.\n# class definition\nclass Student:\n   def __init__(self, fname, lname, age, section):\n       self.firstname = fname\n       self.lastname = lname\n       self.age = age\n       self.section = section\n# creating a new object\nstu1 = Student(\"Sara\", \"Ansh\", 22, \"A2\")",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "__init__",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "2. What is the difference between Python Arrays and lists?",
        "category": "Freshers",
        "expected_answer": "Arrays in python can only contain elements of same data types i.e., data type of array should be homogeneous. It is a thin wrapper around C language arrays and consumes far less memory than lists.\nLists in python can contain elements of different data types i.e., data type of lists can be heterogeneous. It has the disadvantage of consuming large memory.\nimport array\na = array.array('i', [1, 2, 3])\nfor i in a:\n    print(i, end=' ')    #OUTPUT: 1 2 3\na = array.array('i', [1, 2, 'string'])    #OUTPUT: TypeError: an integer is required (got type str)\na = [1, 2, 'string']\nfor i in a:\n   print(i, end=' ')    #OUTPUT: 1 2 string",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "3. Explain how can you make a Python Script executable on Unix?",
        "category": "Freshers",
        "expected_answer": "Script file must begin with #!/usr/bin/env python",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "#!/usr/bin/env python",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "",
        "category": "Freshers",
        "expected_answer": "",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "4. What is slicing in Python?",
        "category": "Freshers",
        "expected_answer": "As the name suggests, \u2018slicing\u2019 is taking parts of.\nSyntax for slicing is [start : stop : step]\nstart is the starting index from where to slice a list or tuple\nstop is the ending index or where to sop.\nstep is the number of steps to jump.\nDefault value for start is 0, stop is number of items, step is 1.\nSlicing can be done on strings, arrays, lists, and tuples.\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(numbers[1 : : 2])  #output : [2, 4, 6, 8, 10]",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "[start : stop : step]",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "start",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "stop",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "step",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "start",
        "category": "Freshers",
        "expected_answer": "stop",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "stop",
        "category": "Freshers",
        "expected_answer": "step",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "step",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "strings, arrays, lists",
        "category": "Freshers",
        "expected_answer": "tuples",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "tuples",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "5. What is docstring in Python?",
        "category": "Freshers",
        "expected_answer": "Documentation string or docstring is a multiline string used to document a specific code segment.\nThe docstring should describe what the function or method does.",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "6. What are unit tests in Python?",
        "category": "Freshers",
        "expected_answer": "Unit test is a unit testing framework of Python.\nUnit testing means testing different components of software separately. Can you think about why unit testing is important? Imagine a scenario, you are building software that uses three components namely A, B, and C. Now, suppose your software breaks at a point time. How will you find which component was responsible for breaking the software? Maybe it was component A that failed, which in turn failed component B, and this actually failed the software. There can be many such combinations.\nThis is why it is necessary to test each and every component properly so that we know which component might be highly responsible for the failure of the software.",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "7. What is break, continue and pass in Python?",
        "category": "Freshers",
        "expected_answer": "Break The break statement terminates the loop immediately and the control flows to the statement after the body of the loop.\nContinue The continue statement terminates the current iteration of the statement, skips the rest of the code in the current iteration and the control flows to the next iteration of the loop.\nPass As explained above, the pass keyword in Python is generally used to fill up empty blocks and is similar to an empty statement represented by a semi-colon in languages such as Java, C++, Javascript, etc.\npat = [1, 3, 2, 1, 2, 3, 1, 0, 1, 3]\nfor p in pat:\n   pass\n   if (p == 0):\n       current = p\n       break\n   elif (p % 2 == 0):\n       continue\n   print(p)    # output => 1 3 1 3 1\nprint(current)    # output => 0",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "8. What is the use of self in Python?",
        "category": "Freshers",
        "expected_answer": "Self is used to represent the instance of the class. With this keyword, you can access the attributes and methods of the class in python. It binds the attributes with the given arguments. self is used in different places and often thought to be a keyword. But unlike in C++, self is not a keyword in Python.",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "Self",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "9. What are global, protected and private attributes in Python?",
        "category": "Freshers",
        "expected_answer": "Global variables are public variables that are defined in the global scope. To use the variable in the global scope inside a function, we use the global keyword.\nProtected attributes are attributes defined with an underscore prefixed to their identifier eg. _sara. They can still be accessed and modified from outside the class they are defined in but a responsible developer should refrain from doing so.\nPrivate attributes are attributes with double underscore prefixed to their identifier eg. __ansh. They cannot be accessed or modified from the outside directly and will result in an AttributeError if such an attempt is made.",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "Global",
        "category": "Freshers",
        "expected_answer": "global",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "Protected",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "Private",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "10. What are modules and packages in Python?",
        "category": "Freshers",
        "expected_answer": "Python packages and Python modules are two mechanisms that allow for modular programming in Python. Modularizing has several advantages -\nSimplicity: Working on a single module helps you focus on a relatively small portion of the problem at hand. This makes development easier and less error-prone.\nMaintainability: Modules are designed to enforce logical boundaries between different problem domains. If they are written in a manner that reduces interdependency, it is less likely that modifications in a module might impact other parts of the program.\nReusability: Functions defined in a module can be easily reused by other parts of the application.\nScoping: Modules typically define a separate namespace, which helps avoid confusion between identifiers from other parts of the program.\nModules, in general, are simply Python files with a .py extension and can have a set of functions, classes, or variables defined and implemented. They can be imported and initialized once using the import statement. If partial functionality is needed, import the requisite classes or functions using from foo import bar.\nPackages allow for hierarchial structuring of the module namespace using dot notation. As, modules help avoid clashes between global variable names, in a similar manner, packages help avoid clashes between module names.\nCreating a package is easy since it makes use of the system's inherent file structure. So just stuff the modules into a folder and there you have it, the folder name as the package name. Importing a module or its contents from this package requires the package name as prefix to the module name joined by a dot.\nNote: You can technically import the package as well, but alas, it doesn't import the modules within the package to the local namespace, thus, it is practically useless.",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "modular programming",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "Simplicity",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "Maintainability",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "Reusability",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "Scoping",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "Modules",
        "category": "Freshers",
        "expected_answer": "import",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "Packages",
        "category": "Freshers",
        "expected_answer": "dot notation",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "dot notation",
        "category": "Freshers",
        "expected_answer": "modules",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "modules",
        "category": "Freshers",
        "expected_answer": "packages",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "packages",
        "category": "Freshers",
        "expected_answer": "",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "Note:",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "11. What is pass in Python?",
        "category": "Freshers",
        "expected_answer": "The pass keyword represents a null operation in Python. It is generally used for the purpose of filling up empty blocks of code which may execute during runtime but has yet to be written. Without the pass statement in the following code, we may run into some errors during code execution.\ndef myEmptyFunc():\n   # do nothing\n   pass\nmyEmptyFunc()    # nothing happens\n## Without the pass keyword\n# File \"<stdin>\", line 3\n# IndentationError: expected an indented block",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "pass",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "12. What are the common built-in data types in Python?",
        "category": "Freshers",
        "expected_answer": "There are several built-in data types in Python. Although, Python doesn't require data types to be defined explicitly during variable declarations type errors are likely to occur if the knowledge of data types and their compatibility with each other are neglected. Python provides type() and isinstance() functions to check the type of these variables. These data types can be grouped into the following categories-\nNone Type:\nNone keyword represents the null values in Python. Boolean equality operation can be performed using these NoneType objects.\nClass Name Description\nNoneType Represents the NULL values in Python.\nNumeric Types:\nThere are three distinct numeric types - integers, floating-point numbers, and complex numbers. Additionally, booleans are a sub-type of integers.\nClass Name Description\nint Stores integer literals including hex, octal and binary numbers as integers\nfloat Stores literals containing decimal values and/or exponent signs as floating-point numbers\ncomplex Stores complex numbers in the form (A + Bj) and has attributes: real and imag\nbool Stores boolean value (True or False).\nNote: The standard library also includes fractions to store rational numbers and decimal to store floating-point numbers with user-defined precision.\nSequence Types:\nAccording to Python Docs, there are three basic Sequence Types - lists, tuples, and range objects. Sequence types have the in and not in operators defined for their traversing their elements. These operators share the same priority as the comparison operations.\nClass Name Description\nlist Mutable sequence used to store collection of items.\ntuple Immutable sequence used to store collection of items.\nrange Represents an immutable sequence of numbers generated during execution.\nstr Immutable sequence of Unicode code points to store textual data.\nNote: The standard library also includes additional types for processing:\n1. Binary data such as bytearray bytes memoryview , and\n2. Text strings such as str.\nMapping Types:\nA mapping object can map hashable values to random objects in Python. Mappings objects are mutable and there is currently only one standard mapping type, the dictionary.\nClass Name  Description\ndict Stores comma-separated list of key: value pairs\nSet Types:\nCurrently, Python has two built-in set types - set and frozenset. set type is mutable and supports methods like add() and remove(). frozenset type is immutable and can't be modified after creation.\nClass Name Description\nset Mutable unordered collection of distinct hashable objects.\nfrozenset Immutable collection of distinct hashable objects.\nNote: set is mutable and thus cannot be used as key for a dictionary. On the other hand, frozenset is immutable and thus, hashable, and can be used as a dictionary key or as an element of another set.\nModules:\nModule is an additional built-in type supported by the Python Interpreter. It supports one special operation, i.e., attribute access: mymod.myobj, where mymod is a module and myobj references a name defined in m's symbol table. The module's symbol table resides in a very special attribute of the module __dict__, but direct assignment to this module is neither possible nor recommended.\nCallable Types:\nCallable types are the types to which function call can be applied. They can be user-defined functions, instance methods, generator functions, and some other built-in functions, methods and classes.\nRefer to the documentation at docs.python.org for a detailed view of the callable types.",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "None Type:",
        "category": "Freshers",
        "expected_answer": "",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "NULL",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "Numeric Types:",
        "category": "Freshers",
        "expected_answer": "",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "integers, floating-point numbers",
        "category": "Freshers",
        "expected_answer": "complex numbers",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "complex numbers",
        "category": "Freshers",
        "expected_answer": "booleans",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "booleans",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "Note:",
        "category": "Freshers",
        "expected_answer": "fractions",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "fractions",
        "category": "Freshers",
        "expected_answer": "decimal",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "decimal",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "Sequence Types:",
        "category": "Freshers",
        "expected_answer": "",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "lists, tuples,",
        "category": "Freshers",
        "expected_answer": "range",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "range",
        "category": "Freshers",
        "expected_answer": "in",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "Note:",
        "category": "Freshers",
        "expected_answer": "",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "Binary data",
        "category": "Freshers",
        "expected_answer": "bytearray bytes",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "Text strings",
        "category": "Freshers",
        "expected_answer": "str",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "Mapping Types:",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "dictionary",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "key: value",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "Set Types:",
        "category": "Freshers",
        "expected_answer": "",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "set",
        "category": "Freshers",
        "expected_answer": "frozenset",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "frozenset",
        "category": "Freshers",
        "expected_answer": "set",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "set",
        "category": "Freshers",
        "expected_answer": "add()",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "frozenset",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "Note:",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "Modules:",
        "category": "Freshers",
        "expected_answer": "",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "attribute access",
        "category": "Freshers",
        "expected_answer": "mymod.myobj",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "myobj",
        "category": "Freshers",
        "expected_answer": "__dict__",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "__dict__",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "Callable Types:",
        "category": "Freshers",
        "expected_answer": "",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "user-defined functions, instance methods, generator functions",
        "category": "Freshers",
        "expected_answer": "built-in functions, methods",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "built-in functions, methods",
        "category": "Freshers",
        "expected_answer": "classes",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "classes",
        "category": "Freshers",
        "expected_answer": "",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "callable types",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "13. What are lists and tuples? What is the key difference between the two?",
        "category": "Freshers",
        "expected_answer": "Lists and Tuples are both sequence data types that can store a collection of objects in Python. The objects stored in both sequences can have different data types. Lists are represented with square brackets ['sara', 6, 0.19], while tuples are represented with parantheses ('ansh', 5, 0.97).\nBut what is the real difference between the two? The key difference between the two is that while lists are mutable, tuples on the other hand are immutable objects. This means that lists can be modified, appended or sliced on the go but tuples remain constant and cannot be modified in any manner. You can run the following example on Python IDLE to confirm the difference:\nmy_tuple = ('sara', 6, 5, 0.97)\nmy_list = ['sara', 6, 5, 0.97]\nprint(my_tuple[0])     # output => 'sara'\nprint(my_list[0])     # output => 'sara'\nmy_tuple[0] = 'ansh'    # modifying tuple => throws an error\nmy_list[0] = 'ansh'    # modifying list => list modified\nprint(my_tuple[0])     # output => 'sara'\nprint(my_list[0])     # output => 'ansh'",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "Lists",
        "category": "Freshers",
        "expected_answer": "Tuples",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "Tuples",
        "category": "Freshers",
        "expected_answer": "equence data types",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "equence data types",
        "category": "Freshers",
        "expected_answer": "different data types",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "different data types",
        "category": "Freshers",
        "expected_answer": "square brackets",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "square brackets",
        "category": "Freshers",
        "expected_answer": "['sara', 6, 0.19]",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "parantheses",
        "category": "Freshers",
        "expected_answer": "('ansh', 5, 0.97)",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "lists are mutable",
        "category": "Freshers",
        "expected_answer": "tuples",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "tuples",
        "category": "Freshers",
        "expected_answer": "immutable",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "immutable",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "14. What is Scope in Python?",
        "category": "Freshers",
        "expected_answer": "Every object in Python functions within a scope. A scope is a block of code where an object in Python remains relevant. Namespaces uniquely identify all the objects inside a program. However, these namespaces also have a scope defined for them where you could use their objects without any prefix. A few examples of scope created during code execution in Python are as follows:\nA local scope refers to the local objects available in the current function.\nA global scope refers to the objects available throughout the code execution since their inception.\nA module-level scope refers to the global objects of the current module accessible in the program.\nAn outermost scope refers to all the built-in names callable in the program. The objects in this scope are searched last to find the name referenced.\nNote: Local scope objects can be synced with global scope objects using keywords such as global.",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "local scope",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "global scope",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "module-level scope",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "outermost scope",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "Note:",
        "category": "Freshers",
        "expected_answer": "global",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "global",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "15. What is PEP 8 and why is it important?",
        "category": "Freshers",
        "expected_answer": "PEP stands for Python Enhancement Proposal. A PEP is an official design document providing information to the Python community, or describing a new feature for Python or its processes. PEP 8 is especially important since it documents the style guidelines for Python Code. Apparently contributing to the Python open-source community requires you to follow these style guidelines sincerely and strictly.",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "Python Enhancement Proposal",
        "category": "Freshers",
        "expected_answer": "PEP 8",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "PEP 8",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "16. What is an Interpreted language?",
        "category": "Freshers",
        "expected_answer": "An Interpreted language executes its statements line by line. Languages such as Python, Javascript, R, PHP, and Ruby are prime examples of Interpreted languages. Programs written in an interpreted language runs directly from the source code, with no intermediary compilation step.",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "17. What is a dynamically typed language?",
        "category": "Freshers",
        "expected_answer": "Before we understand a dynamically typed language, we should learn about what typing is. Typing refers to type-checking in programming languages. In a strongly-typed language, such as Python, \"1\" + 2 will result in a type error since these languages don't allow for \"type-coercion\" (implicit conversion of data types). On the other hand, a weakly-typed language, such as Javascript, will simply output \"12\" as result.\nType-checking can be done at two stages -\nStatic - Data Types are checked before execution.\nDynamic - Data Types are checked during execution.\nPython is an interpreted language, executes each statement line by line and thus type-checking is done on the fly, during execution. Hence, Python is a Dynamically Typed Language.",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "Typing",
        "category": "Freshers",
        "expected_answer": "strongly-typed",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "strongly-typed",
        "category": "Freshers",
        "expected_answer": "\"1\" + 2",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "\"1\" + 2",
        "category": "Freshers",
        "expected_answer": "weakly-typed",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "weakly-typed",
        "category": "Freshers",
        "expected_answer": "\"12\"",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "\"12\"",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "Static",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "Dynamic",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "18. What is Python? What are the benefits of using Python",
        "category": "Freshers",
        "expected_answer": "Python is a high-level, interpreted, general-purpose programming language. Being a general-purpose language, it can be used to build almost any type of application with the right tools/libraries. Additionally, python supports objects, modules, threads, exception-handling, and automatic memory management which help in modelling real-world problems and building applications to solve these problems.\nBenefits of using Python:\nPython is a general-purpose programming language that has a simple, easy-to-learn syntax that emphasizes readability and therefore reduces the cost of program maintenance. Moreover, the language is capable of scripting, is completely open-source, and supports third-party packages encouraging modularity and code reuse.\nIts high-level data structures, combined with dynamic typing and dynamic binding, attract a huge community of developers for Rapid Application Development and deployment.",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "Benefits of using Python:",
        "category": "Freshers",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "freshers"
        ]
    },
    {
        "question": "1. What are Dict and List comprehensions?",
        "category": "Experienced",
        "expected_answer": "Python comprehensions, like decorators, are syntactic sugar constructs that help build altered and filtered lists, dictionaries, or sets from a given list, dictionary, or set. Using comprehensions saves a lot of time and code that might be considerably more verbose (containing more lines of code). Let's check out some examples, where comprehensions can be truly beneficial:\nPerforming mathematical operations on the entire list\nmy_list = [2, 3, 5, 7, 11]\nsquared_list = [x**2 for x in my_list]    # list comprehension\n# output => [4 , 9 , 25 , 49 , 121]\nsquared_dict = {x:x**2 for x in my_list}    # dict comprehension\n# output => {11: 121, 2: 4 , 3: 9 , 5: 25 , 7: 49}\nPerforming conditional filtering operations on the entire list\nmy_list = [2, 3, 5, 7, 11]\nsquared_list = [x**2 for x in my_list if x%2 != 0]    # list comprehension\n# output => [9 , 25 , 49 , 121]\nsquared_dict = {x:x**2 for x in my_list if x%2 != 0}    # dict comprehension\n# output => {11: 121, 3: 9 , 5: 25 , 7: 49}\nCombining multiple lists into one\nComprehensions allow for multiple iterators and hence, can be used to combine multiple lists into one. \na = [1, 2, 3]\nb = [7, 8, 9]\n[(x + y) for (x,y) in zip(a,b)]  # parallel iterators\n# output => [8, 10, 12]\n[(x,y) for x in a for y in b]    # nested iterators\n# output => [(1, 7), (1, 8), (1, 9), (2, 7), (2, 8), (2, 9), (3, 7), (3, 8), (3, 9)] \nFlattening a multi-dimensional list\nA similar approach of nested iterators (as above) can be applied to flatten a multi-dimensional list or work upon its inner elements. \nmy_list = [[10,20,30],[40,50,60],[70,80,90]]\nflattened = [x for temp in my_list for x in temp]\n# output => [10, 20, 30, 40, 50, 60, 70, 80, 90]\nNote: List comprehensions have the same effect as the map method in other languages. They follow the mathematical set builder notation rather than map and filter functions in Python.",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "syntactic sugar",
        "category": "Experienced",
        "expected_answer": "build altered",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "build altered",
        "category": "Experienced",
        "expected_answer": "filtered lists",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "filtered lists",
        "category": "Experienced",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "Performing mathematical operations on the entire list",
        "category": "Experienced",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "Performing conditional filtering operations on the entire list",
        "category": "Experienced",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "Combining multiple lists into one",
        "category": "Experienced",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "Flattening a multi-dimensional list",
        "category": "Experienced",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "Note:",
        "category": "Experienced",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "2. What are decorators in Python?",
        "category": "Experienced",
        "expected_answer": "Decorators in Python are essentially functions that add functionality to an existing function in Python without changing the structure of the function itself. They are represented the @decorator_name in Python and are called in a bottom-up fashion. For example:\n# decorator function to convert to lowercase\ndef lowercase_decorator(function):\n   def wrapper():\n       func = function()\n       string_lowercase = func.lower()\n       return string_lowercase\n   return wrapper\n# decorator function to split words\ndef splitter_decorator(function):\n   def wrapper():\n       func = function()\n       string_split = func.split()\n       return string_split\n   return wrapper\n@splitter_decorator # this is executed next\n@lowercase_decorator # this is executed first\ndef hello():\n   return 'Hello World'\nhello()   # output => [ 'hello' , 'world' ]\nThe beauty of the decorators lies in the fact that besides adding functionality to the output of the method, they can even accept arguments for functions and can further modify those arguments before passing it to the function itself. The inner nested function, i.e. 'wrapper' function, plays a significant role here. It is implemented to enforce encapsulation and thus, keep itself hidden from the global scope.\n# decorator function to capitalize names\ndef names_decorator(function):\n   def wrapper(arg1, arg2):\n       arg1 = arg1.capitalize()\n       arg2 = arg2.capitalize()\n       string_hello = function(arg1, arg2)\n       return string_hello\n   return wrapper\n@names_decorator\ndef say_hello(name1, name2):\n   return 'Hello ' + name1 + '! Hello ' + name2 + '!'\nsay_hello('sara', 'ansh')   # output => 'Hello Sara! Hello Ansh!'",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "Decorators",
        "category": "Experienced",
        "expected_answer": "@decorator_name",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "accept arguments",
        "category": "Experienced",
        "expected_answer": "inner nested function",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "inner nested function",
        "category": "Experienced",
        "expected_answer": "encapsulation",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "encapsulation",
        "category": "Experienced",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "3. What is Scope Resolution in Python?",
        "category": "Experienced",
        "expected_answer": "Sometimes objects within the same scope have the same name but function differently. In such cases, scope resolution comes into play in Python automatically. A few examples of such behavior are:\nPython modules namely 'math' and 'cmath' have a lot of functions that are common to both of them - log10(), acos(), exp() etc. To resolve this ambiguity, it is necessary to prefix them with their respective module, like math.exp() and cmath.exp().\nConsider the code below, an object temp has been initialized to 10 globally and then to 20 on function call. However, the function call didn't change the value of the temp globally. Here, we can observe that Python draws a clear line between global and local variables, treating their namespaces as separate identities.\ntemp = 10   # global-scope variable\ndef func():\n     temp = 20   # local-scope variable\n     print(temp)\nprint(temp)   # output => 10\nfunc()    # output => 20\nprint(temp)   # output => 10\nThis behavior can be overridden using the global keyword inside the function, as shown in the following example:\ntemp = 10   # global-scope variable\ndef func():\n     global temp\n     temp = 20   # local-scope variable\n     print(temp)\nprint(temp)   # output => 10\nfunc()    # output => 20\nprint(temp)   # output => 20",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "4. What are Python namespaces? Why are they used?",
        "category": "Experienced",
        "expected_answer": "A namespace in Python ensures that object names in a program are unique and can be used without any conflict. Python implements these namespaces as dictionaries with 'name as key' mapped to a corresponding 'object as value'. This allows for multiple namespaces to use the same name and map it to a separate object. A few examples of namespaces are as follows:\nLocal Namespace includes local names inside a function. the namespace is temporarily created for a function call and gets cleared when the function returns.\nGlobal Namespace includes names from various imported packages/ modules that are being used in the current project. This namespace is created when the package is imported in the script and lasts until the execution of the script.\nBuilt-in Namespace includes built-in functions of core Python and built-in names for various types of exceptions.\nThe lifecycle of a namespace depends upon the scope of objects they are mapped to. If the scope of an object ends, the lifecycle of that namespace comes to an end. Hence, it isn't possible to access inner namespace objects from an outer namespace.",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "Local Namespace",
        "category": "Experienced",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "Global Namespace",
        "category": "Experienced",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "Built-in Namespace",
        "category": "Experienced",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "lifecycle of a namespace",
        "category": "Experienced",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "5. How is memory managed in Python?",
        "category": "Experienced",
        "expected_answer": "Memory management in Python is handled by the Python Memory Manager. The memory allocated by the manager is in form of a private heap space dedicated to Python. All Python objects are stored in this heap and being private, it is inaccessible to the programmer. Though, python does provide some core API functions to work upon the private heap space.\nAdditionally, Python has an in-built garbage collection to recycle the unused memory for the private heap space.",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "Python Memory Manager",
        "category": "Experienced",
        "expected_answer": "private heap space",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "private heap space",
        "category": "Experienced",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "6. What is lambda in Python? Why is it used?",
        "category": "Experienced",
        "expected_answer": "Lambda is an anonymous function in Python, that can accept any number of arguments, but can only have a single expression. It is generally used in situations requiring an anonymous function for a short time period. Lambda functions can be used in either of the two ways:\nAssigning lambda functions to a variable:\nmul = lambda a, b : a * b\nprint(mul(2, 5))    # output => 10\nWrapping lambda functions inside another function:\ndef myWrapper(n):\n return lambda a : a * n\nmulFive = myWrapper(5)\nprint(mulFive(2))    # output => 10",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "7. Explain how to delete a file in Python?",
        "category": "Experienced",
        "expected_answer": "Use command os.remove(file_name)\nimport os\nos.remove(\"ChangedFile.csv\")\nprint(\"File Removed!\")",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "os.remove(file_name)",
        "category": "Experienced",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "8. What are negative indexes and why are they used?",
        "category": "Experienced",
        "expected_answer": "Negative indexes are the indexes from the end of the list or tuple or string.\nArr[-1] means the last element of array Arr[]\narr = [1, 2, 3, 4, 5, 6]\n#get the last element\nprint(arr[-1]) #output 6\n#get the second last element\nprint(arr[-2]) #output 5",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "Arr[-1]",
        "category": "Experienced",
        "expected_answer": "Arr[]",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "Arr[]",
        "category": "Experienced",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "9. What does *args and **kwargs mean?",
        "category": "Experienced",
        "expected_answer": "*args\n*args is a special syntax used in the function definition to pass variable-length arguments.\n\u201c*\u201d means variable length and \u201cargs\u201d is the name used by convention. You can use any other.\ndef multiply(a, b, *argv):\n   mul = a * b\n   for num in argv:\n       mul *= num\n   return mul\nprint(multiply(1, 2, 3, 4, 5)) #output: 120\n**kwargs\n**kwargs is a special syntax used in the function definition to pass variable-length keyworded arguments.\nHere, also, \u201ckwargs\u201d is used just by convention. You can use any other name.\nKeyworded argument means a variable that has a name when passed to a function.\nIt is actually a dictionary of the variable names and its value.\ndef tellArguments(**kwargs):\n   for key, value in kwargs.items():\n       print(key + \": \" + value)\ntellArguments(arg1 = \"argument 1\", arg2 = \"argument 2\", arg3 = \"argument 3\")\n#output:\n# arg1: argument 1\n# arg2: argument 2\n# arg3: argument 3",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "*args",
        "category": "Experienced",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "**kwargs",
        "category": "Experienced",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "10. Explain split() and join() functions in Python?",
        "category": "Experienced",
        "expected_answer": "You can use split() function to split a string based on a delimiter to a list of strings.\nYou can use join() function to join a list of strings based on a delimiter to give a single string.\nstring = \"This is a string.\"\nstring_list = string.split(' ') #delimiter is \u2018space\u2019 character or \u2018 \u2018\nprint(string_list) #output: ['This', 'is', 'a', 'string.']\nprint(' '.join(string_list)) #output: This is a string.",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "split()",
        "category": "Experienced",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "join()",
        "category": "Experienced",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "11. What are iterators in Python?",
        "category": "Experienced",
        "expected_answer": "An iterator is an object.\nIt remembers its state i.e., where it is during iteration (see code below to see how)\n__iter__() method initializes an iterator.\nIt has a __next__() method which returns the next item in iteration and points to the next element. Upon reaching the end of iterable object __next__() must return StopIteration exception.\nIt is also self-iterable.\nIterators are objects with which we can iterate over iterable objects like lists, strings, etc.\nclass ArrayList:\n   def __init__(self, number_list):\n       self.numbers = number_list\n   def __iter__(self):\n       self.pos = 0\n       return self\n   def __next__(self):\n       if(self.pos < len(self.numbers)):\n           self.pos += 1\n           return self.numbers[self.pos - 1]\n       else:\n           raise StopIteration\narray_obj = ArrayList([1, 2, 3])\nit = iter(array_obj)\nprint(next(it)) #output: 2\nprint(next(it)) #output: 3\nprint(next(it))\n#Throws Exception\n#Traceback (most recent call last):\n#...\n#StopIteration",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "12. How are arguments passed by value or by reference in python?",
        "category": "Experienced",
        "expected_answer": "Pass by value: Copy of the actual object is passed. Changing the value of the copy of the object will not change the value of the original object.\nPass by reference: Reference to the actual object is passed. Changing the value of the new object will change the value of the original object.\nIn Python, arguments are passed by reference, i.e., reference to the actual object is passed.\ndef appendNumber(arr):\n   arr.append(4)\narr = [1, 2, 3]\nprint(arr)  #Output: => [1, 2, 3]\nappendNumber(arr)\nprint(arr)  #Output: => [1, 2, 3, 4]",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "Pass by value",
        "category": "Experienced",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "Pass by reference",
        "category": "Experienced",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "13. How Python is interpreted?",
        "category": "Experienced",
        "expected_answer": "Python as a language is not interpreted or compiled. Interpreted or compiled is the property of the implementation. Python is a bytecode(set of interpreter readable instructions) interpreted generally.\nSource code is a file with .py extension.\nPython compiles the source code to a set of instructions for a virtual machine. The Python interpreter is an implementation of that virtual machine. This intermediate format is called \u201cbytecode\u201d.\n.py source code is first compiled to give .pyc which is bytecode. This bytecode can be then interpreted by the official CPython or JIT(Just in Time compiler) compiled by PyPy.",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "14. What is the difference between .py and .pyc files?",
        "category": "Experienced",
        "expected_answer": ".py files contain the source code of a program. Whereas, .pyc file contains the bytecode of your program. We get bytecode after compilation of .py file (source code). .pyc files are not created for all the files that you run. It is only created for the files that you import.\nBefore executing a python program python interpreter checks for the compiled files. If the file is present, the virtual machine executes it. If not found, it checks for .py file. If found, compiles it to .pyc file and then python virtual machine executes it.\nHaving .pyc file saves you the compilation time.",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "15. What is the use of help() and dir() functions?",
        "category": "Experienced",
        "expected_answer": "help() function in Python is used to display the documentation of modules, classes, functions, keywords, etc. If no parameter is passed to the help() function, then an interactive help utility is launched on the console.\ndir() function tries to return a valid list of attributes and methods of the object it is called upon. It behaves differently with different objects, as it aims to produce the most relevant data, rather than the complete information.\nFor Modules/Library objects, it returns a list of all attributes, contained in that module.\nFor Class Objects, it returns a list of all valid attributes and base attributes.\nWith no arguments passed, it returns a list of attributes in the current scope.",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "help()",
        "category": "Experienced",
        "expected_answer": "help()",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "help utility",
        "category": "Experienced",
        "expected_answer": "",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "dir()",
        "category": "Experienced",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "16. What is PYTHONPATH in Python?",
        "category": "Experienced",
        "expected_answer": "PYTHONPATH is an environment variable which you can set to add additional directories where Python will look for modules and packages. This is especially useful in maintaining Python libraries that you do not wish to install in the global default location.",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "17. What are generators in Python?",
        "category": "Experienced",
        "expected_answer": "Generators are functions that return an iterable collection of items, one at a time, in a set manner. Generators, in general, are used to create iterators with a different approach. They employ the use of yield keyword rather than return to return a generator object.\nLet's try and build a generator for fibonacci numbers -\n## generate fibonacci numbers upto n\ndef fib(n):\n   p, q = 0, 1\n   while(p < n):\n       yield p\n       p, q = q, p + q\nx = fib(10)    # create generator object \n \n## iterating using __next__(), for Python2, use next()\nx.__next__()    # output => 0\nx.__next__()    # output => 1\nx.__next__()    # output => 1\nx.__next__()    # output => 2\nx.__next__()    # output => 3\nx.__next__()    # output => 5\nx.__next__()    # output => 8\nx.__next__()    # error\n \n## iterating using loop\nfor i in fib(10):\n   print(i)    # output => 0 1 1 2 3 5 8",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "generator",
        "category": "Experienced",
        "expected_answer": "",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "18. What is pickling and unpickling?",
        "category": "Experienced",
        "expected_answer": "Python library offers a feature - serialization out of the box. Serializing an object refers to transforming it into a format that can be stored, so as to be able to deserialize it, later on, to obtain the original object. Here, the pickle module comes into play.\nPickling:\nPickling is the name of the serialization process in Python. Any object in Python can be serialized into a byte stream and dumped as a file in the memory. The process of pickling is compact but pickle objects can be compressed further. Moreover, pickle keeps track of the objects it has serialized and the serialization is portable across versions.\nThe function used for the above process is pickle.dump().\nUnpickling:\nUnpickling is the complete inverse of pickling. It deserializes the byte stream to recreate the objects stored in the file and loads the object to memory.\nThe function used for the above process is pickle.load().\nNote: Python has another, more primitive, serialization module called marshall, which exists primarily to support .pyc files in Python and differs significantly from the pickle.",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "serialization",
        "category": "Experienced",
        "expected_answer": "pickle",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "pickle",
        "category": "Experienced",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "Pickling:",
        "category": "Experienced",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "Unpickling:",
        "category": "Experienced",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "Note:",
        "category": "Experienced",
        "expected_answer": "Python has another, more primitive, serialization module called marshall, which exists primarily to support .pyc files in Python and differs significantly from the pickle.",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "marshall",
        "category": "Experienced",
        "expected_answer": "support .pyc files",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "support .pyc files",
        "category": "Experienced",
        "expected_answer": "differs significantly from the pickle",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "differs significantly from the pickle",
        "category": "Experienced",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "19. What is the difference between xrange and range in Python?",
        "category": "Experienced",
        "expected_answer": "xrange() and range() are quite similar in terms of functionality. They both generate a sequence of integers, with the only difference that range() returns a Python list, whereas, xrange() returns an xrange object.\nSo how does that make a difference? It sure does, because unlike range(), xrange() doesn't generate a static list, it creates the value on the go. This technique is commonly used with an object-type generator and has been termed as \"yielding\".\nYielding is crucial in applications where memory is a constraint. Creating a static list as in range() can lead to a Memory Error in such conditions, while, xrange() can handle it optimally by using just enough memory for the generator (significantly less in comparison).\nfor i in xrange(10):    # numbers from o to 9\n   print i       # output => 0 1 2 3 4 5 6 7 8 9\nfor i in xrange(1,10):    # numbers from 1 to 9\n   print i       # output => 1 2 3 4 5 6 7 8 9\nfor i in xrange(1, 10, 2):    # skip by two for next\n   print i       # output => 1 3 5 7 9\nNote: xrange has been deprecated as of Python 3.x. Now range does exactly the same as what xrange used to do in Python 2.x, since it was way better to use xrange() than the original range() function in Python 2.x.",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "xrange()",
        "category": "Experienced",
        "expected_answer": "range()",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "range()",
        "category": "Experienced",
        "expected_answer": "range()",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "Python list",
        "category": "Experienced",
        "expected_answer": "xrange()",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "xrange object",
        "category": "Experienced",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "So how does that make a difference?",
        "category": "Experienced",
        "expected_answer": "generator",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "generator",
        "category": "Experienced",
        "expected_answer": "yielding",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "yielding",
        "category": "Experienced",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "Yielding",
        "category": "Experienced",
        "expected_answer": "Memory Error",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "Note",
        "category": "Experienced",
        "expected_answer": "xrange",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "xrange",
        "category": "Experienced",
        "expected_answer": "deprecated",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "deprecated",
        "category": "Experienced",
        "expected_answer": "Python 3.x",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "Python 3.x",
        "category": "Experienced",
        "expected_answer": "range",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "Python 2.x",
        "category": "Experienced",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "20. How do you copy an object in Python?",
        "category": "Experienced",
        "expected_answer": "In Python, the assignment statement (= operator) does not copy objects. Instead, it creates a binding between the existing object and the target variable name. To create copies of an object in Python, we need to use the copy module. Moreover, there are two ways of creating copies for the given object using the copy module -\nShallow Copy is a bit-wise copy of an object. The copied object created has an exact copy of the values in the original object. If either of the values is a reference to other objects, just the reference addresses for the same are copied.\nDeep Copy copies all values recursively from source to target object, i.e. it even duplicates the objects referenced by the source object.\nfrom copy import copy, deepcopy\nlist_1 = [1, 2, [3, 5], 4]\n## shallow copy\nlist_2 = copy(list_1) \nlist_2[3] = 7\nlist_2[2].append(6)\nlist_2    # output => [1, 2, [3, 5, 6], 7]\nlist_1    # output => [1, 2, [3, 5, 6], 4]\n## deep copy\nlist_3 = deepcopy(list_1)\nlist_3[3] = 8\nlist_3[2].append(7)\nlist_3    # output => [1, 2, [3, 5, 6, 7], 8]\nlist_1    # output => [1, 2, [3, 5, 6], 4]",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "copy",
        "category": "Experienced",
        "expected_answer": "copy",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "copy",
        "category": "Experienced",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "Shallow Copy",
        "category": "Experienced",
        "expected_answer": "",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "Deep Copy",
        "category": "Experienced",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "experienced"
        ]
    },
    {
        "question": "1. How will you check if a class is a child of another class?",
        "category": "Python OOPs",
        "expected_answer": "This is done by using a method called issubclass() provided by python. The method tells us if any class is a child of another class by returning true or false accordingly.\nFor example:\nclass Parent(object):\n   pass   \n \nclass Child(Parent):\n   pass   \n \n# Driver Code\nprint(issubclass(Child, Parent))    #True\nprint(issubclass(Parent, Child))    #False\nWe can check if an object is an instance of a class by making use of isinstance() method:\nobj1 = Child()\nobj2 = Parent()\nprint(isinstance(obj2, Child))    #False \nprint(isinstance(obj2, Parent))   #True",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "python-oops"
        ]
    },
    {
        "question": "issubclass()",
        "category": "Python OOPs",
        "expected_answer": "",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "python-oops"
        ]
    },
    {
        "question": "For example:",
        "category": "Python OOPs",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "python-oops"
        ]
    },
    {
        "question": "isinstance()",
        "category": "Python OOPs",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "python-oops"
        ]
    },
    {
        "question": "2. What is init method in python?",
        "category": "Python OOPs",
        "expected_answer": "The init method works similarly to the constructors in Java. The method is run as soon as an object is instantiated. It is useful for initializing any attributes or default behaviour of the object at the time of instantiation.\nFor example:\nclass InterviewbitEmployee:\n\n   # init method / constructor\n   def __init__(self, emp_name):\n       self.emp_name = emp_name\n\n   # introduce method\n   def introduce(self):\n       print('Hello, I am ', self.emp_name)\n\nemp = InterviewbitEmployee('Mr Employee')    # __init__ method is called here and initializes the object name with \"Mr Employee\"\nemp.introduce()",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "python-oops"
        ]
    },
    {
        "question": "init",
        "category": "Python OOPs",
        "expected_answer": "",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "python-oops"
        ]
    },
    {
        "question": "3. Why is finalize used?",
        "category": "Python OOPs",
        "expected_answer": "Finalize method is used for freeing up the unmanaged resources and clean up before the garbage collection method is invoked. This helps in performing memory management tasks.",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "python-oops"
        ]
    },
    {
        "question": "4. Differentiate between new and override modifiers.",
        "category": "Python OOPs",
        "expected_answer": "The new modifier is used to instruct the compiler to use the new implementation and not the base class function. The Override modifier is useful for overriding a base class function inside the child class.",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "python-oops"
        ]
    },
    {
        "question": "5. How is an empty class created in python?",
        "category": "Python OOPs",
        "expected_answer": "An empty class does not have any members defined in it. It is created by using the pass keyword (the pass command does nothing in python). We can create objects for this class outside the class.\nFor example-\nclass EmptyClassDemo:\n   pass\nobj=EmptyClassDemo()\nobj.name=\"Interviewbit\"\nprint(\"Name created= \",obj.name)\nOutput:\nName created = Interviewbit",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "python-oops"
        ]
    },
    {
        "question": "Output:",
        "category": "Python OOPs",
        "expected_answer": "",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "python-oops"
        ]
    },
    {
        "question": "6. Is it possible to call parent class without its instance creation?",
        "category": "Python OOPs",
        "expected_answer": "Yes, it is possible if the base class is instantiated by other child classes or if the base class is a static method.",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "python-oops"
        ]
    },
    {
        "question": "7. Are access specifiers used in python?",
        "category": "Python OOPs",
        "expected_answer": "Python does not make use of access specifiers specifically like private, public, protected, etc. However, it does not derive this from any variables. It has the concept of imitating the behaviour of variables by making use of a single (protected) or double underscore (private) as prefixed to the variable names. By default, the variables without prefixed underscores are public.\nExample:\n# to demonstrate access specifiers\nclass InterviewbitEmployee:\n   \n    # protected members\n    _emp_name = None\n    _age = None\n    \n    # private members\n    __branch = None\n    \n    # constructor\n    def __init__(self, emp_name, age, branch): \n         self._emp_name = emp_name\n         self._age = age\n         self.__branch = branch\n    \n    #public member\n    def display():\n        print(self._emp_name +\" \"+self._age+\" \"+self.__branch)",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "python-oops"
        ]
    },
    {
        "question": "Example:",
        "category": "Python OOPs",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "python-oops"
        ]
    },
    {
        "question": "8. How do you access parent members in the child class?",
        "category": "Python OOPs",
        "expected_answer": "Following are the ways using which you can access parent class members within a child class:\nBy using Parent class name: You can use the name of the parent class to access the attributes as shown in the example below:\nclass Parent(object):  \n   # Constructor\n   def __init__(self, name):\n       self.name = name    \n \nclass Child(Parent): \n   # Constructor\n   def __init__(self, name, age):\n       Parent.name = name\n       self.age = age\n \n   def display(self):\n       print(Parent.name, self.age)\n \n# Driver Code\nobj = Child(\"Interviewbit\", 6)\nobj.display()\nBy using super(): The parent class members can be accessed in child class using the super keyword.\nclass Parent(object):\n   # Constructor\n   def __init__(self, name):\n       self.name = name    \n \nclass Child(Parent):\n   # Constructor\n   def __init__(self, name, age):         \n       ''' \n       In Python 3.x, we can also use super().__init__(name)\n       ''' \n       super(Child, self).__init__(name)\n       self.age = age\n \n   def display(self):\n      # Note that Parent.name cant be used \n      # here since super() is used in the constructor\n      print(self.name, self.age)\n  \n# Driver Code\nobj = Child(\"Interviewbit\", 6)\nobj.display()",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "python-oops"
        ]
    },
    {
        "question": "By using Parent class name:",
        "category": "Python OOPs",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "python-oops"
        ]
    },
    {
        "question": "By using super():",
        "category": "Python OOPs",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "python-oops"
        ]
    },
    {
        "question": "9. How does inheritance work in python? Explain it with an example.",
        "category": "Python OOPs",
        "expected_answer": "Inheritance gives the power to a class to access all attributes and methods of another class. It aids in code reusability and helps the developer to maintain applications without redundant code. The class inheriting from another class is a child class or also called a derived class. The class from which a child class derives the members are called parent class or superclass.\nPython supports different kinds of inheritance, they are:\nSingle Inheritance: Child class derives members of one parent class.\n# Parent class\nclass ParentClass:\n    def par_func(self):\n         print(\"I am parent class function\")\n\n# Child class\nclass ChildClass(ParentClass):\n    def child_func(self):\n         print(\"I am child class function\")\n\n# Driver code\nobj1 = ChildClass()\nobj1.par_func()\nobj1.child_func()\nMulti-level Inheritance: The members of the parent class, A, are inherited by child class which is then inherited by another child class, B. The features of the base class and the derived class are further inherited into the new derived class, C. Here, A is the grandfather class of class C.\n# Parent class\nclass A:\n   def __init__(self, a_name):\n       self.a_name = a_name\n   \n# Intermediate class\nclass B(A):\n   def __init__(self, b_name, a_name):\n       self.b_name = b_name\n       # invoke constructor of class A\n       A.__init__(self, a_name)\n\n# Child class\nclass C(B):\n   def __init__(self,c_name, b_name, a_name):\n       self.c_name = c_name\n       # invoke constructor of class B\n       B.__init__(self, b_name, a_name)\n       \n   def display_names(self):\n       print(\"A name : \", self.a_name)\n       print(\"B name : \", self.b_name)\n       print(\"C name : \", self.c_name)\n\n#  Driver code\nobj1 = C('child', 'intermediate', 'parent')\nprint(obj1.a_name)\nobj1.display_names()\n \nMultiple Inheritance: This is achieved when one child class derives members from more than one parent class. All features of parent classes are inherited in the child class.\n# Parent class1\nclass Parent1:\n   def parent1_func(self):\n       print(\"Hi I am first Parent\")\n\n# Parent class2\nclass Parent2:\n   def parent2_func(self):\n       print(\"Hi I am second Parent\")\n\n# Child class\nclass Child(Parent1, Parent2):\n   def child_func(self):\n       self.parent1_func()\n       self.parent2_func()\n\n# Driver's code\nobj1 = Child()\nobj1.child_func()\nHierarchical Inheritance: When a parent class is derived by more than one child class, it is called hierarchical inheritance.\n# Base class\nclass A:\n     def a_func(self):\n         print(\"I am from the parent class.\")\n\n# 1st Derived class\nclass B(A):\n     def b_func(self):\n         print(\"I am from the first child.\")\n\n# 2nd Derived class\nclass C(A):\n     def c_func(self):\n         print(\"I am from the second child.\")\n \n# Driver's code\nobj1 = B()\nobj2 = C()\nobj1.a_func()\nobj1.b_func()    #child 1 method\nobj2.a_func()\nobj2.c_func()    #child 2 method",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "python-oops"
        ]
    },
    {
        "question": "Single Inheritance",
        "category": "Python OOPs",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "python-oops"
        ]
    },
    {
        "question": "Multi-level Inheritance:",
        "category": "Python OOPs",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "python-oops"
        ]
    },
    {
        "question": "Multiple Inheritance:",
        "category": "Python OOPs",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "python-oops"
        ]
    },
    {
        "question": "Hierarchical Inheritance:",
        "category": "Python OOPs",
        "expected_answer": "Answer not available",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "python-oops"
        ]
    },
    {
        "question": "10. How do you create a class in Python?",
        "category": "Python OOPs",
        "expected_answer": "To create a class in python, we use the keyword \u201cclass\u201d as shown in the example below:\nclass InterviewbitEmployee:\n   def __init__(self, emp_name):\n       self.emp_name = emp_name\nTo instantiate or create an object from the class created above, we do the following:\nemp_1=InterviewbitEmployee(\"Mr. Employee\")\nTo access the name attribute, we just call the attribute using the dot operator as shown below:\nprint(emp_1.emp_name)\n# Prints Mr. Employee\nTo create methods inside the class, we include the methods under the scope of the class as shown below:\nclass InterviewbitEmployee:\n   def __init__(self, emp_name):\n       self.emp_name = emp_name\n       \n   def introduce(self):\n       print(\"Hello I am \" + self.emp_name)\nThe self parameter in the init and introduce functions represent the reference to the current class instance which is used for accessing attributes and methods of that class. The self parameter has to be the first parameter of any method defined inside the class. The method of the class InterviewbitEmployee can be accessed as shown below:\nemp_1.introduce()\nThe overall program would look like this:\nclass InterviewbitEmployee:\n   def __init__(self, emp_name):\n       self.emp_name = emp_name\n       \n   def introduce(self):\n       print(\"Hello I am \" + self.emp_name)\n       \n# create an object of InterviewbitEmployee class\nemp_1 = InterviewbitEmployee(\"Mr Employee\")\nprint(emp_1.emp_name)    #print employee name\nemp_1.introduce()        #introduce the employee",
        "follow_up": "Can you provide an optimized approach?",
        "tags": [
            "python",
            "python-oops"
        ]
    }
]
